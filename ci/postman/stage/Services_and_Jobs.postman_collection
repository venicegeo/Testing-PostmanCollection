{
	"id": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
	"name": "Services_and_Jobs",
	"description": "",
	"order": [],
	"folders": [
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"description": "",
			"id": "d56edcab-e1a2-8302-8254-b12766417afb",
			"lastRevision": 691274335,
			"lastUpdatedBy": "699425",
			"name": "1_Startup",
			"order": [
				"9333601e-593c-9bb4-bcdf-b437349d4e7b",
				"314da4b5-9a7e-4056-2f77-8250f7be4334",
				"2c75fd00-6eb4-a0f4-40be-9e0ea11fbf90",
				"c52d2ba3-3eb0-536b-a91e-87438c9f1910"
			],
			"owner": "699425"
		},
		{
			"description": "",
			"id": "51708a3c-5f51-c0aa-0a3d-33d73a6ab454",
			"lastRevision": 698371682,
			"lastUpdatedBy": "699425",
			"name": "2_Critical",
			"order": [
				"34f5cb55-bacd-726f-4e4a-2bb838938858",
				"667dabcf-9904-981d-c876-1e63376a1864",
				"2b80f10b-c742-bef1-63e6-80462429c7ab",
				"60c9b232-9f3c-20b2-fab9-5446b11066b8",
				"62399f36-bfb1-553a-72c4-b74c896ca162",
				"c773461b-5e85-3686-4761-8d5af5897bd2",
				"fef41362-f65b-83c1-cde6-bcd71870cc49",
				"2e85c001-987b-fcea-e715-2c507ebb00e8",
				"f247d54a-bedd-816f-7ca8-721a251e27de"
			],
			"owner": "699425"
		},
		{
			"description": "",
			"id": "bdc131bd-0cb7-965b-ab53-5bd33449c247",
			"lastRevision": 919922861,
			"lastUpdatedBy": "699425",
			"name": "3_Normal",
			"order": [
				"d8bebf66-1119-749f-4087-0a9b28f7e079",
				"27295b58-09e3-078b-b52c-f9a968a3d303",
				"677d2925-a9e1-5fe2-6dea-1c3b1e8b220e",
				"8ce8a578-51f8-6dd3-d1ce-07cc96d4df0f",
				"fcab329f-ad50-0286-7287-0fcad98b71cd",
				"9f40825b-5d25-6bd8-f467-f3ce5b87ad43",
				"64f2abe3-e926-f721-7ddf-458f8a0d63be",
				"34b2eb58-200c-4952-171a-aeb761dee126"
			],
			"owner": "699425"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"description": "",
			"id": "77205174-4d78-0434-2e54-a9eae4174623",
			"lastRevision": 841416562,
			"lastUpdatedBy": "699425",
			"name": "4_Low",
			"order": [
				"9f8a4ae8-686a-71e4-0ee3-31568914960a",
				"febb7eb9-ccdb-a834-ae53-c37862fbfd87",
				"442a8e4a-d0df-d282-8a15-4fe43df83fff",
				"f6eda7c9-4f59-09f3-7805-b69f1e411e67",
				"09c49f48-1823-ddc6-7746-b86f15c94fcd",
				"e834f0f8-c36c-3201-fd12-d32a53c2d148",
				"f1ca1948-fba2-fc47-37fb-b502e75dd78b",
				"734b2868-631b-2288-71d0-0d22da21070f",
				"c84a5cf0-b44c-7aea-d56c-a4a98e54b7dd",
				"fd9d2b67-b2f9-93e2-9652-d0e31be7e659",
				"35a40a05-7aa6-d57e-7c27-f0030f31e694",
				"a7b2cd63-f52b-4698-72e3-7e2422e8f41b",
				"89ba72d6-fd54-abff-3cf4-fd9fac236c10",
				"4796d941-771c-0830-b9ef-72b383c043ab",
				"a7e5d5e6-9b8d-fd38-4b13-9041550c828c",
				"ed21ad5d-7a94-0fca-e9a7-8407eadadb2c",
				"b1d531da-e9a7-7995-ada5-10eb4ebc87f3",
				"082f3a3b-71d6-99cf-cf80-4493153ff996",
				"b1ac73ca-70cf-f5ee-f3d3-830148365167",
				"c617aa5e-5cdb-ee14-65e7-046e4812b44e",
				"97cc7ba0-6483-fbcd-1ac0-8355deee5dd7",
				"f3ed3487-0058-2e5c-07d4-abf6b3a7923c",
				"4c73979f-b9c2-102b-f47b-93c6fc332101",
				"b69ec83b-69a7-eb5e-699e-65e6a052c6db",
				"1cea1956-9bd3-5f6c-8be3-442426f36ec0",
				"43341dce-2dda-c411-70c6-eb0ff2bfa81c",
				"781201eb-8d3a-d7cb-fe6d-2d8cd53bdbfd",
				"f06dd39a-63e5-1f0c-6e81-1cf2f4a48e4c",
				"94549de0-800f-d5ca-41fa-88fd747a79b1",
				"7c0a2afb-01f8-f75b-abd4-a166b847c615",
				"0016adb3-2b1b-cafe-1947-30c5b76b770b",
				"98ff3c22-87a4-f892-71da-7102d7cefe60",
				"052a62bc-7a69-d8a7-abbb-a7b71e32c5bb",
				"3cf43555-1ad5-71b7-c433-a2d522dfb1ee",
				"129f49e0-8a94-37df-12c1-526be6b240fa",
				"64f820d3-a708-4461-925d-369a74b83400",
				"f5b67f48-2dcb-b8f9-3c4f-9b87e911c3da",
				"cf0fe603-796d-bd1f-fa68-dcc3207c43a6",
				"6d7646ca-b685-82e0-55ec-d18b3d80a1ff",
				"a5a38e73-5d76-e1c4-8f1c-4dceebd25cce",
				"35e7253d-803e-224b-08bd-21103e70e93c",
				"184b2627-da7f-6bb4-75ca-74759bf2d355",
				"0055d086-a9dc-759c-34b8-c37c1fdc8001",
				"7e698f3b-a1bb-7550-037d-ad2983fd62b8",
				"4d9dac29-bdb0-31b9-b4a1-b80f44b2b531"
			],
			"owner": "699425"
		},
		{
			"description": "",
			"id": "f7908e06-7328-8027-9d6d-a04c8bfe0055",
			"lastRevision": 906306011,
			"lastUpdatedBy": "699425",
			"name": "5_Teardown",
			"order": [
				"5def9700-4e0c-c03e-f168-c364e88e5563",
				"fd2883ea-d726-c3e4-8c9a-8a9f99b24f9d",
				"76226aca-af9d-f43e-5262-f04aad3e4d87",
				"65549667-aa67-b960-47a7-2629ad28bbef"
			],
			"owner": "699425"
		}
	],
	"folders_order": [
		"d56edcab-e1a2-8302-8254-b12766417afb",
		"51708a3c-5f51-c0aa-0a3d-33d73a6ab454",
		"bdc131bd-0cb7-965b-ab53-5bd33449c247",
		"77205174-4d78-0434-2e54-a9eae4174623",
		"f7908e06-7328-8027-9d6d-a04c8bfe0055"
	],
	"timestamp": 0,
	"owner": "699425",
	"public": false,
	"requests": [
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Attempt to list Services, specifying a negative page.",
			"descriptionFormat": "html",
			"folder": "77205174-4d78-0434-2e54-a9eae4174623",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "0016adb3-2b1b-cafe-1947-30c5b76b770b",
			"isFromCollection": true,
			"method": "GET",
			"name": "List Services - Negative Page",
			"pathVariables": {},
			"preRequestScript": null,
			"rawModeData": null,
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 400\"] = responseCode.code === 400;\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Problem with page parameter\"] = data.message.match(/page/i);\n}\nif (testLevels(tests, data, 'type')) {\n    tests[\"Error Type\"] = data.type === 'error';\n}",
			"url": "https://pz-gateway.{{domain}}/service?page=-1"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt to create a Job with a no \"dataOutput.type\" parameter.",
			"descriptionFormat": null,
			"folder": "77205174-4d78-0434-2e54-a9eae4174623",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "0055d086-a9dc-759c-34b8-c37c1fdc8001",
			"method": "POST",
			"name": "Create Job - No dataOutput.type",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 400 (Bug #7542)\"] = responseCode.code === 400;\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Missing type\"] = data.message.match(/type/i);\n}",
			"url": "https://pz-gateway.{{domain}}/job",
			"rawModeData": "{\r\n  \"data\": {\r\n      \"dataInputs\": {},\r\n      \"dataOutput\": [{ \"mimeType\":\"application/json\" }],\r\n      \"serviceId\": \"{{serviceId}}\"\r\n  },\r\n  \"type\": \"execute-service\"\r\n}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Attempt to list Services, specifying a string for a perPage value.",
			"descriptionFormat": "html",
			"folder": "77205174-4d78-0434-2e54-a9eae4174623",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "052a62bc-7a69-d8a7-abbb-a7b71e32c5bb",
			"method": "GET",
			"name": "List Services - Bad perPage",
			"pathVariables": {},
			"preRequestScript": null,
			"rawModeData": null,
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 400\"] = responseCode.code === 400;\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Cannot have a string\"] = data.message.match(/string/i);\n    tests[\"Should be integer\"] = data.message.match(/integer/i);\n}",
			"url": "https://pz-gateway.{{domain}}/service?perPage=foo"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Suite of requests to test that if an asynch service is deleted before one of its jobs is complete, the job will not be stuck in a certain status.\n\nRegister the asynch service to be deleted.",
			"folder": "77205174-4d78-0434-2e54-a9eae4174623",
			"headers": "Content-Type: application/json\nsize: 30\nfrom: 0\nkey: stamp\norder: true\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "082f3a3b-71d6-99cf-cf80-4493153ff996",
			"method": "POST",
			"name": "Delete Asynch Service - Register",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.serviceId', 'string')) {\n    postman.setEnvironmentVariable(\"serviceId_asynch_del\",data.data.serviceId);\n    tests[\"serviceId GUID created\"] = data.data.serviceId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n}",
			"time": 1495561899151,
			"url": "https://pz-gateway.{{domain}}/service",
			"rawModeData": "{\n  \"isAsynchronous\":true,\n  \"url\" : \"https://pz-svcs-prevgen.{{domain}}/cropasync\",\n  \"timeout\" : \"180000\",\n  \"method\" : \"POST\",\n  \"contractUrl\" : \"https://pz-svcs-prevgen.{{domain}}/cropasync\",\n  \"resourceMetadata\" : {\n    \"name\" : \"pz-svcs-prevgen crop raster test\",\n    \"description\" : \"pz-svcs-prevgen is an awesome sample crop image external service.\",\n    \"classType\": {\n        \"classification\": \"UNCLASSIFIED\"\n     }\n  }\n}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Attempt to delete a non-existant Job.",
			"descriptionFormat": "html",
			"folder": "77205174-4d78-0434-2e54-a9eae4174623",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "09c49f48-1823-ddc6-7746-b86f15c94fcd",
			"method": "DELETE",
			"name": "Job Not Found - DELETE",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": null,
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 404\"] = responseCode.code === 404;\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Not Found Message\"] = data.message.match(/no.*found/i);\n}\nif (testLevels(tests, data, 'type')) {\n    tests[\"Error Type (Bug #9332)\"] = data.type === 'error';\n}",
			"url": "https://pz-gateway.{{domain}}/job/foo"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt to register a Service with a bad \"method\" parameter.",
			"descriptionFormat": "html",
			"folder": "77205174-4d78-0434-2e54-a9eae4174623",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "129f49e0-8a94-37df-12c1-526be6b240fa",
			"method": "POST",
			"name": "Register Service - Bad Method",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\n\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'errors', 'array')) {\n    if (testLevels(tests, data.errors[0], 'field', 'skip', 'errors[0]')) {\n        tests[\"Problem with 'method' field\"] = data.errors[0].field == 'method';\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/service",
			"rawModeData": "{\n    \"url\": \"https://pzsvc-hello.{{domain}}/\",\n    \"contractUrl\": \"http://helloContract\",\n    \"method\" : 1,\n    \"isAsynchronous\" : \"false\",\n    \"resourceMetadata\": {\n        \"name\": \"pzsvc-hello service\",\n        \"description\": \"{{text description}}\",\n        \"classType\": {\n            \"classification\": \"UNCLASSIFIED\"\n         }\n    }\n}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt to create a Job with a no \"dataOutput\" parameter.",
			"descriptionFormat": "html",
			"folder": "77205174-4d78-0434-2e54-a9eae4174623",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "184b2627-da7f-6bb4-75ca-74759bf2d355",
			"method": "POST",
			"name": "Create Job - No dataOutput",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Failed Validation message\"] = data.message.match(/[Vv]alidation/);\n}\n\nif (testLevels(tests, data, 'errors', 'array')) {\n    if (testLevels(tests, data.errors[0], 'code', 'string')) {\n        tests[\"Not Null Message\"] = data.errors[0].code.match(/[Nn]ull/);\n    }\n    if (testLevels(tests, data.errors[0], 'field')) {\n        tests[\"The problem is with 'data.dataOutput'\"] = data.errors[0].field === 'data.dataOutput';\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/job",
			"rawModeData": "{\r\n  \"data\": {\r\n      \"dataInputs\": {},\r\n      \"serviceId\": \"{{serviceId}}\"\r\n  },\r\n  \"type\": \"execute-service\"\r\n}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Part of a sequence of requests to check that a deleted Service cannot be utilized.\nRegister the Service.",
			"descriptionFormat": "html",
			"folder": "77205174-4d78-0434-2e54-a9eae4174623",
			"headers": "Content-Type: application/json\nsize: 30\nfrom: 0\nkey: stamp\norder: true\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "1cea1956-9bd3-5f6c-8be3-442426f36ec0",
			"method": "POST",
			"name": "Deleted Service - Register Service",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.serviceId', 'string')) {\n    postman.setEnvironmentVariable(\"serviceId_cancel\",data.data.serviceId);\n    tests[\"serviceId GUID created\"] = data.data.serviceId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n}",
			"url": "https://pz-gateway.{{domain}}/service",
			"rawModeData": "{\n    \"url\": \"https://pzsvc-hello.{{domain}}/\",\n    \"contractUrl\": \"http://helloContract\",\n    \"method\" : \"GET\",\n    \"isAsynchronous\" : \"false\",\n    \"resourceMetadata\": {\n        \"name\": \"pzsvc-hello service\",\n        \"description\": \"{{text description}}\",\n        \"classType\": {\n            \"classification\": \"UNCLASSIFIED\"\n         }\n    }\n}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "List services via Elastic Search, verifying both the synchronous and asynchronous services are present.\nThis is a \"match_all\" query.",
			"folder": "bdc131bd-0cb7-965b-ab53-5bd33449c247",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "27295b58-09e3-078b-b52c-f9a968a3d303",
			"method": "POST",
			"name": "Complex Query",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200 (Bug #11888)\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nvar found_service = false;\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'serviceId', 'skip', 'data[]')) {\n            found_service = (found_service || data.data[i].serviceId === postman.getEnvironmentVariable('serviceId'));\n        }\n    }\n}\n\ntests[\"Service found in list\"] = found_service;",
			"time": 1489431163738,
			"url": "https://pz-gateway.{{domain}}/service/query",
			"rawModeData": "{\n    \"query\": {\n        \"match_all\": {}\n    }\n}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Check the metadata of the dataId that came from a completed sychronous execute-service job.",
			"descriptionFormat": "html",
			"folder": "51708a3c-5f51-c0aa-0a3d-33d73a6ab454",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "2b80f10b-c742-bef1-63e6-80462429c7ab",
			"method": "GET",
			"name": "Check Resulting dataId",
			"pathVariables": {},
			"preRequestScript": null,
			"rawModeData": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.dataType.content', 'string')) {\n    tests[\"Hello Service was executed\"] = data.data.dataType.content.match(/h(ello|i)/i);\n    postman.setEnvironmentVariable('Repeat Job Check', data.data.dataType.content);\n}\nif (testLevels(tests, data, 'data.metadata.createdBy')) {\n    tests[\"Correct createdBy (Bug #8978)\"] = data.data.metadata.createdBy === postman.getEnvironmentVariable('username');\n}",
			"url": "https://pz-gateway.{{domain}}/data/{{dataId}}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"collectionRequestId": "2c75fd00-6eb4-a0f4-40be-9e0ea11fbf90",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Register the synchronous Service (pzsvc-hello) to be used throughout this collection.",
			"folder": "d56edcab-e1a2-8302-8254-b12766417afb",
			"headerData": [
				{
					"description": "",
					"enabled": true,
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"description": "",
					"enabled": true,
					"key": "size",
					"value": "30"
				},
				{
					"description": "",
					"enabled": true,
					"key": "from",
					"value": "0"
				},
				{
					"description": "",
					"enabled": true,
					"key": "key",
					"value": "stamp"
				},
				{
					"description": "",
					"enabled": true,
					"key": "order",
					"value": "true"
				},
				{
					"description": "",
					"enabled": true,
					"key": "Authorization",
					"value": ""
				}
			],
			"headers": "Content-Type: application/json\nsize: 30\nfrom: 0\nkey: stamp\norder: true\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "2c75fd00-6eb4-a0f4-40be-9e0ea11fbf90",
			"isFromCollection": true,
			"method": "POST",
			"name": "Register Service",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": "",
			"queryParams": [],
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.serviceId', 'string')) {\n    postman.setEnvironmentVariable(\"serviceId\",data.data.serviceId);\n    tests[\"serviceId GUID created\"] = data.data.serviceId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n}",
			"time": 1500633592705,
			"url": "https://pz-gateway.{{domain}}/service",
			"rawModeData": "{\n    \"url\": \"https://pz-gateway.{{domain}}/\",\n    \"contractUrl\": \"garbage\",\n    \"method\" : \"GET\",\n    \"isAsynchronous\" : \"false\",\n    \"resourceMetadata\": {\n        \"name\": \"pzsvc-hello service\",\n        \"description\": \"{{text description}}\",\n        \"classType\": {\n            \"classification\": \"UNCLASSIFIED\"\n         }\n    }\n}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Check the job status of the asynchronous job to get the dataId.  Repeat up to 10 times until the job is successful.",
			"folder": "51708a3c-5f51-c0aa-0a3d-33d73a6ab454",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "2e85c001-987b-fcea-e715-2c507ebb00e8",
			"method": "GET",
			"name": "Check Asynch Job Status",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.status')) {\n    if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Check Asynch Job Status');\n            wait(10000);\n        }\n        else {\n            tests[\"Job finished in time\"] = false;\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n    else if (data.data.status === 'Success') {\n        postman.setEnvironmentVariable('retry_loop',0);\n        tests[\"Job finished in time\"] = true;\n        if (testLevels(tests, data, 'data.result.dataId')) {\n            postman.setEnvironmentVariable(\"dataId_asynch\", data.data.result.dataId);\n        }\n        wait(5000);  // Make sure that the dataId actually exists.  Remove when #8885 is resolved.\n    }\n    else {\n        tests[\"status should not be \" + data.data.status] = false;\n        postman.setEnvironmentVariable('retry_loop',0);\n    }\n}",
			"time": 1489692220596,
			"url": "https://pz-gateway.{{domain}}/job/{{jobId_asynch}}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Create a new API key for testing",
			"folder": "d56edcab-e1a2-8302-8254-b12766417afb",
			"headerData": [
				{
					"description": "",
					"enabled": true,
					"key": "Authorization",
					"value": ""
				}
			],
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{cert1}}"
			},
			"id": "314da4b5-9a7e-4056-2f77-8250f7be4334",
			"method": "GET",
			"name": "Get Key",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": "",
			"queryParams": [],
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'uuid')) {\n    postman.setEnvironmentVariable('API Key', data.uuid);\n} else {\n    // postman.setNextRequest('');\n}",
			"time": 1496779224588,
			"url": "https://pz-gateway.{{domain}}/v2/key",
			"version": 2,
			"rawModeData": ""
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "This sequence of tests verifies that a job cannot be created from a softDeleted Serivce.\nAttempt to create a job from the softDeleted Service.",
			"descriptionFormat": "html",
			"folder": "bdc131bd-0cb7-965b-ab53-5bd33449c247",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "34b2eb58-200c-4952-171a-aeb761dee126",
			"method": "POST",
			"name": "Disable - Create Job",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Service offline message\"] = data.message.match(/service/i) && data.message.match(/offline/i);\n}",
			"url": "https://pz-gateway.{{domain}}/job",
			"rawModeData": "{\r\n  \"data\": {\r\n      \"dataInputs\": {},\r\n      \"dataOutput\": [{ \"mimeType\":\"application/json\", \"type\":\"text\" }],\r\n      \"serviceId\": \"{{serviceId}}\"\r\n  },\r\n  \"type\": \"execute-service\"\r\n}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Create a Job using the synchronous Service, pzsvc-hello.",
			"descriptionFormat": "html",
			"folder": "51708a3c-5f51-c0aa-0a3d-33d73a6ab454",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "34f5cb55-bacd-726f-4e4a-2bb838938858",
			"method": "POST",
			"name": "Create Job",
			"pathVariables": {},
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\"< < < < < < < < < < < CRITICAL > > > > > > > > > >\");\nconsole.log(\"    These tests represent basic functionality.    \");\nconsole.log(\"         DO NOT PUSH if these tests fail.         \");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.jobId', 'string')) {\n    tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n    postman.setEnvironmentVariable(\"jobId_standard\",data.data.jobId);\n}",
			"url": "https://pz-gateway.{{domain}}/job",
			"rawModeData": "{\r\n  \"data\": {\r\n      \"dataInputs\": {},\r\n      \"dataOutput\": [{ \"mimeType\":\"application/json\", \"type\":\"text\" }],\r\n      \"serviceId\": \"{{serviceId}}\"\r\n  },\r\n  \"type\": \"execute-service\"\r\n}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Verify that the pagination parameters match the requested values.",
			"folder": "77205174-4d78-0434-2e54-a9eae4174623",
			"headerData": [
				{
					"description": "",
					"enabled": true,
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"description": "",
					"enabled": true,
					"key": "Authorization",
					"value": ""
				}
			],
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "35a40a05-7aa6-d57e-7c27-f0030f31e694",
			"method": "GET",
			"name": "List Services Pagination",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": "",
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "perPage",
					"value": "25"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "sortBy",
					"value": "resourceMetadata.createdOn"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "order",
					"value": "desc"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "page",
					"value": "1"
				}
			],
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nvar found_service = false;\n\nif (testLevels(tests, data, 'pagination.count')) {\n    if (data.pagination.count - 25 >= 0) {\n        if (testLevels(tests, data, 'data', 'array')) {\n            for (i = 0; i < data.data.length; i++) {\n                if (testLevels(tests, data.data[i], 'serviceId', 'skip', 'data[]')) {\n                    found_service = (found_service || data.data[i].serviceId === postman.getEnvironmentVariable('serviceId_cancel'));\n                }\n            }\n            tests[\"correct array size: \" + typeof data.data] = Math.min(25, Math.max(data.pagination.count - 25, 0)) == data.data.length;\n        }\n    } else {\n        tests[\"Second page should be empty, not enough data\"] = data.data.length === 0;\n    }\n}\nif (testLevels(tests, data, 'pagination.page')) {\n    tests[\"Displays second page\"] = data.pagination.page == 1;\n}\nif (testLevels(tests, data, 'pagination.perPage')) {\n    tests[\"Correct perPage\"] = data.pagination.perPage == 25;\n}\nif (testLevels(tests, data, 'pagination.sortBy')) {\n    tests[\"Correct sortBy\"] = data.pagination.sortBy == 'resourceMetadata.createdOn';\n}\nif (testLevels(tests, data, 'pagination.order')) {\n    tests[\"Correct order\"] = data.pagination.order == 'desc';\n}\n\ntests[\"Service not found in list\"] = !found_service;",
			"time": 1502803644822,
			"url": "https://pz-gateway.{{domain}}/service?perPage=25&sortBy=resourceMetadata.createdOn&order=desc&page=1",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt to create a Job with a no \"dataInputs\" parameter.",
			"descriptionFormat": "html",
			"folder": "77205174-4d78-0434-2e54-a9eae4174623",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "35e7253d-803e-224b-08bd-21103e70e93c",
			"method": "POST",
			"name": "Create Job - No dataInputs",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Failed Validation message\"] = data.message.match(/[Vv]alidation/);\n}\n\nif (testLevels(tests, data, 'errors', 'array')) {\n    if (testLevels(tests, data.errors[0], 'code', 'string')) {\n        tests[\"Not Null Message\"] = data.errors[0].code.match(/[Nn]ull/);\n    }\n    if (testLevels(tests, data.errors[0], 'field')) {\n        tests[\"The problem is with 'data.dataInputs'\"] = data.errors[0].field === 'data.dataInputs';\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/job",
			"rawModeData": "{\r\n  \"data\": {\r\n      \"dataOutput\": [{ \"mimeType\":\"application/json\", \"type\":\"text\" }],\r\n      \"serviceId\": \"{{serviceId}}\"\r\n  },\r\n  \"type\": \"execute-service\"\r\n}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Attempt to list Services, giving an invalid string for the \"sortBy\" parameter.",
			"descriptionFormat": "html",
			"folder": "77205174-4d78-0434-2e54-a9eae4174623",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "3cf43555-1ad5-71b7-c433-a2d522dfb1ee",
			"isFromCollection": true,
			"method": "GET",
			"name": "List Services - Bad order",
			"pathVariables": {},
			"preRequestScript": null,
			"rawModeData": null,
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 400 (Bug #7542)\"] = responseCode.code === 400;\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Problem with order parameter\"] = data.message.match(/order/i);\n    tests[\"Needs to be 'asc' or 'desc'\"] = data.message.match(/asc/i) && data.message.match(/desc/i);\n}\nif (testLevels(tests, data, 'type')) {\n    tests[\"Error Type\"] = data.type === 'error';\n}",
			"url": "https://pz-gateway.{{domain}}/service?order=foo"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Part of a sequence of requests to check that a deleted Service cannot be utilized.\nDelete the Service.",
			"descriptionFormat": "html",
			"folder": "77205174-4d78-0434-2e54-a9eae4174623",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "43341dce-2dda-c411-70c6-eb0ff2bfa81c",
			"method": "DELETE",
			"name": "Deleted Service - Delete",
			"pathVariables": {},
			"preRequestScript": null,
			"rawModeData": null,
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId_cancel}}"
		},
		{
			"id": "442a8e4a-d0df-d282-8a15-4fe43df83fff",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "",
					"description": "",
					"enabled": true
				}
			],
			"url": "https://pz-gateway.{{domain}}/data?perPage=200&sortBy=metadata.createdOn&order=desc",
			"queryParams": [
				{
					"key": "perPage",
					"value": "200",
					"equals": true,
					"description": "",
					"enabled": true
				},
				{
					"key": "sortBy",
					"value": "metadata.createdOn",
					"equals": true,
					"description": "",
					"enabled": true
				},
				{
					"key": "order",
					"value": "desc",
					"equals": true,
					"description": "",
					"enabled": true
				}
			],
			"preRequestScript": "",
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nvar found = false;\nvar found_async = false;\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'dataId', 'skip', 'data[]')) {\n            found = (found || data.data[i].dataId === postman.getEnvironmentVariable('dataId'));\n            found_async = (found_async || data.data[i].dataId === postman.getEnvironmentVariable('dataId_asynch'));\n        }\n        if (found && found_async) {\n            break;\n        }\n    }\n}\n\ntests[\"The executed job's data was found\"] = found;\ntests[\"The executed async job's data was found\"] = found_async;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1503582785720,
			"name": "Check Data List",
			"description": "Verify that the data created by the executed job is present in the lsit of data.",
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Re-enable the Service.",
			"descriptionFormat": "html",
			"folder": "77205174-4d78-0434-2e54-a9eae4174623",
			"headers": "Content-Type: application/json\nsize: 30\nfrom: 0\nkey: stamp\norder: true\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "4796d941-771c-0830-b9ef-72b383c043ab",
			"method": "PUT",
			"name": "Reenable - Update Service",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Success!\"] = data.type.match(/[Ss]uccess/);\n}\nif (testLevels(tests, data, 'data.message', 'string')) {\n    tests[\"Successful Update Message\"] = data.data.message.match(/[Uu]pdat/) && data.data.message.match(/[Ss]ervice/);\n}",
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}",
			"rawModeData": "{\n    \"resourceMetadata\": {\n        \"availability\": \"anything\"\n    }\n}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Cancel a long-running Job.",
			"descriptionFormat": "html",
			"folder": "77205174-4d78-0434-2e54-a9eae4174623",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "4c73979f-b9c2-102b-f47b-93c6fc332101",
			"method": "DELETE",
			"name": "Cancelling Job - Cancel Job",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": null,
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'type')) {\n    tests[\"Cancellation Successful\"] = data.type === 'success';\n}\nif (testLevels(tests, data, 'data.message', 'string')) {\n    tests[\"Correct jobId deleted\"] = data.data.message.match(postman.getEnvironmentVariable('jobId'));\n}",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt to create a Job with a no \"type\" parameter.",
			"descriptionFormat": "html",
			"folder": "77205174-4d78-0434-2e54-a9eae4174623",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "4d9dac29-bdb0-31b9-b4a1-b80f44b2b531",
			"method": "POST",
			"name": "Create Job - No type",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 400 (Bug #7542)\"] = responseCode.code === 400;\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Missing type\"] = data.message.match(/type/i);\n}",
			"url": "https://pz-gateway.{{domain}}/job",
			"rawModeData": "{\r\n  \"data\": {\r\n    \"dataInputs\": {},\r\n    \"dataOutput\": [{ \"mimeType\":\"application/json\", \"type\":\"text\" }],\r\n    \"serviceId\": \"{{serviceId}}\"\r\n  }\r\n}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"collectionRequestId": "5def9700-4e0c-c03e-f168-c364e88e5563",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Delete the synchronous Service used throughout this collection.",
			"descriptionFormat": "html",
			"folder": "f7908e06-7328-8027-9d6d-a04c8bfe0055",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "5def9700-4e0c-c03e-f168-c364e88e5563",
			"isFromCollection": true,
			"method": "DELETE",
			"name": "Delete Service",
			"pathVariables": {},
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\" < < < < < < < < < < < < TEAR-DOWN > > > > > > > > > > > \");\nconsole.log(\"These tests destroy any items created by previous tests. \");\nconsole.log(\" These tests represent important features, like DELETEs. \");\nconsole.log(\"            DO NOT PUSH if these tests fail.             \");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"rawModeData": null,
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": null,
			"dataMode": "params",
			"description": "Get the metadata of the Service.",
			"descriptionFormat": "html",
			"folder": "51708a3c-5f51-c0aa-0a3d-33d73a6ab454",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "60c9b232-9f3c-20b2-fab9-5446b11066b8",
			"method": "GET",
			"name": "Get Service Info",
			"pathVariables": {},
			"preRequestScript": null,
			"rawModeData": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"collectionRequestId": "62399f36-bfb1-553a-72c4-b74c896ca162",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Update the \"resourceMetadata.name\" field of the service.",
			"folder": "51708a3c-5f51-c0aa-0a3d-33d73a6ab454",
			"headers": "Content-Type: application/json\nsize: 30\nfrom: 0\nkey: stamp\norder: true\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "62399f36-bfb1-553a-72c4-b74c896ca162",
			"isFromCollection": true,
			"method": "PUT",
			"name": "Update Service",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Success!\"] = data.type.match(/[Ss]uccess/);\n}\nif (testLevels(tests, data, 'data.message', 'string')) {\n    tests[\"Successful Update Message\"] = data.data.message.match(/[Uu]pdat/) && data.data.message.match(/[Ss]ervice/);\n}",
			"time": 1495127916533,
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}",
			"rawModeData": "{\n    \"resourceMetadata\": {\n        \"name\": \"{{New Name}}\",\n        \"nonExistentField\": \"foo\"\n    }\n}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": null,
			"dataMode": "params",
			"description": "This sequence of tests verifies that a job cannot be created from a softDeleted Serivce.\nLook for \"OFFLINE\" in the Service metadata.",
			"folder": "bdc131bd-0cb7-965b-ab53-5bd33449c247",
			"headerData": [
				{
					"description": "",
					"enabled": true,
					"key": "Authorization",
					"value": ""
				}
			],
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "64f2abe3-e926-f721-7ddf-458f8a0d63be",
			"method": "GET",
			"name": "Disable - Validate Soft Delete",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.resourceMetadata.availability')) {\n    tests[\"Service is now OFFLINE\"] = data.data.resourceMetadata.availability === 'OFFLINE';\n}",
			"time": 1502808993774,
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt to register a Service with a no \"url\" parameter.",
			"folder": "77205174-4d78-0434-2e54-a9eae4174623",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "64f820d3-a708-4461-925d-369a74b83400",
			"isFromCollection": true,
			"method": "POST",
			"name": "Register Service - No url",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 400 (Bug #17299)\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Problem with `url` message\"] = data.message.match(/url/);\n}\n\n// Old response format:\n\n// if (testLevels(tests, data, 'errors', 'array')) {\n//     if (testLevels(tests, data.errors[0], 'code', 'string')) {\n//         tests[\"Not Null Message\"] = data.errors[0].code.match(/[Nn]ull/);\n//     }\n//     if (testLevels(tests, data.errors[0], 'field')) {\n//         tests[\"The problem is with 'url'\"] = data.errors[0].field === 'url';\n//     }\n// }",
			"time": 1488464529517,
			"url": "https://pz-gateway.{{domain}}/service",
			"rawModeData": "{\n    \"method\": \"GET\",\n    \"contractUrl\": \"http://helloContract\",\n    \"isAsynchronous\" : \"false\",\n    \"resourceMetadata\": {\n        \"name\": \"pzsvc-hello service\",\n        \"description\": \"{{text description}}\",\n        \"classType\": {\n            \"classification\": \"UNCLASSIFIED\"\n         }\n    }\n}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Delete the (asynch) data created in this collection.",
			"descriptionFormat": "html",
			"folder": "f7908e06-7328-8027-9d6d-a04c8bfe0055",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "65549667-aa67-b960-47a7-2629ad28bbef",
			"method": "DELETE",
			"name": "Delete Asynch Data",
			"pathVariables": {},
			"preRequestScript": null,
			"rawModeData": null,
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_asynch}}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Check the job status of the synchronous job to get the dataId.  Repeat up to 10 times until the job is successful.",
			"descriptionFormat": "html",
			"folder": "51708a3c-5f51-c0aa-0a3d-33d73a6ab454",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "667dabcf-9904-981d-c876-1e63376a1864",
			"method": "GET",
			"name": "Check Job Status",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": null,
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.status')) {\n    if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Check Job Status');\n            wait(1000);\n        }\n        else {\n            tests[\"Job finished in time\"] = false;\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n    else if (data.data.status === 'Success') {\n        postman.setEnvironmentVariable('retry_loop',0);\n        tests[\"Job finished in time\"] = true;\n        if (testLevels(tests, data, 'data.result.dataId')) {\n            postman.setEnvironmentVariable(\"dataId\", data.data.result.dataId);\n        }\n    }\n    else {\n        tests[\"status should not be \" + data.data.status] = false;\n        postman.setEnvironmentVariable('retry_loop',0);\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId_standard}}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Rerun the job run on the synch Service.  Verify that a new jobId is returned.",
			"folder": "bdc131bd-0cb7-965b-ab53-5bd33449c247",
			"headerData": [
				{
					"description": "",
					"enabled": true,
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"description": "",
					"enabled": true,
					"key": "Authorization",
					"value": ""
				}
			],
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "677d2925-a9e1-5fe2-6dea-1c3b1e8b220e",
			"method": "POST",
			"name": "Rerun - Create Job",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [],
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.jobId', 'string')) {\n    tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n    tests[\"New GUID created\"] = data.data.jobId != postman.getEnvironmentVariable('jobId');\n    postman.setEnvironmentVariable(\"jobId_rerun\",data.data.jobId);\n}",
			"time": 1497649469032,
			"url": "https://pz-gateway.{{domain}}/job/{{jobId_standard}}",
			"rawModeData": ""
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt to register a Service with a no \"method\" parameter.",
			"descriptionFormat": "html",
			"folder": "77205174-4d78-0434-2e54-a9eae4174623",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "6d7646ca-b685-82e0-55ec-d18b3d80a1ff",
			"method": "POST",
			"name": "Register Service - No method",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Failed Validation message\"] = data.message.match(/[Vv]alidation/);\n}\n\nif (testLevels(tests, data, 'errors', 'array')) {\n    if (testLevels(tests, data.errors[0], 'code', 'string')) {\n        tests[\"Not Null Message\"] = data.errors[0].code.match(/[Nn]ull/);\n    }\n    if (testLevels(tests, data.errors[0], 'field')) {\n        tests[\"The problem is with 'method'\"] = data.errors[0].field === 'method';\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/service",
			"rawModeData": "{\n    \"url\": \"https://pzsvc-hello.{{domain}}/\",\n    \"contractUrl\": \"http://helloContract\",\n    \"isAsynchronous\" : \"false\",\n    \"resourceMetadata\": {\n        \"name\": \"pzsvc-hello service\",\n        \"description\": \"{{text description}}\",\n        \"classType\": {\n            \"classification\": \"UNCLASSIFIED\"\n         }\n    }\n}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "List services, filtered by the keyword \"integration\", verifying that the synchronous service is present, and that all results match the keyword search.",
			"descriptionFormat": "html",
			"folder": "77205174-4d78-0434-2e54-a9eae4174623",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "734b2868-631b-2288-71d0-0d22da21070f",
			"method": "GET",
			"name": "List Services with keyword",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nvar found_synch = false;\nvar found_asynch = false;\nvar found_keyword = true;\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'serviceId', 'skip', 'data[]')) {\n            found_synch = (found_synch || data.data[i].serviceId === postman.getEnvironmentVariable('serviceId'));\n            found_asynch = (found_asynch || data.data[i].serviceId === postman.getEnvironmentVariable('serviceId_asynch'));\n        }\n        found_keyword = found_keyword && JSON.stringify(data.data[i]).match(/integration/i);\n    }\n}\n\ntests[\"Synchronous service found in list\"] = found_synch;\ntests[\"Asynchronous service missing from list\"] = !found_asynch;\ntests[\"All services had specified keyword\"] = found_keyword;",
			"url": "https://pz-gateway.{{domain}}/service?perPage=200&sortBy=resourceMetadata.createdOn&order=desc&keyword=integration",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Delete the (synch) data created in this collection.",
			"descriptionFormat": "html",
			"folder": "f7908e06-7328-8027-9d6d-a04c8bfe0055",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "76226aca-af9d-f43e-5262-f04aad3e4d87",
			"method": "DELETE",
			"name": "Delete Data",
			"pathVariables": {},
			"preRequestScript": null,
			"rawModeData": null,
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"url": "https://pz-gateway.{{domain}}/data/{{dataId}}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Part of a sequence of requests to check that a deleted Service cannot be utilized.\nAttempt to delete the Service again.",
			"descriptionFormat": "html",
			"folder": "77205174-4d78-0434-2e54-a9eae4174623",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "781201eb-8d3a-d7cb-fe6d-2d8cd53bdbfd",
			"method": "DELETE",
			"name": "Deleted Service - Delete Again",
			"pathVariables": {},
			"preRequestScript": null,
			"rawModeData": null,
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 404\"] = responseCode.code === 404;\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Not found message\"] = data.message.match(/no.*found/i);\n}\nif (testLevels(tests, data, 'type')) {\n    tests[\"Error Type\"] = data.type === 'error';\n}",
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId_cancel}}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Part of a sequence of requests to check that a deleted Service cannot be utilized.\nList Services to verify that the deleted Service is not present.",
			"descriptionFormat": "html",
			"folder": "77205174-4d78-0434-2e54-a9eae4174623",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "7c0a2afb-01f8-f75b-abd4-a166b847c615",
			"method": "GET",
			"name": "Deleted Service - List Services",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nvar found_service = false;\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'serviceId', 'skip', 'data[]')) {\n            found_service = (found_service || data.data[i].serviceId === postman.getEnvironmentVariable('serviceId_cancel'));\n        }\n    }\n}\n\ntests[\"Service not found in list\"] = !found_service;",
			"url": "https://pz-gateway.{{domain}}/service?perPage=200&sortBy=resourceMetadata.createdOn&order=desc",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt to create a Job with a no \"serviceId\" parameter.",
			"descriptionFormat": "html",
			"folder": "77205174-4d78-0434-2e54-a9eae4174623",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "7e698f3b-a1bb-7550-037d-ad2983fd62b8",
			"method": "POST",
			"name": "Create Job - No serviceId",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Failed Validation message\"] = data.message.match(/[Vv]alidation/);\n}\n\nif (testLevels(tests, data, 'errors', 'array')) {\n    if (testLevels(tests, data.errors[0], 'code', 'string')) {\n        tests[\"Not Null Message\"] = data.errors[0].code.match(/[Nn]ull/);\n    }\n    if (testLevels(tests, data.errors[0], 'field')) {\n        tests[\"The problem is with 'data.serviceId'\"] = data.errors[0].field === 'data.serviceId';\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/job",
			"rawModeData": "{\r\n  \"data\": {\r\n      \"dataInputs\": {},\r\n      \"dataOutput\": [{ \"mimeType\":\"application/json\", \"type\":\"text\" }]\r\n  },\r\n  \"type\": \"execute-service\"\r\n}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Check that a rerun job (on a now disabled service) was unsuccessful.  Also check that the \"createdOn\" field is present on an unsuccessful job.",
			"descriptionFormat": "html",
			"folder": "77205174-4d78-0434-2e54-a9eae4174623",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "89ba72d6-fd54-abff-3cf4-fd9fac236c10",
			"method": "GET",
			"name": "Rerun/Disable - Status",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": null,
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.status')) {\n    if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Rerun/Disable - Status');\n            wait(1000);\n        }\n        else {\n            tests[\"Job finished in time\"] = false;\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n    else if (data.data.status === 'Error') {\n        postman.setEnvironmentVariable('retry_loop',0);\n        tests[\"Job finished in time\"] = true;\n        if (testLevels(tests, data, 'data.result.message', 'string')) {\n            tests[\"Message states service is offline\"] = data.data.result.message.match(/service/i) && data.data.result.message.match(/offline/i);\n            tests[\"serviceId included in message\"] = data.data.result.message.match(postman.getEnvironmentVariable('serviceId'));\n        }\n    }\n    else {\n        tests[\"status should not be \" + data.data.status] = false;\n        postman.setEnvironmentVariable('retry_loop',0);\n    }\n}\nif (testLevels(tests, data, 'data.createdBy')) {\n    tests[\"Correct createdBy\"] = data.data.createdBy === postman.getEnvironmentVariable('username');\n}\nif (testLevels(tests, data, 'data.createdOn', 'string', '(Bug # 11746) ')) {\n    tests[\"Date Generated\"] = data.data.createdOn.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);\n    tests[\"Created in the last half hour\"] = (Date.now() - Date.parse(data.data.createdOn)) <= 1800000;\n}",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId_disable}}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Check that a rerun job was successful.",
			"descriptionFormat": "html",
			"folder": "bdc131bd-0cb7-965b-ab53-5bd33449c247",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "8ce8a578-51f8-6dd3-d1ce-07cc96d4df0f",
			"method": "GET",
			"name": "Rerun - Status",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": null,
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.status')) {\n    if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Rerun - Status');\n            wait(1000);\n        }\n        else {\n            tests[\"Job finished in time\"] = false;\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n    else if (data.data.status === 'Success') {\n        postman.setEnvironmentVariable('retry_loop',0);\n        tests[\"Job finished in time\"] = true;\n        if (testLevels(tests, data, 'data.result.dataId')) {\n            postman.setEnvironmentVariable(\"dataId_rerun\", data.data.result.dataId);\n        }\n    }\n    else {\n        tests[\"status should not be \" + data.data.status] = false;\n        postman.setEnvironmentVariable('retry_loop',0);\n    }\n}\nif (testLevels(tests, data, 'data.createdBy')) {\n    tests[\"Correct createdBy\"] = data.data.createdBy === postman.getEnvironmentVariable('username');\n}\nif (testLevels(tests, data, 'data.createdOn', 'string', '(Bug # 11746) ')) {\n    tests[\"Date Generated\"] = data.data.createdOn.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);\n    tests[\"Created in the last half hour\"] = (Date.now() - Date.parse(data.data.createdOn)) <= 1800000;\n}",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId_rerun}}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"collectionRequestId": "9333601e-593c-9bb4-bcdf-b437349d4e7b",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Simple Health check to pz-gateway.  Postman Environemnt Variables are initialized in this step.",
			"folder": "d56edcab-e1a2-8302-8254-b12766417afb",
			"headers": "Authorization: \n",
			"helperAttributes": {},
			"id": "9333601e-593c-9bb4-bcdf-b437349d4e7b",
			"isFromCollection": true,
			"method": "GET",
			"name": "Hello, pz-gateway!",
			"pathVariables": {},
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\"< < < < < < < < < < < < < START-UP > > > > > > > > > > > \");\nconsole.log(\"   These tests create required environment variables.    \");\nconsole.log(\"    Any failures here will cause other tests to fail.    \");\nconsole.log(\"            DO NOT PUSH if these tests fail.             \");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"tests": "tests[\"Says Hello!\"] = responseBody.has('Hello');\npostman.setEnvironmentVariable('retry_loop',0);\npostman.setEnvironmentVariable('max_retries', 9);\npostman.setEnvironmentVariable('serviceId','');\npostman.setEnvironmentVariable('jobId','');\npostman.setEnvironmentVariable('dataId','');\npostman.setEnvironmentVariable('New Name', 'This is a N3W N@M3!');\npostman.setEnvironmentVariable('text description', 'Service created for integration testing.');\npostman.setEnvironmentVariable('recheck', 'false');",
			"time": 1490812065740,
			"url": "https://pz-gateway.{{domain}}/"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Part of a sequence of requests to check that a deleted Service cannot be utilized.\nAttempt to update the metadata of a deleted service.",
			"folder": "77205174-4d78-0434-2e54-a9eae4174623",
			"headers": "Content-Type: application/json\nsize: 30\nfrom: 0\nkey: stamp\norder: true\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "94549de0-800f-d5ca-41fa-88fd747a79b1",
			"method": "PUT",
			"name": "Deleted Service - Update",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 404 (Bug # 9485)\"] = responseCode.code === 404;\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Not found message\"] = data.message.match(/no.*found/i);\n}\nif (testLevels(tests, data, 'type')) {\n    tests[\"Error Type\"] = data.type === 'error';\n}",
			"time": 1485372297543,
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId_cancel}}",
			"rawModeData": "{\n    \"resourceMetadata\": {\n        \"name\": \"bar\"\n    }\n}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Suite of requests to test that if an asynch service is deleted before one of its jobs is complete, the job will not be stuck in a certain status.\n\nRepeatedly Check Job Status.",
			"folder": "77205174-4d78-0434-2e54-a9eae4174623",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "97cc7ba0-6483-fbcd-1ac0-8355deee5dd7",
			"method": "GET",
			"name": "Delete Asynch Service - Check Job",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.status')) {\n    if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Delete Asynch Service - Check Job');\n            wait(20000);\n        }\n        else {\n            tests[\"Job errored in time\"] = false;\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n    else if (data.data.status === 'Error') {\n        postman.setEnvironmentVariable('retry_loop',0);\n        tests[\"Job errored in time\"] = true;\n    }\n    else {\n        tests[\"status should not be \" + data.data.status] = false;\n        postman.setEnvironmentVariable('retry_loop',0);\n    }\n}",
			"time": 1495567170558,
			"url": "https://pz-gateway.{{domain}}/job/{{jobId_asynch_del}}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Attempt to list Services, specifying a string for a page number.",
			"descriptionFormat": "html",
			"folder": "77205174-4d78-0434-2e54-a9eae4174623",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "98ff3c22-87a4-f892-71da-7102d7cefe60",
			"method": "GET",
			"name": "List Services - Bad Page",
			"pathVariables": {},
			"preRequestScript": null,
			"rawModeData": null,
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 400\"] = responseCode.code === 400;\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Cannot have a string\"] = data.message.match(/string/i);\n    tests[\"Should be integer\"] = data.message.match(/integer/i);\n}",
			"url": "https://pz-gateway.{{domain}}/service?page=foo"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "This request belongs to a sequence that verifies that a job cannot be created from a softDeleted Serivce.\n\"softDelete\" the Service.",
			"folder": "bdc131bd-0cb7-965b-ab53-5bd33449c247",
			"headerData": [
				{
					"description": "",
					"enabled": true,
					"key": "Authorization",
					"value": ""
				}
			],
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "9f40825b-5d25-6bd8-f467-f3ce5b87ad43",
			"method": "DELETE",
			"name": "Disable - Soft Delete Service",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "softDelete",
					"value": "true"
				}
			],
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}\nwait(10000); // 10 seconds should be more than enough time.",
			"time": 1502920100810,
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}?softDelete=true"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Check the details of the job status of a completed synchronous job.",
			"folder": "77205174-4d78-0434-2e54-a9eae4174623",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "9f8a4ae8-686a-71e4-0ee3-31568914960a",
			"method": "GET",
			"name": "Check Standard Job Status Details",
			"pathVariables": {},
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\"< < < < < < < < < < < < LOW > > > > > > > > > > > \");\nconsole.log(\"  These tests represent less-important features.  \");\nconsole.log(\"More attention is given to options and edge cases.\");\nconsole.log(\"You may push if these tests fail, but be careful. \");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.createdBy')) {\n    tests[\"Correct createdBy\"] = data.data.createdBy === postman.getEnvironmentVariable('username');\n}\nif (testLevels(tests, data, 'data.executedServiceId')) {\n    tests[\"Originating serviceId included in metadata\"] = data.data.executedServiceId === postman.getEnvironmentVariable('serviceId');\n}\nif (testLevels(tests, data, 'data.createdOn', 'string', '(Bug # 11746) ')) {\n    tests[\"Date Generated\"] = data.data.createdOn.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);\n    tests[\"Created in the last half hour\"] = (Date.now() - Date.parse(data.data.createdOn)) <= 1800000;\n}",
			"time": 1490099076055,
			"url": "https://pz-gateway.{{domain}}/job/{{jobId_standard}}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt to register a Service with a no \"contractUrl\" parameter.",
			"descriptionFormat": "html",
			"folder": "77205174-4d78-0434-2e54-a9eae4174623",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "a5a38e73-5d76-e1c4-8f1c-4dceebd25cce",
			"method": "POST",
			"name": "Register Service - No contractUrl",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Failed Validation message\"] = data.message.match(/[Vv]alidation/);\n}\n\nif (testLevels(tests, data, 'errors', 'array')) {\n    if (testLevels(tests, data.errors[0], 'code', 'string')) {\n        tests[\"Not Null Message\"] = data.errors[0].code.match(/[Nn]ull/);\n    }\n    if (testLevels(tests, data.errors[0], 'field')) {\n        tests[\"The problem is with 'contractUrl'\"] = data.errors[0].field === 'contractUrl';\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/service",
			"rawModeData": "{\n    \"url\": \"https://pzsvc-hello.{{domain}}/\",\n    \"method\": \"GET\",\n    \"isAsynchronous\" : \"false\",\n    \"resourceMetadata\": {\n        \"name\": \"pzsvc-hello service\",\n        \"description\": \"{{text description}}\",\n        \"classType\": {\n            \"classification\": \"UNCLASSIFIED\"\n         }\n    }\n}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt to rerun a Job whose Service has been disabled.",
			"descriptionFormat": "html",
			"folder": "77205174-4d78-0434-2e54-a9eae4174623",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "a7b2cd63-f52b-4698-72e3-7e2422e8f41b",
			"method": "POST",
			"name": "Rerun/Disable - Create Job",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.jobId', 'string')) {\n    tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n    tests[\"New GUID created\"] = data.data.jobId != postman.getEnvironmentVariable('jobId');\n    postman.setEnvironmentVariable(\"jobId_disable\",data.data.jobId);\n}",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId_standard}}",
			"rawModeData": "{\r\n  \"data\": {\r\n      \"dataInputs\": {},\r\n      \"dataOutput\": [{ \"mimeType\":\"application/json\", \"type\":\"text\" }],\r\n      \"serviceId\": \"{{serviceId}}\"\r\n  },\r\n  \"type\": \"execute-service\"\r\n}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Create a Job from a re-enabled Service.",
			"descriptionFormat": "html",
			"folder": "77205174-4d78-0434-2e54-a9eae4174623",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "a7e5d5e6-9b8d-fd38-4b13-9041550c828c",
			"method": "POST",
			"name": "Reenable - Create Job",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.jobId', 'string')) {\n    tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n    postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n}",
			"url": "https://pz-gateway.{{domain}}/job",
			"rawModeData": "{\r\n  \"data\": {\r\n      \"dataInputs\": {},\r\n      \"dataOutput\": [{ \"mimeType\":\"application/json\", \"type\":\"text\" }],\r\n      \"serviceId\": \"{{serviceId}}\"\r\n  },\r\n  \"type\": \"execute-service\"\r\n}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Suite of requests to test that if an asynch service is deleted before one of its jobs is complete, the job will not be stuck in a certain status.\n\nRegister the asynch job.",
			"folder": "77205174-4d78-0434-2e54-a9eae4174623",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "b1ac73ca-70cf-f5ee-f3d3-830148365167",
			"method": "POST",
			"name": "Delete Asynch Service - Create Job",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.jobId', 'string')) {\n    tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n    postman.setEnvironmentVariable(\"jobId_asynch_del\",data.data.jobId);\n}",
			"time": 1495561895981,
			"url": "https://pz-gateway.{{domain}}/job",
			"rawModeData": "{\n    \"type\": \"execute-service\",\n    \"data\": {\n        \"serviceId\": \"{{serviceId_asynch_del}}\",\n        \"dataInputs\" : {      \n            \"test\" : {          \n                \"content\" : \"{\\n\\\"source\\\": {\\n\\\"domain\\\": \\\"s3.amazonaws.com\\\",\\n\\\"bucketName\\\": \\\"pz-svcs-prevgen\\\",\\n\\\"fileName\\\": \\\"NASA-GDEM-10km-colorized.tif\\\"\\n},\\n\\\"function\\\": \\\"crop\\\",\\n\\\"bounds\\\": {\\n\\\"minx\\\": -140.00,\\n\\\"miny\\\": 10.00,\\n\\\"maxx\\\": -60.00,\\n\\\"maxy\\\": 70.00\\n}\\n}\",    \n                \"type\" : \"body\",  \n                \"mimeType\" : \"application/json\"         \n           }\n        }, \n        \"dataOutput\": [{\n            \"mimeType\" : \"image/tiff\",          \n            \"type\" : \"raster\"\n        }]\n    }\n}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": null,
			"dataMode": "params",
			"description": "Validate the details of the Service metadata.",
			"descriptionFormat": "html",
			"folder": "77205174-4d78-0434-2e54-a9eae4174623",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "b1d531da-e9a7-7995-ada5-10eb4ebc87f3",
			"method": "GET",
			"name": "Get Service Info Details",
			"pathVariables": {},
			"preRequestScript": null,
			"rawModeData": null,
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'data.resourceMetadata.description')) {\n    tests[\"Description is correct\"] = data.data.resourceMetadata.description === postman.getEnvironmentVariable('text description');\n}\nif (testLevels(tests, data, 'data.resourceMetadata.createdBy')) {\n    tests[\"Created by 'citester'\"] = data.data.resourceMetadata.createdBy === postman.getEnvironmentVariable('username');\n}\nif (testLevels(tests, data, 'data.resourceMetadata.createdOn')) {\n    tests[\"CreatedOn Field Exists\"] = data.data.resourceMetadata.createdOn !== null && data.data.resourceMetadata.createdOn !== '';\n}",
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Check the status of a cancelled Job to verify that it was cancelled.",
			"descriptionFormat": "html",
			"folder": "77205174-4d78-0434-2e54-a9eae4174623",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "b69ec83b-69a7-eb5e-699e-65e6a052c6db",
			"method": "GET",
			"name": "Cancelling Job - Validating",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": null,
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'data.status')) {\n    if (data.data.status === 'Cancelling' || data.data.status === 'Cancelled') {\n        if (postman.getEnvironmentVariable('recheck') === 'true') {\n            tests[\"The job stayed cancelled\"] = true;\n        }\n        else {\n            postman.setNextRequest('Cancelling Job - Validating');\n            postman.setEnvironmentVariable('recheck', 'true');\n            wait(20000);\n        }\n    }\n    else {\n        tests[\"Status should not be \" + data.data.status] = false;\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Register the asynchronous Service (Preview Generator) to be used throughout this collection.",
			"folder": "d56edcab-e1a2-8302-8254-b12766417afb",
			"headers": "Content-Type: application/json\nsize: 30\nfrom: 0\nkey: stamp\norder: true\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "c52d2ba3-3eb0-536b-a91e-87438c9f1910",
			"method": "POST",
			"name": "Register Asynch Service",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.serviceId', 'string')) {\n    postman.setEnvironmentVariable(\"serviceId_asynch\",data.data.serviceId);\n    tests[\"serviceId GUID created\"] = data.data.serviceId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n}",
			"time": 1488465216554,
			"url": "https://pz-gateway.{{domain}}/service",
			"rawModeData": "{\n  \"isAsynchronous\":true,\n  \"url\" : \"https://pz-svcs-prevgen.{{domain}}/cropasync\",\n  \"timeout\" : \"180000\",\n  \"method\" : \"POST\",\n  \"contractUrl\" : \"https://pz-svcs-prevgen.{{domain}}/cropasync\",\n  \"resourceMetadata\" : {\n    \"name\" : \"pz-svcs-prevgen crop raster test\",\n    \"description\" : \"pz-svcs-prevgen is an awesome sample crop image external service.\",\n    \"classType\": {\n        \"classification\": \"UNCLASSIFIED\"\n     }\n  }\n}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Suite of requests to test that if an asynch service is deleted before one of its jobs is complete, the job will not be stuck in a certain status.\n\nDelete the service.",
			"folder": "77205174-4d78-0434-2e54-a9eae4174623",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "c617aa5e-5cdb-ee14-65e7-046e4812b44e",
			"method": "DELETE",
			"name": "Delete Asynch Service - Delete Service",
			"pathVariables": {},
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\" < < < < < < < < < < < < TEAR-DOWN > > > > > > > > > > > \");\nconsole.log(\"These tests destroy any items created by previous tests. \");\nconsole.log(\" These tests represent important features, like DELETEs. \");\nconsole.log(\"            DO NOT PUSH if these tests fail.             \");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"time": 1495561892747,
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId_asynch_del}}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": null,
			"dataMode": "params",
			"description": "Verify that the \"resourceMetadata.name\" field of the service was updated.",
			"descriptionFormat": "html",
			"folder": "51708a3c-5f51-c0aa-0a3d-33d73a6ab454",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "c773461b-5e85-3686-4761-8d5af5897bd2",
			"method": "GET",
			"name": "Validate Update",
			"pathVariables": {},
			"preRequestScript": null,
			"rawModeData": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.resourceMetadata.name')) {\n    tests[\"'Name' Field Updated\"] = data.data.resourceMetadata.name === postman.getEnvironmentVariable('New Name');\n}",
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "List services, filtered by userName, verifying both the the synchronous and asynchronous services are present, and that all results were created by the specified user.",
			"descriptionFormat": "html",
			"folder": "77205174-4d78-0434-2e54-a9eae4174623",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "c84a5cf0-b44c-7aea-d56c-a4a98e54b7dd",
			"method": "GET",
			"name": "List Services with userName",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nvar found_synch = false;\nvar found_asynch = false;\nvar found_createdBy = true;\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'serviceId', 'skip', 'data[]')) {\n            found_synch = (found_synch || data.data[i].serviceId === postman.getEnvironmentVariable('serviceId'));\n            found_asynch = (found_asynch || data.data[i].serviceId === postman.getEnvironmentVariable('serviceId_asynch'));\n        }\n        if (testLevels(tests, data.data[i], 'resourceMetadata.createdBy', 'skip', 'data[]')) {\n            found_createdBy = (found_createdBy && data.data[i].resourceMetadata.createdBy === postman.getEnvironmentVariable('username'));\n        }\n    }\n}\n\ntests[\"Synchronous service found in list\"] = found_synch;\ntests[\"Asynchronous service found in list\"] = found_asynch;\ntests[\"All services had specified createdBy\"] = found_createdBy;",
			"url": "https://pz-gateway.{{domain}}/service?perPage=200&sortBy=resourceMetadata.createdOn&order=desc&createdBy={{username}}",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt to register a Service with a no \"resourceMetadata.classType\" parameter.",
			"descriptionFormat": "html",
			"folder": "77205174-4d78-0434-2e54-a9eae4174623",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "cf0fe603-796d-bd1f-fa68-dcc3207c43a6",
			"method": "POST",
			"name": "Register Service - No resourceMetadata.classType",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Failed Validation message\"] = data.message.match(/[Vv]alidation/);\n}\n\nif (testLevels(tests, data, 'errors', 'array')) {\n    if (testLevels(tests, data.errors[0], 'code', 'string')) {\n        tests[\"Not Null Message\"] = data.errors[0].code.match(/[Nn]ull/);\n    }\n    if (testLevels(tests, data.errors[0], 'field')) {\n        tests[\"The problem is with 'resourceMetadata.classType'\"] = data.errors[0].field === 'resourceMetadata.classType';\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/service",
			"rawModeData": "{\n    \"url\": \"https://pzsvc-hello.{{domain}}/\",\n    \"contractUrl\": \"http://helloContract\",\n    \"method\" : \"GET\",\n    \"isAsynchronous\" : \"false\",\n    \"resourceMetadata\": {\n        \"name\": \"pzsvc-hello service\",\n        \"description\": \"{{text description}}\"\n    }\n}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "List services, verifying both the synchronous and asynchronous services are present.",
			"folder": "bdc131bd-0cb7-965b-ab53-5bd33449c247",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "d8bebf66-1119-749f-4087-0a9b28f7e079",
			"method": "GET",
			"name": "List Services",
			"pathVariables": {},
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\"< < < < < < < < < < < IMPORTANT > > > > > > > > > > >\");\nconsole.log(\"      These tests represent important features.      \");\nconsole.log(\"Use extreme caution when pushing if these tests fail.\");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nvar found_synch = false;\nvar found_asynch = false;\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'serviceId', 'skip', 'data[]')) {\n            found_synch = (found_synch || data.data[i].serviceId === postman.getEnvironmentVariable('serviceId'));\n            found_asynch = (found_asynch || data.data[i].serviceId === postman.getEnvironmentVariable('serviceId_asynch'));\n        }\n    }\n}\n\ntests[\"Synchronous service found in list\"] = found_synch;\ntests[\"Asynchronous service found in list\"] = found_asynch;",
			"time": 1489431200893,
			"url": "https://pz-gateway.{{domain}}/service",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Attempt to rerun a non-existant Job.",
			"descriptionFormat": "html",
			"folder": "77205174-4d78-0434-2e54-a9eae4174623",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "e834f0f8-c36c-3201-fd12-d32a53c2d148",
			"method": "POST",
			"name": "Job Not Found - POST",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": null,
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 404\"] = responseCode.code === 404;\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Not Found Message\"] = data.message.match(/no.*found/i);\n}\nif (testLevels(tests, data, 'type')) {\n    tests[\"Error Type (Bug #9332)\"] = data.type === 'error';\n}",
			"url": "https://pz-gateway.{{domain}}/job/foo"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Verify that a Job created from a re-enabled Service was successful.",
			"descriptionFormat": "html",
			"folder": "77205174-4d78-0434-2e54-a9eae4174623",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "ed21ad5d-7a94-0fca-e9a7-8407eadadb2c",
			"method": "GET",
			"name": "Reenable - Check Job Status",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": null,
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.status')) {\n    if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Reenable - Check Job Status');\n            wait(1000);\n        }\n        else {\n            tests[\"Job finished in time\"] = false;\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n    else if (data.data.status === 'Success') {\n        postman.setEnvironmentVariable('retry_loop',0);\n        tests[\"Job finished in time\"] = true;\n        if (testLevels(tests, data, 'data.result.dataId')) {\n            postman.setEnvironmentVariable(\"dataId\", data.data.result.dataId);\n        }\n    }\n    else {\n        tests[\"status should not be \" + data.data.status] = false;\n        postman.setEnvironmentVariable('retry_loop',0);\n    }\n}\nif (testLevels(tests, data, 'data.createdBy')) {\n    tests[\"Correct createdBy\"] = data.data.createdBy === postman.getEnvironmentVariable('username');\n}",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Part of a sequence of requests to check that a deleted Service cannot be utilized.\nAttempt to get the metadata of the deleted Service.",
			"descriptionFormat": "html",
			"folder": "77205174-4d78-0434-2e54-a9eae4174623",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "f06dd39a-63e5-1f0c-6e81-1cf2f4a48e4c",
			"method": "GET",
			"name": "Deleted Service - GET",
			"pathVariables": {},
			"preRequestScript": null,
			"rawModeData": null,
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 404\"] = responseCode.code === 404;\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Not found message\"] = data.message.match(/no.*found/i);\n}",
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId_cancel}}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Try to cancel a completed job.",
			"folder": "77205174-4d78-0434-2e54-a9eae4174623",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "f1ca1948-fba2-fc47-37fb-b502e75dd78b",
			"method": "DELETE",
			"name": "Cancel Completed Job",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 400 (Bug #9332)\"] = responseCode.code === 400;\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"'No Longer Running' message\"] = data.message.match(/no.*run/i);\n}\nif (testLevels(tests, data, 'type')) {\n    tests[\"Error Type (Bug #9332)\"] = data.type === 'error';\n}",
			"time": 1488462605945,
			"url": "https://pz-gateway.{{domain}}/job/{{jobId_rerun}}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Check the metadata of the dataId that came from a completed asychronous execute-service job.",
			"descriptionFormat": "html",
			"folder": "51708a3c-5f51-c0aa-0a3d-33d73a6ab454",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "f247d54a-bedd-816f-7ca8-721a251e27de",
			"method": "GET",
			"name": "Check Resulting Asynch dataId",
			"pathVariables": {},
			"preRequestScript": null,
			"rawModeData": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.dataType.location.fileName', 'string')) {\n    tests[\"Correct Source File\"] = data.data.dataType.location.fileName.match(/NASA-GDEM-10km-colorized.tif/i);\n}\nif (testLevels(tests, data, 'data.metadata.createdBy')) {\n    tests[\"Correct createdBy (Bug #8978)\"] = data.data.metadata.createdBy === postman.getEnvironmentVariable('username');\n}",
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_asynch}}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Create a long-running Job for the purpose of cancelling it.",
			"descriptionFormat": "html",
			"folder": "77205174-4d78-0434-2e54-a9eae4174623",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "f3ed3487-0058-2e5c-07d4-abf6b3a7923c",
			"method": "POST",
			"name": "Cancelling Job - Create Job",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.jobId', 'string')) {\n    tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n    postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n}",
			"url": "https://pz-gateway.{{domain}}/job",
			"rawModeData": "{\r\n  \"data\": {\r\n      \"dataInputs\": {},\r\n      \"dataOutput\": [{ \"mimeType\":\"application/json\", \"type\":\"text\" }],\r\n      \"serviceId\": \"{{serviceId_asynch}}\"\r\n  },\r\n  \"type\": \"execute-service\"\r\n}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt to register a Service with a no \"resourceMetadata\" parameter.",
			"descriptionFormat": null,
			"folder": "77205174-4d78-0434-2e54-a9eae4174623",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "f5b67f48-2dcb-b8f9-3c4f-9b87e911c3da",
			"method": "POST",
			"name": "Register Service - No resourceMetadata",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Failed Validation message\"] = data.message.match(/[Vv]alidation/);\n}\n\nif (testLevels(tests, data, 'errors', 'array')) {\n    if (testLevels(tests, data.errors[0], 'code', 'string')) {\n        tests[\"Not Null Message\"] = data.errors[0].code.match(/[Nn]ull/);\n    }\n    if (testLevels(tests, data.errors[0], 'field')) {\n        tests[\"The problem is with 'resourceMetadata'\"] = data.errors[0].field === 'resourceMetadata';\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/service",
			"rawModeData": "{\n    \"url\": \"https://pzsvc-hello.{{domain}}/\",\n    \"contractUrl\": \"http://helloContract\",\n    \"method\" : \"GET\",\n    \"isAsynchronous\" : \"false\"\n}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Attempt to get the status of a non-existant Job.",
			"folder": "77205174-4d78-0434-2e54-a9eae4174623",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "f6eda7c9-4f59-09f3-7805-b69f1e411e67",
			"method": "GET",
			"name": "Job Not Found - GET",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 404\"] = responseCode.code === 404;\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Not Found Message\"] = data.message.match(/no.*found/i);\n}\nif (testLevels(tests, data, 'type')) {\n    tests[\"Error Type (Bug #9332)\"] = data.type === 'error';\n}",
			"time": 1490099071108,
			"url": "https://pz-gateway.{{domain}}/job/foo"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Check the metadata of the dataId that came from a completed sychronous execute-service job that was rerun.",
			"descriptionFormat": "html",
			"folder": "bdc131bd-0cb7-965b-ab53-5bd33449c247",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "fcab329f-ad50-0286-7287-0fcad98b71cd",
			"method": "GET",
			"name": "Rerun - Check Data",
			"pathVariables": {},
			"preRequestScript": null,
			"rawModeData": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.dataType.content', 'string')) {\n    tests[\"Hello Service was executed\"] = data.data.dataType.content.match(/h(ello|i)/i);\n    tests[\"Rerunning Job yields the same data\"] = data.data.dataType.content === postman.getEnvironmentVariable('Repeat Job Check');\n}\nif (testLevels(tests, data, 'data.metadata.createdBy')) {\n    tests[\"Correct createdBy (Bug #8978)\"] = data.data.metadata.createdBy === postman.getEnvironmentVariable('username');\n}",
			"url": "https://pz-gateway.{{domain}}/data/{{dataId}}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Delete the asynchronous Service used throughout this collection.",
			"descriptionFormat": "html",
			"folder": "f7908e06-7328-8027-9d6d-a04c8bfe0055",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "fd2883ea-d726-c3e4-8c9a-8a9f99b24f9d",
			"method": "DELETE",
			"name": "Delete Asynch Service",
			"pathVariables": {},
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\" < < < < < < < < < < < < TEAR-DOWN > > > > > > > > > > > \");\nconsole.log(\"These tests destroy any items created by previous tests. \");\nconsole.log(\" These tests represent important features, like DELETEs. \");\nconsole.log(\"            DO NOT PUSH if these tests fail.             \");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"rawModeData": null,
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId_asynch}}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "List services, filtered by the keyword \"integration\" and by username, verifying that the synchronous service is present, and that all results match both filters.",
			"folder": "77205174-4d78-0434-2e54-a9eae4174623",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "fd9d2b67-b2f9-93e2-9652-d0e31be7e659",
			"method": "GET",
			"name": "List Services with userName and keyword",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nvar found_synch = false;\nvar found_asynch = false;\nvar found_createdBy = true;\nvar found_keyword = true;\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'serviceId', 'skip', 'data[]')) {\n            found_synch = (found_synch || data.data[i].serviceId === postman.getEnvironmentVariable('serviceId'));\n            found_asynch = (found_asynch || data.data[i].serviceId === postman.getEnvironmentVariable('serviceId_asynch'));\n        }\n        if (testLevels(tests, data.data[i], 'resourceMetadata.createdBy', 'skip', 'data[]')) {\n            found_createdBy = (found_createdBy && data.data[i].resourceMetadata.createdBy === postman.getEnvironmentVariable('username'));\n        }\n        found_keyword = found_keyword && JSON.stringify(data.data[i]).match(/integration/i);\n    }\n}\n\ntests[\"Synchronous service found in list\"] = found_synch;\ntests[\"Asynchronous service missing from list\"] = !found_asynch;\ntests[\"All services had specified createdBy\"] = found_createdBy;\ntests[\"All services had specified keyword\"] = found_keyword;",
			"time": 1489412560987,
			"url": "https://pz-gateway.{{domain}}/service?perPage=200&sortBy=resourceMetadata.createdOn&order=desc&createdBy={{username}}&keyword=integration",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Check the details of the job status of a completed asynch job.",
			"descriptionFormat": "html",
			"folder": "77205174-4d78-0434-2e54-a9eae4174623",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "febb7eb9-ccdb-a834-ae53-c37862fbfd87",
			"method": "GET",
			"name": "Check Asynch Job Status Details",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.createdBy')) {\n    tests[\"Correct createdBy\"] = data.data.createdBy === postman.getEnvironmentVariable('username');\n}\nif (testLevels(tests, data, 'data.executedServiceId')) {\n    tests[\"Originating serviceId included in metadata\"] = data.data.executedServiceId === postman.getEnvironmentVariable('serviceId_asynch');\n}\nif (testLevels(tests, data, 'data.createdOn', 'string', '(Bug # 11746) ')) {\n    tests[\"Date Generated\"] = data.data.createdOn.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);\n    tests[\"Created in the last half hour\"] = (Date.now() - Date.parse(data.data.createdOn)) <= 1800000;\n}",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId_asynch}}"
		},
		{
			"collectionId": "cd22abe9-ce24-1562-5ecc-8a24224f8c2c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Create a Job using the asynchronous Service, Preview Generator.",
			"descriptionFormat": "html",
			"folder": "51708a3c-5f51-c0aa-0a3d-33d73a6ab454",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "fef41362-f65b-83c1-cde6-bcd71870cc49",
			"method": "POST",
			"name": "Create Asynch Job",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.jobId', 'string')) {\n    tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n    postman.setEnvironmentVariable(\"jobId_asynch\",data.data.jobId);\n}",
			"url": "https://pz-gateway.{{domain}}/job",
			"rawModeData": "{\n    \"type\": \"execute-service\",\n    \"data\": {\n        \"serviceId\": \"{{serviceId_asynch}}\",\n        \"dataInputs\" : {      \n            \"test\" : {          \n                \"content\" : \"{\\n\\\"source\\\": {\\n\\\"domain\\\": \\\"s3.amazonaws.com\\\",\\n\\\"bucketName\\\": \\\"pz-svcs-prevgen\\\",\\n\\\"fileName\\\": \\\"NASA-GDEM-10km-colorized.tif\\\"\\n},\\n\\\"function\\\": \\\"crop\\\",\\n\\\"bounds\\\": {\\n\\\"minx\\\": -140.00,\\n\\\"miny\\\": 10.00,\\n\\\"maxx\\\": -60.00,\\n\\\"maxy\\\": 70.00\\n}\\n}\",    \n                \"type\" : \"body\",  \n                \"mimeType\" : \"application/json\"         \n           }\n        }, \n        \"dataOutput\": [{\n            \"mimeType\" : \"image/tiff\",          \n            \"type\" : \"raster\"\n        }]\n    }\n}"
		}
	]
}