{
	"id": "4b065ce9-e3b4-400f-8257-66663884a543",
	"name": "TMaaS",
	"description": "",
	"order": [],
	"folders": [
		{
			"owner": "699425",
			"lastUpdatedBy": "699425",
			"lastRevision": 913590171,
			"id": "7190aa14-a5cf-392c-d57d-63535a62e6b3",
			"name": "1_Startup",
			"description": "",
			"order": [
				"76acb163-0850-ebe7-394a-08864170e975",
				"628691b3-aa86-e405-3b6d-b2bb3772dcd3",
				"ce3780de-dc73-a99c-05d1-f6c59176c319"
			]
		},
		{
			"owner": "699425",
			"lastUpdatedBy": "699425",
			"lastRevision": 933924486,
			"id": "1898293e-c24f-33a4-d9f8-62e2c268737a",
			"name": "2_Critical",
			"description": "",
			"order": [
				"208ff5ff-63e4-f21a-2fab-1f0639677d61",
				"9fe17c4a-b269-2807-6970-ba57f2267803",
				"b0c76a49-d08c-e097-bb4c-5081f3823058",
				"fe75a6b8-1489-6e3e-c8ff-d4f2998ce0fe",
				"9587687d-8feb-f887-4217-3b3314060353",
				"dd119cb2-a84b-0aab-6755-33ab44a61c26",
				"f18c9462-3443-9e4e-38f8-748606252615",
				"eda80c9d-4626-7de7-6eba-457c3e46c98e",
				"f7c4c6be-fbd9-b6de-e448-1e6a0a6e3932"
			]
		},
		{
			"owner": "699425",
			"lastUpdatedBy": "699425",
			"lastRevision": 933924494,
			"id": "6d70c66f-7d7b-ab43-5a8a-31dc326f6a5e",
			"name": "3_Normal",
			"description": "",
			"order": [
				"21982a66-aefe-36e6-4cb2-3b01c4d4544a",
				"dbded542-ae96-08ec-f37c-ef81c23a2b72",
				"2864cab5-d51f-d0d6-39bf-1d324ee8c7fa",
				"20d3e4fe-5df7-f47a-18f6-d5249c12cc0d",
				"a16194e6-3bfb-8309-8cf0-72db7800bd3a",
				"f17996e3-75ba-3a4c-25d9-934173cf1807",
				"a4e5453c-2980-c3af-7083-3ea789df670c",
				"0bfd03f6-cec8-ce62-1c08-27586f027b14",
				"f172fb5b-502e-9eee-8a87-0da431ea0b86",
				"c6c215db-bcf4-a3b3-15a6-40fef7bd6249",
				"a5f7f150-4250-47da-6777-ec2aab1af886",
				"12c9e6fa-0216-ce25-75da-c1d1c164eea9",
				"fd047dc1-4222-01d5-c07d-66dae111f6df",
				"62983495-8e28-1ea5-e217-fe08f4ab6b31",
				"b2d99027-a54c-10c2-2db9-a93b98e70c8e",
				"ca0b170e-fb66-d312-aedb-72d77ffb79b3",
				"43e2539a-1f73-97f4-6346-4e8e21ed5018",
				"321e979d-4254-f3a3-070b-d13e271efa0b",
				"6838fdbf-3de2-1e93-f32f-da8d4555907e",
				"b28a43e0-9a33-d93d-3c1d-8570112cf373",
				"27c60f96-8611-cb2f-3eb4-02c7126f6ca6",
				"2f091df5-dbd8-05dc-6b22-61aba0be860f",
				"0db758c1-a4b7-b46f-4ece-7943c0fcdc06",
				"cc4970e1-6671-3af3-2ee3-50c0989240f4",
				"05a2d673-d3c0-ff2e-fc84-dcb6f6e88245",
				"c5adf136-f787-19a5-2109-74d4fd1cd71a",
				"778daeb1-fd3c-aaff-5214-101baa6c0643",
				"9e7dc487-67bf-858c-97ea-740b4ab6b660",
				"3d8333d5-be0d-41fe-6dd7-b3acb875ab5e",
				"51fe0982-fb5a-85d3-c3b3-5164718b54df",
				"24459f5c-65e6-0210-182c-118b34bf2669",
				"1500f37a-a597-6244-d93b-21319d086953",
				"1735f7ef-ff0e-9402-1bf3-dc57851779c9",
				"370db2bf-a9ee-23cc-f34d-3298cdc5356a",
				"ce947b98-62e1-803d-188a-d85d6a48bb4c",
				"5b0d1320-bb59-3cfb-aaa5-a08dc6a9061c",
				"0fbc17bf-ce14-b28f-25ee-855321ee01fa"
			]
		},
		{
			"owner": "699425",
			"lastUpdatedBy": "699425",
			"lastRevision": 925361391,
			"id": "ac88632b-2291-f023-dcbf-046ae5fd75a1",
			"name": "4_Low",
			"description": "",
			"order": [
				"e48c1a97-65ad-c198-8885-52e9e8da9eec",
				"dd664a3e-ad3e-3b59-d18c-a78447861057",
				"1c07d305-4c0a-342e-14f2-78a0da82ae11",
				"61a63c55-9107-6b6b-f429-51495eb9a445",
				"4d2a5c1c-eb87-e01e-727a-f890fe0bc4a9",
				"011227fe-5fde-eca2-65d7-af7b6e375024"
			]
		},
		{
			"owner": "699425",
			"lastUpdatedBy": "699425",
			"lastRevision": 913599070,
			"id": "02f09274-8d7a-8c83-2651-224576af8346",
			"name": "5_Teardown",
			"description": "",
			"order": [
				"40dcae2d-ee0a-bdd8-364e-b6d81834cd3d",
				"77ee11a5-77e5-0a2d-fd9c-967ac11f1f64",
				"e7118196-16c0-ea4e-aa9f-a6dcc1b0d36f",
				"c1ee1e11-53b5-adc7-8914-e7b8472a3f49",
				"75edc338-c2ff-eea6-f338-df6948d74291"
			]
		}
	],
	"timestamp": 0,
	"owner": "699425",
	"public": false,
	"requests": [
		{
			"folder": "ac88632b-2291-f023-dcbf-046ae5fd75a1",
			"id": "011227fe-5fde-eca2-65d7-af7b6e375024",
			"name": "Pull Job - Bad Auth",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "",
			"descriptionFormat": null,
			"description": "Verify that the pull job request cannot get through the gateway with bad authorization.",
			"headers": "Content-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}/task",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 401\"] = responseCode.code === 401;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'origin')) {\n    tests[\"Error came from gateway\"] = data.origin === \"Gateway\";\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "garbage",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543"
		},
		{
			"folder": "6d70c66f-7d7b-ab43-5a8a-31dc326f6a5e",
			"id": "05a2d673-d3c0-ff2e-fc84-dcb6f6e88245",
			"name": "Deletion - Job Count",
			"dataMode": "params",
			"data": null,
			"rawModeData": null,
			"descriptionFormat": null,
			"description": "This series of tests validates the behavior of the TMaaS when the service is deleted (or softDeleted).\nAttempt to get the job count from a deleted service.",
			"headers": "",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId_delete}}/task/metadata",
			"preRequestScript": "",
			"tests": "tests[\"Status code is 404 (Bug #13460\"] = responseCode.code === 404;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Not Found message\"] = data.message.match(/no.*found/i);\n    tests[\"Proper formatting (No escaped characters) (Bug #14379)\"] = !data.message.match(/\\\"/);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543"
		},
		{
			"folder": "6d70c66f-7d7b-ab43-5a8a-31dc326f6a5e",
			"id": "0bfd03f6-cec8-ce62-1c08-27586f027b14",
			"name": "Second User - Authorized Pull",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "",
			"descriptionFormat": null,
			"description": "Have the second user get a job from the service's queue, now that the user is added to the \"taskAdministrators\" list.",
			"headers": "Content-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}/task",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.jobId')) {\n    tests[\"Correct jobId pulled from queue\"] = data.data.jobId === postman.getEnvironmentVariable('jobId');\n}\nif (testLevels(tests, data, 'data.serviceData.data.serviceId')) {\n    tests[\"Correct serviceId given in response\"] = data.data.serviceData.data.serviceId === postman.getEnvironmentVariable('serviceId');\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{Other Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543"
		},
		{
			"folder": "6d70c66f-7d7b-ab43-5a8a-31dc326f6a5e",
			"id": "0db758c1-a4b7-b46f-4ece-7943c0fcdc06",
			"name": "Deletion - Pull Job",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "",
			"descriptionFormat": null,
			"description": "This series of tests validates the behavior of the TMaaS when the service is deleted (or softDeleted).\nAttempt to pull a job from a deleted service.",
			"headers": "Content-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId_delete}}/task",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 404 (Bug #13460)\"] = responseCode.code === 404;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Not Found message\"] = data.message.match(/no.*found/i);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543"
		},
		{
			"folder": "6d70c66f-7d7b-ab43-5a8a-31dc326f6a5e",
			"id": "0fbc17bf-ce14-b28f-25ee-855321ee01fa",
			"name": "Job Data - Pull Job",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "",
			"descriptionFormat": null,
			"description": "Part of a series of requests that test that the \"dataInputs\" of a job are returned when it is pulled from the queue.\nPull the job with dataInputs.",
			"headers": "Content-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}/task",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.jobId')) {\n    tests[\"Correct jobId pulled from queue\"] = data.data.jobId === postman.getEnvironmentVariable('jobId_data');\n}\nif (testLevels(tests, data, 'data.serviceData.data.dataInputs.input1.content')) {\n    tests[\"'input1' was returned correctly\"] = data.data.serviceData.data.dataInputs.input1.content = \"foo\";\n}\nif (testLevels(tests, data, 'data.serviceData.data.dataInputs.input2.content')) {\n    tests[\"'input2' was returned correctly\"] = data.data.serviceData.data.dataInputs.input2.content = \"bar\";\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543"
		},
		{
			"id": "12c9e6fa-0216-ce25-75da-c1d1c164eea9",
			"headers": "",
			"url": "https://pz-gateway.{{domain}}/alert?triggerId={{triggerId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\nvar NoFail = {};  // Don't fail right away if an empty array is returned.\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar found = false;\n\nif (testLevels(NoFail, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'eventId', 'skip', 'data[].') && testLevels(tests, data.data[i], 'triggerId', 'skip', 'data[].')) {\n            if (data.data[i].triggerId === postman.getEnvironmentVariable('triggerId') && data.data[i].eventId === postman.getEnvironmentVariable('eventId')) {\n                found = true;\n                if (testLevels(tests, data.data[i], 'alertId', 'skip', 'data[].')) {\n                    tests[\"alertId GUID created\"] = data.data[i].alertId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n                    postman.setEnvironmentVariable('alertId', data.data[i].alertId);\n                }\n                if (testLevels(tests, data.data[i], 'jobId', 'skip', 'data[].')) {\n                    tests[\"jobId GUID created\"] = data.data[i].jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n                    postman.setEnvironmentVariable('jobId_workflow', data.data[i].jobId);\n                }\n            }\n        }\n    }\n}\nif (found) {\n    tests[\"alert found\"] = true;\n    postman.setEnvironmentVariable('retry_loop', 0);\n}\nelse {\n    if (parseInt(postman.getEnvironmentVariable('retry_loop')) < parseInt(postman.getEnvironmentVariable('max_retries'))) {\n        postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n        postman.setNextRequest('Workflow - Find Alert');\n        wait(1000);\n    }\n    else {\n        tests[\"alert found\"] = false;\n        postman.setEnvironmentVariable('retry_loop', 0);\n    }\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1490098967003,
			"name": "Workflow - Find Alert",
			"description": "Part of a sequence of tests that execute a job through a trigger.\nThis finds the alert (and jobId) spawned from the trigger/event.",
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543"
		},
		{
			"folder": "6d70c66f-7d7b-ab43-5a8a-31dc326f6a5e",
			"id": "1500f37a-a597-6244-d93b-21319d086953",
			"name": "Status Update Removal - Create Job copy",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": null,
			"description": "This sequence of tests check that updating a job to \"Fail\" will remove that job from the queue.\nCreate the job.",
			"headers": "Content-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/job",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.jobId', 'string')) {\n    tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n    postman.setEnvironmentVariable(\"jobId_update\",data.data.jobId);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543",
			"rawModeData": "{\n  \"data\": {\n      \"dataInputs\": {},\n      \"dataOutput\": [{ \"mimeType\":\"application/json\", \"type\":\"text\" }],\n      \"serviceId\": \"{{serviceId}}\"\n  },\n  \"type\": \"execute-service\"\n}"
		},
		{
			"folder": "6d70c66f-7d7b-ab43-5a8a-31dc326f6a5e",
			"id": "1735f7ef-ff0e-9402-1bf3-dc57851779c9",
			"name": "Status Update Removal - Update Job",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": null,
			"description": "This sequence of tests check that updating a job to \"Fail\" will remove that job from the queue.\nUpdate the job's status to \"Fail\".",
			"headers": "Content-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}/task/{{jobId_update}}",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543",
			"rawModeData": "{\n  \"status\": \"Fail\"\n}"
		},
		{
			"folder": "ac88632b-2291-f023-dcbf-046ae5fd75a1",
			"id": "1c07d305-4c0a-342e-14f2-78a0da82ae11",
			"name": "Update Job - Fake Service",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": null,
			"description": "Attempt to update the status of a real job with a fake serviceId.",
			"headers": "Content-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/service/foo/task/{{jobId}}",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 404 (Bug #13460)\"] = responseCode.code === 404;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Not found message\"] = data.message.match(/no.*f.*nd/i);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543",
			"rawModeData": "{\n  \"status\": \"Success\"\n}"
		},
		{
			"folder": "1898293e-c24f-33a4-d9f8-62e2c268737a",
			"id": "208ff5ff-63e4-f21a-2fab-1f0639677d61",
			"name": "Job Count",
			"dataMode": "params",
			"data": null,
			"rawModeData": null,
			"descriptionFormat": null,
			"description": "Verify that there are no jobs in the job queue, before a job is created.",
			"headers": "",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}/task/metadata",
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\"< < < < < < < < < < < CRITICAL > > > > > > > > > >\");\nconsole.log(\"    These tests represent basic functionality.    \");\nconsole.log(\"         DO NOT PUSH if these tests fail.         \");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'totalJobCount')) {\n    tests[\"No Jobs in Queue\"] = data.totalJobCount === 0;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543"
		},
		{
			"folder": "6d70c66f-7d7b-ab43-5a8a-31dc326f6a5e",
			"id": "20d3e4fe-5df7-f47a-18f6-d5249c12cc0d",
			"name": "Timeout - Pull Job After Wait",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "",
			"descriptionFormat": null,
			"description": "After a job has timed out, make sure it has returned to the queue.",
			"headers": "Content-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId_timeout}}/task",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.jobId')) {\n    tests[\"Job is once again available in queue (Bug #13259)\"] = data.data.jobId === postman.getEnvironmentVariable('jobId_timeout');\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543"
		},
		{
			"id": "21982a66-aefe-36e6-4cb2-3b01c4d4544a",
			"headers": "Content-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/service",
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\" < < < < < < < < < < < NORMAL > > > > > > > > > > > >\");\nconsole.log(\"      These tests represent important features.      \");\nconsole.log(\"Use extreme caution when pushing if these tests fail.\");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.serviceId', 'string')) {\n    postman.setEnvironmentVariable(\"serviceId_timeout\",data.data.serviceId);\n    tests[\"serviceId GUID created\"] = data.data.serviceId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1490098928378,
			"name": "Timeout - Register Service",
			"description": "Create a task-managed service with the timeout parameter.",
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543",
			"rawModeData": "{\n    \"url\": \"garbage\",\n    \"contractUrl\": \"garbage\",\n    \"isTaskManaged\": true,\n    \"method\" : \"GET\",\n    \"timeout\": 10,\n    \"resourceMetadata\": {\n        \"classType\": \"hello\",\n        \"name\": \"pzsvc-hello service\",\n        \"description\": \"TMS Testing.\" \n    }\n}"
		},
		{
			"folder": "6d70c66f-7d7b-ab43-5a8a-31dc326f6a5e",
			"id": "24459f5c-65e6-0210-182c-118b34bf2669",
			"name": "Ordering - Pull Job3",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "",
			"descriptionFormat": null,
			"description": "Create a job for the purpose of validating the FIFO behavior of the queue.\nPull the third job.",
			"headers": "Content-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}/task",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.jobId')) {\n    tests[\"Correct jobId pulled from queue\"] = data.data.jobId === postman.getEnvironmentVariable('jobId_3');\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543"
		},
		{
			"folder": "6d70c66f-7d7b-ab43-5a8a-31dc326f6a5e",
			"id": "27c60f96-8611-cb2f-3eb4-02c7126f6ca6",
			"name": "Deletion - Full Delete Service",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": null,
			"description": "This series of tests validates the behavior of the TMaaS when the service is deleted (or softDeleted).\nDelete the service.",
			"headers": "",
			"method": "DELETE",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId_delete}}",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543"
		},
		{
			"folder": "6d70c66f-7d7b-ab43-5a8a-31dc326f6a5e",
			"id": "2864cab5-d51f-d0d6-39bf-1d324ee8c7fa",
			"name": "Timeout - Pull Job",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "",
			"descriptionFormat": null,
			"description": "Get a job from the service's queue.  Then wait for the timeout to expire.",
			"headers": "Content-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId_timeout}}/task",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.jobId')) {\n    tests[\"Correct jobId pulled from queue\"] = data.data.jobId === postman.getEnvironmentVariable('jobId_timeout');\n}\n\nwait(270000);  // Internal sweep is evey 4 minutes.  Waiting 4.5 minutes here.",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543"
		},
		{
			"folder": "6d70c66f-7d7b-ab43-5a8a-31dc326f6a5e",
			"id": "2f091df5-dbd8-05dc-6b22-61aba0be860f",
			"name": "Deletion -  Create Job (Full Delete)",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": null,
			"description": "This series of tests validates the behavior of the TMaaS when the service is deleted (or softDeleted).\nVerify that a job cannot be created for a deleted service.",
			"headers": "Content-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/job",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.jobId', 'string')) {\n    tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n    postman.setEnvironmentVariable(\"jobId_delete\",data.data.jobId);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543",
			"rawModeData": "{\n  \"data\": {\n      \"dataInputs\": {},\n      \"dataOutput\": [{ \"mimeType\":\"application/json\", \"type\":\"text\" }],\n      \"serviceId\": \"{{serviceId_delete}}\"\n  },\n  \"type\": \"execute-service\"\n}"
		},
		{
			"id": "321e979d-4254-f3a3-070b-d13e271efa0b",
			"headers": "Content-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/service",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.serviceId', 'string')) {\n    postman.setEnvironmentVariable(\"serviceId_delete\",data.data.serviceId);\n    tests[\"serviceId GUID created\"] = data.data.serviceId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1490099008354,
			"name": "Deletion - Register Service",
			"description": "This series of tests validates the behavior of the TMaaS when the service is deleted (or softDeleted).\nRegister the service to be (soft) deleted.",
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543",
			"rawModeData": "{\n    \"url\": \"garbage\",\n    \"contractUrl\": \"garbage\",\n    \"isTaskManaged\": true,\n    \"taskAdministrators\": [\n      \"PiazzaAustere03@Piazza.geointservices.io\"\n    ],\n    \"method\" : \"GET\",\n    \"timeout\": 10,\n    \"resourceMetadata\": {\n        \"classType\": \"hello\",\n        \"name\": \"pzsvc-hello service\",\n        \"description\": \"TMS Testing.\" \n    }\n}"
		},
		{
			"folder": "6d70c66f-7d7b-ab43-5a8a-31dc326f6a5e",
			"id": "370db2bf-a9ee-23cc-f34d-3298cdc5356a",
			"name": "Status Update Removal - Update Again",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": null,
			"description": "This sequence of tests check that updating a job to \"Fail\" will remove that job from the queue.\nAttempt to update the job's status again, which should fail.",
			"headers": "Content-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}/task/{{jobId_update}}",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 404 (Bug #13554)\"] = responseCode.code === 404;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Not found message\"] = data.message.match(/no.*f.*nd/i);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543",
			"rawModeData": "{\n  \"status\": \"Pending\"\n}"
		},
		{
			"folder": "6d70c66f-7d7b-ab43-5a8a-31dc326f6a5e",
			"id": "3d8333d5-be0d-41fe-6dd7-b3acb875ab5e",
			"name": "Ordering - Pull Job1",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "",
			"descriptionFormat": null,
			"description": "Create a job for the purpose of validating the FIFO behavior of the queue.\nPull the first job.",
			"headers": "Content-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}/task",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.jobId')) {\n    tests[\"Correct jobId pulled from queue\"] = data.data.jobId === postman.getEnvironmentVariable('jobId_1');\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543"
		},
		{
			"folder": "02f09274-8d7a-8c83-2651-224576af8346",
			"id": "40dcae2d-ee0a-bdd8-364e-b6d81834cd3d",
			"name": "Delete Service",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": null,
			"description": "Delete the service used throughout this collection.",
			"headers": "",
			"method": "DELETE",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}",
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\" < < < < < < < < < < < < TEAR-DOWN > > > > > > > > > > > \");\nconsole.log(\"These tests destroy any items created by previous tests. \");\nconsole.log(\" These tests represent important features, like DELETEs. \");\nconsole.log(\"            DO NOT PUSH if these tests fail.             \");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543"
		},
		{
			"folder": "6d70c66f-7d7b-ab43-5a8a-31dc326f6a5e",
			"id": "43e2539a-1f73-97f4-6346-4e8e21ed5018",
			"name": "Cancelling - Pull Job",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "",
			"descriptionFormat": null,
			"description": "This sequence of tests check the functionality of job cancelling (DELETE) related to TMaaS.\nVerify that the cancelled job cannot be pulled from the queue.",
			"headers": "Content-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}/task",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.jobId')) {\n    tests[\"No job available to be pulled (Bug #13347)\"] = data.data.jobId === null;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543"
		},
		{
			"folder": "ac88632b-2291-f023-dcbf-046ae5fd75a1",
			"id": "4d2a5c1c-eb87-e01e-727a-f890fe0bc4a9",
			"name": "Update Job - Bad Auth",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Verify that the update job request cannot get through the gateway with bad authorization.",
			"headers": "Content-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}/task/{{jobId}}",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 401\"] = responseCode.code === 401;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'origin')) {\n    tests[\"Error came from gateway\"] = data.origin === \"Gateway\";\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "garbage",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543",
			"rawModeData": "{\n  \"status\": \"Success\"\n}"
		},
		{
			"folder": "6d70c66f-7d7b-ab43-5a8a-31dc326f6a5e",
			"id": "51fe0982-fb5a-85d3-c3b3-5164718b54df",
			"name": "Ordering - Pull Job2",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "",
			"descriptionFormat": null,
			"description": "Create a job for the purpose of validating the FIFO behavior of the queue.\nPull the second job.",
			"headers": "Content-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}/task",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.jobId')) {\n    tests[\"Correct jobId pulled from queue\"] = data.data.jobId === postman.getEnvironmentVariable('jobId_2');\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543"
		},
		{
			"folder": "6d70c66f-7d7b-ab43-5a8a-31dc326f6a5e",
			"id": "5b0d1320-bb59-3cfb-aaa5-a08dc6a9061c",
			"name": "Job Data - Create Job",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Part of a series of requests that test that the \"dataInputs\" of a job are returned when it is pulled from the queue.\nCreate a Job with dataInputs.",
			"headers": "Content-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/job",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.jobId', 'string')) {\n    tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n    postman.setEnvironmentVariable(\"jobId_data\",data.data.jobId);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543",
			"rawModeData": "{\n  \"data\": {\n    \"dataInputs\": {\n      \"input1\" : {\n        \"content\" : \"foo\",    \n                \"type\" : \"body\",  \n                \"mimeType\" : \"application/json\"\n      },\n      \"input2\": {\n        \"content\" : \"bar\",\n        \"type\" : \"body\",\n        \"mimeType\" : \"application/json\"\n      }\n    },\n    \"dataOutput\": [{ \"mimeType\":\"application/json\", \"type\":\"text\" }],\n    \"serviceId\": \"{{serviceId}}\"\n  },\n  \"type\": \"execute-service\"\n}"
		},
		{
			"folder": "ac88632b-2291-f023-dcbf-046ae5fd75a1",
			"id": "61a63c55-9107-6b6b-f429-51495eb9a445",
			"name": "Update Job - Wrong Service",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": null,
			"description": "Attempt to update the status of a real job with a serviceId (to which the job does not belong).",
			"headers": "Content-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId_timeout}}/task/{{jobId}}",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 404 (Bug #13460)\"] = responseCode.code === 404;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Not found message\"] = data.message.match(/no.*f.*nd/i);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543",
			"rawModeData": "{\n  \"status\": \"Success\"\n}"
		},
		{
			"id": "628691b3-aa86-e405-3b6d-b2bb3772dcd3",
			"headers": "Content-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/service",
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\"< < < < < < < < < < < < < START-UP > > > > > > > > > > > \");\nconsole.log(\"      These tests create objects needed elsewhere.       \");\nconsole.log(\"    Any failures here will cause other tests to fail.    \");\nconsole.log(\"            DO NOT PUSH if these tests fail.             \");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "postman.setEnvironmentVariable('retry_loop',0);\npostman.setEnvironmentVariable('max_retries', 9);\n\ntests[\"Status code is 201\"] = responseCode.code === 201;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.serviceId', 'string')) {\n    postman.setEnvironmentVariable(\"serviceId\",data.data.serviceId);\n    tests[\"serviceId GUID created\"] = data.data.serviceId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1489498789135,
			"name": "Register Service",
			"description": "Create a task-managed service.",
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543",
			"rawModeData": "{\n    \"url\": \"garbage\",\n    \"contractUrl\": \"garbage\",\n    \"isTaskManaged\": true,\n    \"method\" : \"GET\",\n    \"resourceMetadata\": {\n        \"classType\": \"hello\",\n        \"name\": \"pzsvc-hello service\",\n        \"description\": \"TMS Testing.\" \n    }\n}"
		},
		{
			"folder": "6d70c66f-7d7b-ab43-5a8a-31dc326f6a5e",
			"id": "62983495-8e28-1ea5-e217-fe08f4ab6b31",
			"name": "Cancelling - Create Job",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "This sequence of tests check the functionality of job cancelling (DELETE) related to TMaaS.\nCreate the job to be cancelled",
			"headers": "Content-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/job",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.jobId', 'string')) {\n    tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n    postman.setEnvironmentVariable(\"jobId_cancel\",data.data.jobId);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543",
			"rawModeData": "{\n  \"data\": {\n      \"dataInputs\": {},\n      \"dataOutput\": [{ \"mimeType\":\"application/json\", \"type\":\"text\" }],\n      \"serviceId\": \"{{serviceId}}\"\n  },\n  \"type\": \"execute-service\"\n}"
		},
		{
			"folder": "6d70c66f-7d7b-ab43-5a8a-31dc326f6a5e",
			"id": "6838fdbf-3de2-1e93-f32f-da8d4555907e",
			"name": "Deletion - Soft Delete Service",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": null,
			"description": "This series of tests validates the behavior of the TMaaS when the service is deleted (or softDeleted).\nsoftDelete the service.",
			"headers": "",
			"method": "DELETE",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId_delete}}?softDelete=true",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543"
		},
		{
			"folder": "02f09274-8d7a-8c83-2651-224576af8346",
			"id": "75edc338-c2ff-eea6-f338-df6948d74291",
			"name": "Delete EventType",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "",
			"descriptionFormat": null,
			"description": "Delete the EventType used throughout this collection.",
			"headers": "Content-Type: application/json\n",
			"method": "DELETE",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/eventType/{{eventTypeId}}",
			"preRequestScript": "",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543"
		},
		{
			"id": "76acb163-0850-ebe7-394a-08864170e975",
			"headers": "",
			"url": "https://pz-gateway.{{domain}}/v2/key",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'uuid')) {\n    postman.setEnvironmentVariable('API Key', data.uuid);\n} else {\n    postman.setNextRequest('');\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{cert}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1493659943520,
			"name": "Create Key",
			"description": "Create a new API key for testing",
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543",
			"responses": [],
			"rawModeData": ""
		},
		{
			"folder": "6d70c66f-7d7b-ab43-5a8a-31dc326f6a5e",
			"id": "778daeb1-fd3c-aaff-5214-101baa6c0643",
			"name": "Ordering - Create Job2",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": null,
			"description": "Create a job for the purpose of validating the FIFO behavior of the queue.\nCreate the second job.",
			"headers": "Content-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/job",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.jobId', 'string')) {\n    tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n    postman.setEnvironmentVariable(\"jobId_2\",data.data.jobId);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543",
			"rawModeData": "{\n  \"data\": {\n      \"dataInputs\": {},\n      \"dataOutput\": [{ \"mimeType\":\"application/json\", \"type\":\"text\" }],\n      \"serviceId\": \"{{serviceId}}\"\n  },\n  \"type\": \"execute-service\"\n}"
		},
		{
			"folder": "02f09274-8d7a-8c83-2651-224576af8346",
			"id": "77ee11a5-77e5-0a2d-fd9c-967ac11f1f64",
			"name": "Delete Timeout Service",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": null,
			"description": "Delete the service used for the timeout tests.",
			"headers": "",
			"method": "DELETE",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId_timeout}}",
			"preRequestScript": "",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543"
		},
		{
			"folder": "1898293e-c24f-33a4-d9f8-62e2c268737a",
			"id": "9587687d-8feb-f887-4217-3b3314060353",
			"name": "Pull Job from Queue",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "",
			"descriptionFormat": null,
			"description": "Get a job from the service's queue.",
			"headers": "Content-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}/task",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.jobId')) {\n    tests[\"Correct jobId pulled from queue\"] = data.data.jobId === postman.getEnvironmentVariable('jobId');\n}\nif (testLevels(tests, data, 'data.serviceData.data.serviceId')) {\n    tests[\"Correct serviceId given in response\"] = data.data.serviceData.data.serviceId === postman.getEnvironmentVariable('serviceId');\n}\n\nwait(250);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543"
		},
		{
			"folder": "6d70c66f-7d7b-ab43-5a8a-31dc326f6a5e",
			"id": "9e7dc487-67bf-858c-97ea-740b4ab6b660",
			"name": "Ordering - Create Job3",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": null,
			"description": "Create a job for the purpose of validating the FIFO behavior of the queue.\nCreate the third job.",
			"headers": "Content-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/job",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.jobId', 'string')) {\n    tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n    postman.setEnvironmentVariable(\"jobId_3\",data.data.jobId);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543",
			"rawModeData": "{\n  \"data\": {\n      \"dataInputs\": {},\n      \"dataOutput\": [{ \"mimeType\":\"application/json\", \"type\":\"text\" }],\n      \"serviceId\": \"{{serviceId}}\"\n  },\n  \"type\": \"execute-service\"\n}"
		},
		{
			"folder": "1898293e-c24f-33a4-d9f8-62e2c268737a",
			"id": "9fe17c4a-b269-2807-6970-ba57f2267803",
			"name": "Create Job",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": null,
			"description": "Create a Job for the task-managed service.",
			"headers": "Content-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/job",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.jobId', 'string')) {\n    tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n    postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543",
			"rawModeData": "{\n  \"data\": {\n      \"dataInputs\": {},\n      \"dataOutput\": [{ \"mimeType\":\"application/json\", \"type\":\"text\" }],\n      \"serviceId\": \"{{serviceId}}\"\n  },\n  \"type\": \"execute-service\"\n}"
		},
		{
			"folder": "6d70c66f-7d7b-ab43-5a8a-31dc326f6a5e",
			"id": "a16194e6-3bfb-8309-8cf0-72db7800bd3a",
			"name": "Second User - Create Job",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": null,
			"description": "Create a Job for the task-managed service, to see if a second user can consume that job.",
			"headers": "Content-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/job",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.jobId', 'string')) {\n    tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n    postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543",
			"rawModeData": "{\n  \"data\": {\n      \"dataInputs\": {},\n      \"dataOutput\": [{ \"mimeType\":\"application/json\", \"type\":\"text\" }],\n      \"serviceId\": \"{{serviceId}}\"\n  },\n  \"type\": \"execute-service\"\n}"
		},
		{
			"folder": "6d70c66f-7d7b-ab43-5a8a-31dc326f6a5e",
			"id": "a4e5453c-2980-c3af-7083-3ea789df670c",
			"name": "Second User - Update Service",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Update the \"taskAdministrators\" field to include the second user.",
			"headers": "Content-Type: application/json\nsize: 30\nfrom: 0\nkey: stamp\norder: true\n",
			"method": "PUT",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}",
			"preRequestScript": "",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Success!\"] = data.type.match(/[Ss]uccess/);\n}\nif (testLevels(tests, data, 'data.message', 'string')) {\n    tests[\"Successful Update Message\"] = data.data.message.match(/[Uu]pdat/) && data.data.message.match(/[Ss]ervice/);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543",
			"rawModeData": "{\n    \"taskAdministrators\": [\n      \"{{username}}\",\n      \"{{bf_username}}\"\n    ]\n}"
		},
		{
			"folder": "6d70c66f-7d7b-ab43-5a8a-31dc326f6a5e",
			"id": "a5f7f150-4250-47da-6777-ec2aab1af886",
			"name": "Workflow - Create Event",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": null,
			"description": "Part of a sequence of tests that execute a job through a trigger.\nThis creates a basic Event that should fire the just-created trigger.",
			"headers": "Content-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/event",
			"preRequestScript": "",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\n\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.eventId', 'string')) {\n    tests[\"eventId GUID created\"] = data.data.eventId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n    postman.setEnvironmentVariable('eventId', data.data.eventId);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543",
			"rawModeData": "{\n  \"data\": {},\n  \"eventTypeId\": \"{{eventTypeId}}\"\n}"
		},
		{
			"folder": "1898293e-c24f-33a4-d9f8-62e2c268737a",
			"id": "b0c76a49-d08c-e097-bb4c-5081f3823058",
			"name": "Job Status - Pending",
			"dataMode": "params",
			"data": null,
			"rawModeData": null,
			"descriptionFormat": null,
			"description": "Verify that the job's status was set to \"Pending\" after it was created.",
			"headers": "",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.status')) {\n    tests[\"Status starts as 'Pending' or 'Submitted'\"] = data.data.status === \"Pending\" || data.data.status === \"Submitted\";\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543"
		},
		{
			"folder": "6d70c66f-7d7b-ab43-5a8a-31dc326f6a5e",
			"id": "b28a43e0-9a33-d93d-3c1d-8570112cf373",
			"name": "Deletion -  Create Job (softDelete)",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": null,
			"description": "This series of tests validates the behavior of the TMaaS when the service is deleted (or softDeleted).\nVerify that a job cannot be created for a softDeleted service.",
			"headers": "Content-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/job",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"'Offline' message\"] = data.message.match(/offline/i);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543",
			"rawModeData": "{\n  \"data\": {\n      \"dataInputs\": {},\n      \"dataOutput\": [{ \"mimeType\":\"application/json\", \"type\":\"text\" }],\n      \"serviceId\": \"{{serviceId_delete}}\"\n  },\n  \"type\": \"execute-service\"\n}"
		},
		{
			"folder": "6d70c66f-7d7b-ab43-5a8a-31dc326f6a5e",
			"id": "b2d99027-a54c-10c2-2db9-a93b98e70c8e",
			"name": "Cancelling - Cancel Job",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": "html",
			"description": "This sequence of tests check the functionality of job cancelling (DELETE) related to TMaaS.\nCancel the job.",
			"headers": "",
			"method": "DELETE",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/job/{{jobId_cancel}}",
			"preRequestScript": "",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'type')) {\n    tests[\"Cancellation Successful\"] = data.type === 'success';\n}\nif (testLevels(tests, data, 'data.message', 'string')) {\n    tests[\"Correct jobId deleted\"] = data.data.message.match(postman.getEnvironmentVariable('jobId_cancel'));\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543"
		},
		{
			"folder": "02f09274-8d7a-8c83-2651-224576af8346",
			"id": "c1ee1e11-53b5-adc7-8914-e7b8472a3f49",
			"name": "Delete Trigger",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "",
			"descriptionFormat": null,
			"description": "Delete the Trigger used throughout this collection.",
			"headers": "Content-Type: application/json\n",
			"method": "DELETE",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/trigger/{{triggerId}}",
			"preRequestScript": "",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}\n\nwait(15000); // Time for items to truly be deleted.",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543"
		},
		{
			"folder": "6d70c66f-7d7b-ab43-5a8a-31dc326f6a5e",
			"id": "c5adf136-f787-19a5-2109-74d4fd1cd71a",
			"name": "Ordering - Create Job1",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": null,
			"description": "Create a job for the purpose of validating the FIFO behavior of the queue.\nCreate the first job.",
			"headers": "Content-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/job",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.jobId', 'string')) {\n    tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n    postman.setEnvironmentVariable(\"jobId_1\",data.data.jobId);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543",
			"rawModeData": "{\n  \"data\": {\n      \"dataInputs\": {},\n      \"dataOutput\": [{ \"mimeType\":\"application/json\", \"type\":\"text\" }],\n      \"serviceId\": \"{{serviceId}}\"\n  },\n  \"type\": \"execute-service\"\n}"
		},
		{
			"folder": "6d70c66f-7d7b-ab43-5a8a-31dc326f6a5e",
			"id": "c6c215db-bcf4-a3b3-15a6-40fef7bd6249",
			"name": "Workflow - Create Trigger",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": null,
			"description": "Part of a sequence of tests that execute a job through a trigger.\nThis creates a \"match_all\" Trigger.",
			"headers": "Content-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/trigger",
			"preRequestScript": "",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\n\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.triggerId', 'string')) {\n    tests[\"triggerId GUID created\"] = data.data.triggerId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n    postman.setEnvironmentVariable('triggerId', data.data.triggerId);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543",
			"rawModeData": "{\n    \"name\": \"TMS Testing Trigger\",\n    \"enabled\": true,\n    \"eventTypeId\": \"{{eventTypeId}}\",\n    \"condition\": {\n      \"query\": {\n          \"match_all\": {}\n      }\n  },\n    \"job\": {\n      \"jobType\": {\n        \"data\": {\n          \"dataInputs\": {},\n          \"dataOutput\": [{ \"mimeType\":\"application/json\", \"type\":\"text\" }],\n          \"serviceId\": \"{{serviceId}}\"\n        },\n        \"type\": \"execute-service\"\n      }\n    }\n}"
		},
		{
			"folder": "6d70c66f-7d7b-ab43-5a8a-31dc326f6a5e",
			"id": "ca0b170e-fb66-d312-aedb-72d77ffb79b3",
			"name": "Cancelling - Job Status",
			"dataMode": "params",
			"data": null,
			"rawModeData": null,
			"descriptionFormat": "html",
			"description": "This sequence of tests check the functionality of job cancelling (DELETE) related to TMaaS.\nVerify that the job's status is now \"Cancelling\" or \"Cancelled\".",
			"headers": "",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/job/{{jobId_cancel}}",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.status')) {\n    tests[\"Cancelled Status\"] = data.data.status === \"Cancelling\" || data.data.status === \"Cancelled\";\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543"
		},
		{
			"folder": "6d70c66f-7d7b-ab43-5a8a-31dc326f6a5e",
			"id": "cc4970e1-6671-3af3-2ee3-50c0989240f4",
			"name": "Deletion - Update Job",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": null,
			"description": "This series of tests validates the behavior of the TMaaS when the service is deleted (or softDeleted).\nAttempt to update a job from a deleted service.",
			"headers": "Content-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId_delete}}/task/{{jobId_delete}}",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 404 (Bug #13460)\"] = responseCode.code === 404;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Not Found message\"] = data.message.match(/no.*found/i);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543",
			"rawModeData": "{\n  \"status\": \"Success\"\n}"
		},
		{
			"id": "ce3780de-dc73-a99c-05d1-f6c59176c319",
			"headers": "",
			"url": "https://pz-gateway.{{domain}}/v2/key",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200 (Bug #13283)\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'uuid')) {\n    postman.setEnvironmentVariable('Other Key', data.uuid);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_username}}",
				"password": "{{bf_password}}",
				"saveToRequest": true
			},
			"time": 1493726486445,
			"name": "Get 2nd User Key",
			"description": "Retrieve the API key of a second user.",
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543",
			"rawModeData": ""
		},
		{
			"folder": "6d70c66f-7d7b-ab43-5a8a-31dc326f6a5e",
			"id": "ce947b98-62e1-803d-188a-d85d6a48bb4c",
			"name": "Status Update Removal - Pull Job",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "",
			"descriptionFormat": null,
			"description": "This sequence of tests check that updating a job to \"Fail\" will remove that job from the queue.\nAttempt to pull the failed job from the queue, which should fail.",
			"headers": "Content-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}/task",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.jobId')) {\n    tests[\"No job available to be pulled (Bug #13347)\"] = data.data.jobId === null;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543"
		},
		{
			"folder": "6d70c66f-7d7b-ab43-5a8a-31dc326f6a5e",
			"id": "dbded542-ae96-08ec-f37c-ef81c23a2b72",
			"name": "Timeout - Create Job",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": null,
			"description": "Create a job for the purpose of validating the timeout function of a task-managed service.",
			"headers": "Content-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/job",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.jobId', 'string')) {\n    tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n    postman.setEnvironmentVariable(\"jobId_timeout\",data.data.jobId);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543",
			"rawModeData": "{\n  \"data\": {\n      \"dataInputs\": {},\n      \"dataOutput\": [{ \"mimeType\":\"application/json\", \"type\":\"text\" }],\n      \"serviceId\": \"{{serviceId_timeout}}\"\n  },\n  \"type\": \"execute-service\"\n}"
		},
		{
			"folder": "1898293e-c24f-33a4-d9f8-62e2c268737a",
			"id": "dd119cb2-a84b-0aab-6755-33ab44a61c26",
			"name": "Job Status - Running",
			"dataMode": "params",
			"data": null,
			"rawModeData": null,
			"descriptionFormat": null,
			"description": "Verify that the job's status was set to \"Running\" after it was pulled from the queue.",
			"headers": "",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.status')) {\n    tests[\"Status becomes 'Running'\"] = data.data.status === \"Running\";\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543"
		},
		{
			"folder": "ac88632b-2291-f023-dcbf-046ae5fd75a1",
			"id": "dd664a3e-ad3e-3b59-d18c-a78447861057",
			"name": "Update Job - Fake Job",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": null,
			"description": "Attempt to update the status of a job that does not exist.",
			"headers": "Content-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}/task/foo",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 404 (Bug #13554)\"] = responseCode.code === 404;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Not found message\"] = data.message.match(/no.*f.*nd/i);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543",
			"rawModeData": "{\n  \"status\": \"Success\"\n}"
		},
		{
			"id": "e48c1a97-65ad-c198-8885-52e9e8da9eec",
			"headers": "Content-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}/task/{{jobId}}",
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\"< < < < < < < < < < < < LOW > > > > > > > > > > > \");\nconsole.log(\"  These tests represent less-important features.  \");\nconsole.log(\"More attention is given to options and edge cases.\");\nconsole.log(\"You may push if these tests fail, but be careful. \");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'errors', 'array')) {\n    if (testLevels(tests, data.errors[0], 'field', 'skip', 'errors[0].')) {\n        tests[\"Problem with 'status' field\"] = data.errors[0].field === 'status';\n    }\n    if (testLevels(tests, data.errors[0], 'defaultMessage', 'string', 'errors[0].')) {\n        tests[\"'Must Match' message\"] = data.errors[0].defaultMessage.match(/must.*match/i);\n    }\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1490099055676,
			"name": "Update Job - Bad Status",
			"description": "Attempt to update the status of a job to an invalid string.",
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543",
			"rawModeData": "{\n  \"status\": \"foo\"\n}"
		},
		{
			"folder": "02f09274-8d7a-8c83-2651-224576af8346",
			"id": "e7118196-16c0-ea4e-aa9f-a6dcc1b0d36f",
			"name": "Delete Event",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "",
			"descriptionFormat": null,
			"description": "Delete the Event that was used throughout this suite of tests.",
			"headers": "Content-Type: application/json\n",
			"method": "DELETE",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/event/{{eventId}}",
			"preRequestScript": "",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543"
		},
		{
			"folder": "1898293e-c24f-33a4-d9f8-62e2c268737a",
			"id": "eda80c9d-4626-7de7-6eba-457c3e46c98e",
			"name": "Job Status - After Update",
			"dataMode": "params",
			"data": null,
			"rawModeData": null,
			"descriptionFormat": null,
			"description": "Verify that the Job's status was properly updated.",
			"headers": "",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.status')) {\n    tests[\"Status matches updated status\"] = data.data.status === \"Success\";\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543"
		},
		{
			"folder": "6d70c66f-7d7b-ab43-5a8a-31dc326f6a5e",
			"id": "f172fb5b-502e-9eee-8a87-0da431ea0b86",
			"name": "Workflow - Create EventType",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": null,
			"description": "Part of a sequence of tests that execute a job through a trigger.\nThis creates a basic eventType.",
			"headers": "Content-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/eventType",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\n\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.eventTypeId', 'string')) {\n    tests[\"eventTypeId GUID created\"] = data.data.eventTypeId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n    postman.setEnvironmentVariable('eventTypeId', data.data.eventTypeId);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {}\r\n}"
		},
		{
			"folder": "6d70c66f-7d7b-ab43-5a8a-31dc326f6a5e",
			"id": "f17996e3-75ba-3a4c-25d9-934173cf1807",
			"name": "Second User - Unauthorized Pull",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "",
			"descriptionFormat": null,
			"description": "Try to get a job from the queue with an unauthorized user.",
			"headers": "Content-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}/task",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 401 (Bug #13285)\"] = responseCode.code === 401;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"message contains user\"] = data.message.match(postman.getGlobalVariable('bf_username'));\n    tests[\"message indicates user is not allowed\"] = data.message.match(/no.*allow/i);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{Other Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543"
		},
		{
			"id": "f18c9462-3443-9e4e-38f8-748606252615",
			"headers": "Content-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}/task/{{jobId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\nvar data = parseJSON(tests, responseBody);\n\nwait(2000);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1489499031677,
			"name": "Update Job",
			"description": "Update the status of a job pulled from the queue.",
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543",
			"rawModeData": "{\n  \"status\": \"Success\"\n}"
		},
		{
			"folder": "1898293e-c24f-33a4-d9f8-62e2c268737a",
			"id": "f7c4c6be-fbd9-b6de-e448-1e6a0a6e3932",
			"name": "Job Count - After Update",
			"dataMode": "params",
			"data": null,
			"rawModeData": null,
			"descriptionFormat": null,
			"description": "Verify that there are no jobs in the job queue, after the  job was removed from the queue.",
			"headers": "",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}/task/metadata",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'totalJobCount')) {\n    tests[\"No Jobs in Queue\"] = data.totalJobCount === 0;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543"
		},
		{
			"folder": "6d70c66f-7d7b-ab43-5a8a-31dc326f6a5e",
			"id": "fd047dc1-4222-01d5-c07d-66dae111f6df",
			"name": "Workflow - Pull Job from Queue",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "",
			"descriptionFormat": "html",
			"description": "Part of a sequence of tests that execute a job through a trigger.\nThis verifies that the workflow-created job is pulled from the queue.",
			"headers": "Content-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}/task",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.jobId')) {\n    tests[\"Workflow jobId pulled from queue\"] = data.data.jobId === postman.getEnvironmentVariable('jobId_workflow');\n}\nif (testLevels(tests, data, 'data.serviceData.data.serviceId')) {\n    tests[\"Correct serviceId given in response\"] = data.data.serviceData.data.serviceId === postman.getEnvironmentVariable('serviceId');\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543"
		},
		{
			"folder": "1898293e-c24f-33a4-d9f8-62e2c268737a",
			"id": "fe75a6b8-1489-6e3e-c8ff-d4f2998ce0fe",
			"name": "Job Count - After Execution",
			"dataMode": "params",
			"data": null,
			"rawModeData": null,
			"descriptionFormat": null,
			"description": "Verify that there is 1 job in the job queue, after a job is created.",
			"headers": "",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}/task/metadata",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'totalJobCount')) {\n    tests[\"1 Job in Queue\"] = data.totalJobCount === 1;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "4b065ce9-e3b4-400f-8257-66663884a543"
		}
	]
}