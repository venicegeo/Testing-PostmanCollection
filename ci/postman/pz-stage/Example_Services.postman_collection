{
	"id": "07fcff34-0010-ab89-a0d2-2af1fb664bd3",
	"name": "Example_Services",
	"description": "",
	"order": [],
	"folders": [
		{
			"owner": "699425",
			"lastUpdatedBy": "699425",
			"lastRevision": 707597582,
			"id": "c7a2a43d-e1c5-8fda-1e2e-589814dbe35c",
			"name": "Hello - 1_Critical",
			"description": "",
			"order": [
				"64f595c8-17c9-00c6-1cd5-a2777c20c052",
				"2374cb04-f879-8d11-3fdf-c6b331bdf58f",
				"511a52b2-092f-11ec-ae3e-b78c09821060",
				"d3909c48-230d-0a50-5be4-032ed9e2735b"
			]
		},
		{
			"owner": "699425",
			"lastUpdatedBy": "699425",
			"lastRevision": 707852168,
			"id": "ff19cac1-72d1-4bd3-70ce-9b77174fb1c9",
			"name": "Hello - 2_Important",
			"description": "",
			"order": [
				"602d3710-9320-edc9-4b2e-b6b09bcc1d3a",
				"377f1837-7f14-b6be-b35c-bbfb461ede3b",
				"6acfac59-26f8-f983-2684-f7143d4ae9e6",
				"e9099ce0-e930-90ce-a048-0c1a363ef840",
				"ae59fdb2-dbf9-0841-1d9c-41ef4604f86e",
				"dc387304-e304-6f7d-3c20-68fccb741845",
				"eb1e456a-1bc2-4c49-3203-954f387dde53",
				"e63bcc82-1021-9517-03a3-9771141bdfa5",
				"d4b91e08-c1e4-d5f3-38b3-5bd8e45c1f1a",
				"669ebced-0832-af29-f93d-4d55c467fb7b"
			]
		},
		{
			"owner": "699425",
			"lastUpdatedBy": "699425",
			"lastRevision": 707901927,
			"id": "35c743d1-078b-1560-4d69-afb668adf4c5",
			"name": "Hello - 4_Teardown",
			"description": "",
			"order": [
				"74720839-61bd-11a1-5cd4-bf306369804b",
				"4c2457a1-ccac-5ae1-61d4-b5a785ad33ee",
				"c06f7f3d-1780-b1ca-100f-f36798db7e99",
				"0b26d6c2-d362-de7c-5359-acf6ebab5e81"
			]
		},
		{
			"owner": "699425",
			"lastUpdatedBy": "699425",
			"lastRevision": 703338317,
			"id": "99262cd1-2504-0c3f-4281-f162b21ceef0",
			"name": "Preview Gen - 1_Critical",
			"description": "",
			"order": [
				"d46cb0b8-1e39-68a1-d028-45d26dcd4727",
				"4a8fad64-32cc-d966-11f1-5bc5df124705",
				"11289d52-5b7a-f6e8-f286-209aa8665ac7",
				"c1fe1483-5d90-1913-fea4-ab4493e559b0",
				"4c60494e-9a7e-ec9c-bb79-f29453fe3f14",
				"1e7d8301-dad9-4a3f-aae7-41f366012277",
				"9c9cb011-a404-63d0-9a8b-a6d9145a06be"
			]
		},
		{
			"owner": "699425",
			"lastUpdatedBy": "699425",
			"lastRevision": 703568869,
			"id": "826545a7-9851-46ae-c4ec-fa1966db2362",
			"name": "Preview Gen - 2_Important",
			"description": "",
			"order": [
				"f12324aa-7eab-7795-40fe-ff46eb2aab49",
				"a5eb9f64-794d-9da0-1d0a-9c79b59d4ea9",
				"698fd6c3-dbfd-7751-5224-47929f94cfd8",
				"4125c1e3-5f90-a774-5927-0dcdeb290ac1",
				"0035de08-f250-7f16-2c63-b5c5f21c6aa8",
				"6cd6ddcf-cd13-5654-f3d8-6a0c1df16048",
				"6f9a21fe-d0f6-f2d6-5ddd-9febbdf932e3",
				"2e0c4d1c-df2a-9552-265b-a4e67e4aaf89",
				"0ad4da89-6bae-533a-c53c-79a522815226",
				"9f53c283-759f-f8c9-a5ee-dd6e12dd9c54"
			]
		},
		{
			"owner": "699425",
			"lastUpdatedBy": "699425",
			"lastRevision": 703613951,
			"id": "45030304-abb8-a6fd-616c-f3c7d929ac61",
			"name": "Preview Gen - 3_Low",
			"description": "",
			"order": [
				"bf32cc12-f3d0-3e65-1145-8ff1d3d46ef1",
				"4dd10e72-143a-2c33-3614-69764f45b364",
				"6f02c3ca-05ef-f890-c566-512789f59465",
				"9c9f1cd3-93d2-1e83-7706-077e19958c7d",
				"c1f30a65-8da7-5af6-e11c-c92bcf853274"
			]
		},
		{
			"owner": "699425",
			"lastUpdatedBy": "699425",
			"lastRevision": 707900611,
			"id": "6f667756-0bbd-bdae-a365-66b143ee3b3f",
			"name": "Preview Gen - 4_Teardown",
			"description": "",
			"order": [
				"ec23a0da-5633-9d1c-85e6-dfd6b0ed8935",
				"4880b561-9c3a-1cd3-c5ae-366022a7e6fc",
				"128d85c6-d0d8-68b8-9c2d-811a3be24274",
				"64e46704-4648-1102-c919-d1216e32a25b"
			]
		}
	],
	"timestamp": 0,
	"owner": "699425",
	"public": false,
	"requests": [
		{
			"folder": "826545a7-9851-46ae-c4ec-fa1966db2362",
			"id": "0035de08-f250-7f16-2c63-b5c5f21c6aa8",
			"name": "Get Resulting Normal dataId",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": "html",
			"description": "Download the result of the synchronous crop service job run through Piazza.",
			"headers": "",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/file/{{dataId_norm}}",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "07fcff34-0010-ab89-a0d2-2af1fb664bd3"
		},
		{
			"folder": "826545a7-9851-46ae-c4ec-fa1966db2362",
			"id": "0ad4da89-6bae-533a-c53c-79a522815226",
			"name": "Check Resulting Async dataId",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": "html",
			"description": "Get the resulting dataId metadata of the asynchronous crop service job run through Piazza.",
			"headers": "",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_async}}",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntestLevels(tests, data, 'data.dataType.location.bucketName');\ntestLevels(tests, data, 'data.dataType.location.fileName');\ntestLevels(tests, data, 'data.dataType.location.domainName');",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "07fcff34-0010-ab89-a0d2-2af1fb664bd3"
		},
		{
			"folder": "35c743d1-078b-1560-4d69-afb668adf4c5",
			"id": "0b26d6c2-d362-de7c-5359-acf6ebab5e81",
			"name": "Delete Lightning Data",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "",
			"descriptionFormat": null,
			"description": "Delete the data created by the lightning service.",
			"headers": "Content-Type: application/json\n",
			"method": "DELETE",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_lightning}}",
			"preRequestScript": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "07fcff34-0010-ab89-a0d2-2af1fb664bd3"
		},
		{
			"folder": "99262cd1-2504-0c3f-4281-f162b21ceef0",
			"id": "11289d52-5b7a-f6e8-f286-209aa8665ac7",
			"name": "Get Cropped Image",
			"dataMode": "params",
			"data": null,
			"rawModeData": null,
			"descriptionFormat": "html",
			"description": "Verify that the synchronous cropped image was created.",
			"headers": "",
			"method": "GET",
			"pathVariables": {},
			"url": "{{croppedURL}}",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"collectionId": "07fcff34-0010-ab89-a0d2-2af1fb664bd3"
		},
		{
			"folder": "6f667756-0bbd-bdae-a365-66b143ee3b3f",
			"id": "128d85c6-d0d8-68b8-9c2d-811a3be24274",
			"name": "Delete Normal Data",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "",
			"descriptionFormat": "html",
			"description": "Delete the data created by the synchronous crop service from Piazza.",
			"headers": "Content-Type: application/json\n",
			"method": "DELETE",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_norm}}",
			"preRequestScript": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "07fcff34-0010-ab89-a0d2-2af1fb664bd3"
		},
		{
			"folder": "99262cd1-2504-0c3f-4281-f162b21ceef0",
			"id": "1e7d8301-dad9-4a3f-aae7-41f366012277",
			"name": "View Result",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": "html",
			"description": "Examine the result of the asynchronous crop job.",
			"headers": "Content-Type: application/json\n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-svcs-prevgen.{{domain}}/cropasync/result/{{jobId}}",
			"preRequestScript": "",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'dataType.location.bucketName')) {\n    var bucket = data.dataType.location.bucketName;\n}\nif (testLevels(tests, data, 'dataType.location.fileName')) {\n    var file = data.dataType.location.fileName;\n}\nif (testLevels(tests, data, 'dataType.location.domainName')) {\n    var domain = data.dataType.location.domainName;\n}\npostman.setEnvironmentVariable('croppedURL', 'https://' + domain + '/' + bucket + '/' + file);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "07fcff34-0010-ab89-a0d2-2af1fb664bd3"
		},
		{
			"folder": "c7a2a43d-e1c5-8fda-1e2e-589814dbe35c",
			"id": "2374cb04-f879-8d11-3fdf-c6b331bdf58f",
			"name": "GET hello",
			"dataMode": "params",
			"data": null,
			"rawModeData": null,
			"descriptionFormat": "html",
			"description": "Check the \"greeting\" and \"countSquared\" outputs of the /hello endpoint.",
			"headers": "",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pzsvc-hello.{{domain}}/hello",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'greeting', 'string')) {\n    tests[\"Says hello!\"] = data.greeting.match(/h(i|ello)/i);\n}\nif (testLevels(tests, data, 'countSquared')) {\n    tests[\"Correct countSquared value\"] = data.countSquared = -1;\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"collectionId": "07fcff34-0010-ab89-a0d2-2af1fb664bd3"
		},
		{
			"folder": "826545a7-9851-46ae-c4ec-fa1966db2362",
			"id": "2e0c4d1c-df2a-9552-265b-a4e67e4aaf89",
			"name": "Check Async Job Status",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": "html",
			"description": "Check that the registered asynchronous crop service job was successful through Piazza.",
			"headers": "Content-Type: application/json\n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/job/{{jobId_async}}",
			"preRequestScript": "",
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.status')) {\n    if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Check Async Job Status');\n            wait(5000);\n        }\n        else {\n            tests[\"Job finished in time\"] = false;\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n    else if (data.data.status === 'Success') {\n        postman.setEnvironmentVariable('retry_loop',0);\n        tests[\"Job finished in time\"] = true;\n        if (testLevels(tests, data, 'data.result.dataId')) {\n            postman.setEnvironmentVariable(\"dataId_async\", data.data.result.dataId);\n        }\n    }\n    else {\n        tests[\"status should not be \" + data.data.status] = false;\n        postman.setEnvironmentVariable('retry_loop',0);\n    }\n}\nif (testLevels(tests, data, 'data.createdBy')) {\n    tests[\"Correct createdBy\"] = data.data.createdBy === postman.getEnvironmentVariable('username');\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "07fcff34-0010-ab89-a0d2-2af1fb664bd3"
		},
		{
			"folder": "ff19cac1-72d1-4bd3-70ce-9b77174fb1c9",
			"id": "377f1837-7f14-b6be-b35c-bbfb461ede3b",
			"name": "Create Hello Job",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Create a hello service job through Piazza.",
			"headers": "Content-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/job",
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.jobId', 'string')) {\n    tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n    postman.setEnvironmentVariable(\"jobId_hello\",data.data.jobId);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "07fcff34-0010-ab89-a0d2-2af1fb664bd3",
			"rawModeData": "{\n    \"type\": \"execute-service\",\n    \"data\": {\n        \"serviceId\": \"{{serviceId_hello}}\",\n        \"dataInputs\" : {      \n            \"test\" : {          \n                \"content\" : \"{\\\"name\\\":\\\"Jimmy\\\",\\\"count\\\":8}\",    \n                \"type\" : \"body\",  \n                \"mimeType\" : \"application/json\"         \n           }\n        }, \n        \"dataOutput\": [{\n            \"mimeType\" : \"application/json\",          \n            \"type\" : \"text\"\n        }]\n    }\n}"
		},
		{
			"folder": "826545a7-9851-46ae-c4ec-fa1966db2362",
			"id": "4125c1e3-5f90-a774-5927-0dcdeb290ac1",
			"name": "Check Resulting Normal dataId",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": "html",
			"description": "Get the resulting dataId metadata of the synchronous crop service job run through Piazza.",
			"headers": "",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_norm}}",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntestLevels(tests, data, 'data.dataType.location.bucketName');\ntestLevels(tests, data, 'data.dataType.location.fileName');\ntestLevels(tests, data, 'data.dataType.location.domainName');",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "07fcff34-0010-ab89-a0d2-2af1fb664bd3"
		},
		{
			"folder": "6f667756-0bbd-bdae-a365-66b143ee3b3f",
			"id": "4880b561-9c3a-1cd3-c5ae-366022a7e6fc",
			"name": "Delete Normal Service",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": "html",
			"description": "Unregister the synchronous crop service from Piazza.",
			"headers": "",
			"method": "DELETE",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId_norm}}",
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\"< < < < < < < < < < PREVIEW - TEAR-DOWN > > > > > > > > >\");\nconsole.log(\"These tests destroy any items created by previous tests. \");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "07fcff34-0010-ab89-a0d2-2af1fb664bd3"
		},
		{
			"folder": "99262cd1-2504-0c3f-4281-f162b21ceef0",
			"id": "4a8fad64-32cc-d966-11f1-5bc5df124705",
			"name": "Crop",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Create a synchronous crop job on an image in the s3 bucket.",
			"headers": "Content-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-svcs-prevgen.{{domain}}/crop",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'dataType.location.bucketName')) {\n    var bucket = data.dataType.location.bucketName;\n}\nif (testLevels(tests, data, 'dataType.location.fileName')) {\n    var file = data.dataType.location.fileName;\n}\nif (testLevels(tests, data, 'dataType.location.domainName')) {\n    var domain = data.dataType.location.domainName;\n}\npostman.setEnvironmentVariable('croppedURL', 'https://' + domain + '/' + bucket + '/' + file);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"collectionId": "07fcff34-0010-ab89-a0d2-2af1fb664bd3",
			"rawModeData": "{\n    \"source\": {\n        \"domain\": \"s3.amazonaws.com\",\n        \"bucketName\": \"pz-svcs-prevgen\",\n        \"fileName\": \"nasa_land_ocean_ice.tif\"\n    },\n    \"function\": \"crop\",\n    \"bounds\": {\n        \"minx\": -140.00,\n        \"miny\": 10.00,\n        \"maxx\": -60.00,\n        \"maxy\": 70.00\n    }\n}"
		},
		{
			"folder": "35c743d1-078b-1560-4d69-afb668adf4c5",
			"id": "4c2457a1-ccac-5ae1-61d4-b5a785ad33ee",
			"name": "Delete Lightning Service",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": null,
			"description": "Unregister the lightning service.",
			"headers": "",
			"method": "DELETE",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId_lightning}}",
			"preRequestScript": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "07fcff34-0010-ab89-a0d2-2af1fb664bd3"
		},
		{
			"folder": "99262cd1-2504-0c3f-4281-f162b21ceef0",
			"id": "4c60494e-9a7e-ec9c-bb79-f29453fe3f14",
			"name": "Check Status",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": "html",
			"description": "Check the status of the asynchronous cropped job.  Retry until successful or 10 attempts made.",
			"headers": "Content-Type: application/json\n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-svcs-prevgen.{{domain}}/cropasync/status/{{jobId}}",
			"preRequestScript": "",
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'status')) {\n    if (data.status === 'Running') {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Check Status');\n            wait(5000);\n        }\n        else {\n            tests[\"Job finished in time\"] = false;\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n    else if (data.status === 'Success') {\n        postman.setEnvironmentVariable('retry_loop',0);\n        tests[\"Job finished in time\"] = true;\n    }\n    else {\n        tests[\"status should not be \" + data.status] = false;\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Check Status');\n            wait(5000);\n        }\n        else {\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n} else if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n    postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n    postman.setNextRequest('Check Status');\n    wait(5000);\n}\nif (testLevels(tests, data, 'progress.percentComplete')) {\n    tests[\"Percentage is between 0 and 100\"] = data.progress.percentComplete >= 0 && data.progress.percentComplete <= 100;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "07fcff34-0010-ab89-a0d2-2af1fb664bd3"
		},
		{
			"folder": "45030304-abb8-a6fd-616c-f3c7d929ac61",
			"id": "4dd10e72-143a-2c33-3614-69764f45b364",
			"name": "Confirm Delete",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": "html",
			"description": "Attempt to get the status of a job that has been deleted.",
			"headers": "Content-Type: application/json\n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-svcs-prevgen.{{domain}}/cropasync/status/{{jobId}}",
			"preRequestScript": "",
			"tests": "tests[\"Status code is 404 (Bug #10041)\"] = responseCode.code === 404;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "07fcff34-0010-ab89-a0d2-2af1fb664bd3"
		},
		{
			"folder": "c7a2a43d-e1c5-8fda-1e2e-589814dbe35c",
			"id": "511a52b2-092f-11ec-ae3e-b78c09821060",
			"name": "POST hello",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Check that the \"greeting\" and \"countSquared\" outputs of the /hello endpoint match the expected value based on the POSTed data.",
			"headers": "Content-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pzsvc-hello.{{domain}}/hello",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'greeting', 'string')) {\n    tests[\"Says hello!\"] = data.greeting.match(/h(i|ello)/i);\n    tests[\"Uses my name\"] = data.greeting.match(/james/i);\n}\nif (testLevels(tests, data, 'countSquared')) {\n    tests[\"Correct countSquared value\"] = data.countSquared == 9;\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"collectionId": "07fcff34-0010-ab89-a0d2-2af1fb664bd3",
			"rawModeData": "{\n  \"name\": \"James\",\n  \"count\": 3\n}"
		},
		{
			"folder": "ff19cac1-72d1-4bd3-70ce-9b77174fb1c9",
			"id": "602d3710-9320-edc9-4b2e-b6b09bcc1d3a",
			"name": "Register Hello Service",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Check that the hello service (as a POST) can be registered through Piazza.",
			"headers": "Content-Type: application/json\nsize: 30\nfrom: 0\nkey: stamp\norder: true\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/service",
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\"< < < < < < < < < HELLO - IMPORTANT > > > > > > > > >\");\nconsole.log(\"      These tests represent important features.      \");\nconsole.log(\"Use extreme caution when pushing if these tests fail.\");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.serviceId', 'string')) {\n    postman.setEnvironmentVariable(\"serviceId_hello\",data.data.serviceId);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "07fcff34-0010-ab89-a0d2-2af1fb664bd3",
			"rawModeData": "{\n  \"url\" : \"https://pzsvc-hello.{{domain}}/hello\",\n  \"timeout\" : \"180000\",\n  \"method\" : \"POST\",\n  \"contractUrl\" : \"https://pzsvc-hello.{{domain}}/hello\",\n  \"resourceMetadata\" : {\n    \"name\" : \"hello test\",\n    \"description\" : \"hello says hello ... with lightning!\",\n    \"classType\": {\n      \"classification\": \"UNCLASSIFIED\"\n    }\n  }\n}"
		},
		{
			"folder": "6f667756-0bbd-bdae-a365-66b143ee3b3f",
			"id": "64e46704-4648-1102-c919-d1216e32a25b",
			"name": "Delete Async Data",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "",
			"descriptionFormat": "html",
			"description": "",
			"headers": "Content-Type: application/json\n",
			"method": "DELETE",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_async}}",
			"preRequestScript": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "07fcff34-0010-ab89-a0d2-2af1fb664bd3"
		},
		{
			"folder": "c7a2a43d-e1c5-8fda-1e2e-589814dbe35c",
			"id": "64f595c8-17c9-00c6-1cd5-a2777c20c052",
			"name": "pzsvc-hello ... says hello ...",
			"dataMode": "params",
			"data": null,
			"rawModeData": null,
			"descriptionFormat": "html",
			"description": "Simple Health check to pzsvc-hello.  Postman Environemnt Variables are initialized in this step.",
			"headers": "",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pzsvc-hello.{{domain}}/",
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\"< < < < < < < < < HELLO - CRITICAL > > > > > > > >\");\nconsole.log(\"    These tests represent basic functionality.    \");\nconsole.log(\"         DO NOT PUSH if these tests fail.         \");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Says Hi!\"] = responseBody.match(/h(i|ello)/i);\n\npostman.setEnvironmentVariable('retry_loop',0);\npostman.setEnvironmentVariable('max_retries', 9);\n\npostman.setEnvironmentVariable('serviceId_hello','');\npostman.setEnvironmentVariable('jobId_hello','');\npostman.setEnvironmentVariable('dataId_hello','');\npostman.setEnvironmentVariable('serviceId_lightning','');\npostman.setEnvironmentVariable('jobId_lightning','');\npostman.setEnvironmentVariable('dataId_lightning','');",
			"currentHelper": "normal",
			"helperAttributes": {},
			"collectionId": "07fcff34-0010-ab89-a0d2-2af1fb664bd3"
		},
		{
			"id": "669ebced-0832-af29-f93d-4d55c467fb7b",
			"headers": "",
			"url": "https://pz-gateway.{{domain}}/file/{{dataId_lightning}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'strike')) {\n    tests[\"'strike' is a boolean\"] = typeof data.strike === 'boolean';\n    if (testLevels(tests, data, 'lat')) {\n        tests[\"Valid lat\"] = data.lat >= -90 && data.lat <= 90;\n    }\n    if (testLevels(tests, data, 'lon')) {\n        tests[\"Valid lon\"] = data.lon >= -180 && data.lon <= 180;\n    }\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1489502516450,
			"name": "Get Resulting Lightning dataId",
			"description": "Download the output of the lightning service job when run through Piazza.",
			"collectionId": "07fcff34-0010-ab89-a0d2-2af1fb664bd3"
		},
		{
			"id": "698fd6c3-dbfd-7751-5224-47929f94cfd8",
			"headers": "Content-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId_norm}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.status')) {\n    if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Check Normal Job Status');\n            wait(5000);\n        }\n        else {\n            tests[\"Job finished in time\"] = false;\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n    else if (data.data.status === 'Success') {\n        postman.setEnvironmentVariable('retry_loop',0);\n        tests[\"Job finished in time\"] = true;\n        if (testLevels(tests, data, 'data.result.dataId')) {\n            postman.setEnvironmentVariable(\"dataId_norm\", data.data.result.dataId);\n            wait(5000);\n        }\n    }\n    else {\n        tests[\"status should not be \" + data.data.status] = false;\n        postman.setEnvironmentVariable('retry_loop',0);\n    }\n}\nif (testLevels(tests, data, 'data.createdBy')) {\n    tests[\"Correct createdBy\"] = data.data.createdBy === postman.getEnvironmentVariable('username');\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1489499249236,
			"name": "Check Normal Job Status",
			"description": "Check that the registered synchronous crop service job was successful through Piazza.",
			"collectionId": "07fcff34-0010-ab89-a0d2-2af1fb664bd3"
		},
		{
			"folder": "ff19cac1-72d1-4bd3-70ce-9b77174fb1c9",
			"id": "6acfac59-26f8-f983-2684-f7143d4ae9e6",
			"name": "Check Hello Job Status",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": "html",
			"description": "Check that the hello service job was successful.",
			"headers": "Content-Type: application/json\n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/job/{{jobId_hello}}",
			"preRequestScript": "",
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.status')) {\n    if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Check Hello Job Status');\n            wait(1000);\n        }\n        else {\n            tests[\"Job finished in time\"] = false;\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n    else if (data.data.status === 'Success') {\n        postman.setEnvironmentVariable('retry_loop',0);\n        tests[\"Job finished in time\"] = true;\n        if (testLevels(tests, data, 'data.result.dataId')) {\n            postman.setEnvironmentVariable(\"dataId_hello\", data.data.result.dataId);\n        }\n    }\n    else {\n        tests[\"status should not be \" + data.data.status] = false;\n        postman.setEnvironmentVariable('retry_loop',0);\n    }\n}\nif (testLevels(tests, data, 'data.createdBy')) {\n    tests[\"Correct createdBy\"] = data.data.createdBy === postman.getEnvironmentVariable('username');\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "07fcff34-0010-ab89-a0d2-2af1fb664bd3"
		},
		{
			"folder": "826545a7-9851-46ae-c4ec-fa1966db2362",
			"id": "6cd6ddcf-cd13-5654-f3d8-6a0c1df16048",
			"name": "Register Async Service",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Register the asynchronous crop service through Piazza.",
			"headers": "Content-Type: application/json\nsize: 30\nfrom: 0\nkey: stamp\norder: true\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/service",
			"preRequestScript": "",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.serviceId', 'string')) {\n    postman.setEnvironmentVariable(\"serviceId_async\",data.data.serviceId);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "07fcff34-0010-ab89-a0d2-2af1fb664bd3",
			"rawModeData": "{\n  \"isAsynchronous\":true,\n  \"url\" : \"https://pz-svcs-prevgen.{{domain}}/cropasync\",\n  \"timeout\" : \"180000\",\n  \"method\" : \"POST\",\n  \"contractUrl\" : \"https://pz-svcs-prevgen.{{domain}}/cropasync\",\n  \"resourceMetadata\" : {\n    \"name\" : \"pz-svcs-prevgen crop raster test\",\n    \"description\" : \"pz-svcs-prevgen is an awesome sample crop image external service.\",\n    \"classType\": {\n        \"classification\": \"UNCLASSIFIED\"\n     }\n  }\n}"
		},
		{
			"folder": "45030304-abb8-a6fd-616c-f3c7d929ac61",
			"id": "6f02c3ca-05ef-f890-c566-512789f59465",
			"name": "Delete Before Complete - Crop Async",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Part of a sequence of requests that verifies that a job can be deleted while it is in propgress.\nCreate asynchronous crop job.",
			"headers": "Content-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-svcs-prevgen.{{domain}}/cropasync",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.jobId')) {\n    postman.setEnvironmentVariable(\"jobId_del\",data.data.jobId);\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"collectionId": "07fcff34-0010-ab89-a0d2-2af1fb664bd3",
			"rawModeData": "{\n    \"source\": {\n        \"domain\": \"s3.amazonaws.com\",\n        \"bucketName\": \"pz-svcs-prevgen\",\n        \"fileName\": \"nasa_land_ocean_ice.tif\"\n    },\n    \"function\": \"crop\",\n    \"bounds\": {\n        \"minx\": -140.00,\n        \"miny\": 10.00,\n        \"maxx\": -60.00,\n        \"maxy\": 70.00\n    }\n}"
		},
		{
			"folder": "826545a7-9851-46ae-c4ec-fa1966db2362",
			"id": "6f9a21fe-d0f6-f2d6-5ddd-9febbdf932e3",
			"name": "Create Async Job",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Create a job with the registered asynchronous crop service through Piazza.",
			"headers": "Content-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/job",
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.jobId', 'string')) {\n    tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n    postman.setEnvironmentVariable(\"jobId_async\",data.data.jobId);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "07fcff34-0010-ab89-a0d2-2af1fb664bd3",
			"rawModeData": "{\n    \"type\": \"execute-service\",\n    \"data\": {\n        \"serviceId\": \"{{serviceId_async}}\",\n        \"dataInputs\" : {      \n            \"test\" : {          \n                \"content\" : \"{\\\"source\\\":{\\\"domain\\\":\\\"s3.amazonaws.com\\\",\\\"bucketName\\\":\\\"pz-svcs-prevgen\\\",\\\"fileName\\\":\\\"nasa_land_ocean_ice.tif\\\"},\\\"function\\\":\\\"crop\\\",\\\"bounds\\\":{\\\"minx\\\":-140.00,\\\"miny\\\":10.00,\\\"maxx\\\":-60.00,\\\"maxy\\\":70.00}}\",    \n                \"type\" : \"body\",  \n                \"mimeType\" : \"application/json\"         \n           }\n        }, \n        \"dataOutput\": [{\n            \"mimeType\" : \"image/tiff\",          \n            \"type\" : \"raster\"\n        }]\n    }\n}"
		},
		{
			"folder": "35c743d1-078b-1560-4d69-afb668adf4c5",
			"id": "74720839-61bd-11a1-5cd4-bf306369804b",
			"name": "Delete Hello Service",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": null,
			"description": "Unregister the hello service.",
			"headers": "",
			"method": "DELETE",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId_hello}}",
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\" < < < < < < < < < < HELLO - TEAR-DOWN > > > > > > > > > \");\nconsole.log(\"These tests destroy any items created by previous tests. \");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "07fcff34-0010-ab89-a0d2-2af1fb664bd3"
		},
		{
			"folder": "99262cd1-2504-0c3f-4281-f162b21ceef0",
			"id": "9c9cb011-a404-63d0-9a8b-a6d9145a06be",
			"name": "Get Async Cropped Image",
			"dataMode": "params",
			"data": null,
			"rawModeData": null,
			"descriptionFormat": "html",
			"description": "Verify that the asynchronous cropped image was created.",
			"headers": "",
			"method": "GET",
			"pathVariables": {},
			"url": "{{croppedURL}}",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"collectionId": "07fcff34-0010-ab89-a0d2-2af1fb664bd3"
		},
		{
			"folder": "45030304-abb8-a6fd-616c-f3c7d929ac61",
			"id": "9c9f1cd3-93d2-1e83-7706-077e19958c7d",
			"name": "Delete Before Complete - Delete Job",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": "html",
			"description": "Part of a sequence of requests that verifies that a job can be deleted while it is in propgress.\nDelete asynchronous crop job.",
			"headers": "Content-Type: application/json\n",
			"method": "DELETE",
			"pathVariables": {},
			"url": "https://pz-svcs-prevgen.{{domain}}/cropasync/job/{{jobId_del}}",
			"preRequestScript": "",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "07fcff34-0010-ab89-a0d2-2af1fb664bd3"
		},
		{
			"folder": "826545a7-9851-46ae-c4ec-fa1966db2362",
			"id": "9f53c283-759f-f8c9-a5ee-dd6e12dd9c54",
			"name": "Get Resulting Async dataId",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": "html",
			"description": "Download the result of the asynchronous crop service job run through Piazza.",
			"headers": "",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/file/{{dataId_async}}",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "07fcff34-0010-ab89-a0d2-2af1fb664bd3"
		},
		{
			"folder": "826545a7-9851-46ae-c4ec-fa1966db2362",
			"id": "a5eb9f64-794d-9da0-1d0a-9c79b59d4ea9",
			"name": "Create Normal Job",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Create a job with the registered synchronous crop service through Piazza.",
			"headers": "Content-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/job",
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.jobId', 'string')) {\n    tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n    postman.setEnvironmentVariable(\"jobId_norm\",data.data.jobId);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "07fcff34-0010-ab89-a0d2-2af1fb664bd3",
			"rawModeData": "{\n    \"type\": \"execute-service\",\n    \"data\": {\n        \"serviceId\": \"{{serviceId_norm}}\",\n        \"dataInputs\" : {      \n            \"test\" : {          \n                \"content\" : \"{\\\"source\\\":{\\\"domain\\\":\\\"s3.amazonaws.com\\\",\\\"bucketName\\\":\\\"pz-svcs-prevgen\\\",\\\"fileName\\\":\\\"nasa_land_ocean_ice.tif\\\"},\\\"function\\\":\\\"crop\\\",\\\"bounds\\\":{\\\"minx\\\":-140.00,\\\"miny\\\":10.00,\\\"maxx\\\":-60.00,\\\"maxy\\\":70.00}}\",    \n                \"type\" : \"body\",  \n                \"mimeType\" : \"application/json\"         \n           }\n        }, \n        \"dataOutput\": [{\n            \"mimeType\" : \"image/tiff\",          \n            \"type\" : \"raster\"\n        }]\n    }\n}"
		},
		{
			"folder": "ff19cac1-72d1-4bd3-70ce-9b77174fb1c9",
			"id": "ae59fdb2-dbf9-0841-1d9c-41ef4604f86e",
			"name": "Get Resulting Hello dataId",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": "html",
			"description": "Validate the output of the hello service job when run through Piazza.",
			"headers": "",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/file/{{dataId_hello}}",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'greeting', 'string')) {\n    tests[\"Says hello!\"] = data.greeting.match(/h(i|ello)/i);\n    tests[\"Uses my name\"] = data.greeting.match(/jimmy/i);\n}\nif (testLevels(tests, data, 'countSquared')) {\n    tests[\"Correct countSquared value\"] = data.countSquared == 64;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "07fcff34-0010-ab89-a0d2-2af1fb664bd3"
		},
		{
			"folder": "45030304-abb8-a6fd-616c-f3c7d929ac61",
			"id": "bf32cc12-f3d0-3e65-1145-8ff1d3d46ef1",
			"name": "Delete Job",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": "html",
			"description": "Delete the synchronous crop job through the Preview Generator.",
			"headers": "Content-Type: application/json\n",
			"method": "DELETE",
			"pathVariables": {},
			"url": "https://pz-svcs-prevgen.{{domain}}/cropasync/job/{{jobId}}",
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\"< < < < < < < < < PREVIEW - LOW > > > > > > > > > \");\nconsole.log(\"  These tests represent less-important features.  \");\nconsole.log(\"More attention is given to options and edge cases.\");\nconsole.log(\"You may push if these tests fail, but be careful. \");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "07fcff34-0010-ab89-a0d2-2af1fb664bd3"
		},
		{
			"folder": "35c743d1-078b-1560-4d69-afb668adf4c5",
			"id": "c06f7f3d-1780-b1ca-100f-f36798db7e99",
			"name": "Delete Hello Data",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "",
			"descriptionFormat": null,
			"description": "Delete the data created by the hello service.",
			"headers": "Content-Type: application/json\n",
			"method": "DELETE",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_hello}}",
			"preRequestScript": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "07fcff34-0010-ab89-a0d2-2af1fb664bd3"
		},
		{
			"folder": "45030304-abb8-a6fd-616c-f3c7d929ac61",
			"id": "c1f30a65-8da7-5af6-e11c-c92bcf853274",
			"name": "Delete Before Complete - Confirm Delete",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": "html",
			"description": "Part of a sequence of requests that verifies that a job can be deleted while it is in propgress.\nAttempt to get the status of the deleted asynchronous crop job.",
			"headers": "Content-Type: application/json\n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-svcs-prevgen.{{domain}}/cropasync/status/{{jobId_del}}",
			"preRequestScript": "",
			"tests": "tests[\"Status code is 404 (Bug #10041)\"] = responseCode.code === 404;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "07fcff34-0010-ab89-a0d2-2af1fb664bd3"
		},
		{
			"folder": "99262cd1-2504-0c3f-4281-f162b21ceef0",
			"id": "c1fe1483-5d90-1913-fea4-ab4493e559b0",
			"name": "Crop Async",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Create a asynchronous crop job on an image in the s3 bucket.",
			"headers": "Content-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-svcs-prevgen.{{domain}}/cropasync",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.jobId')) {\n    postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"collectionId": "07fcff34-0010-ab89-a0d2-2af1fb664bd3",
			"rawModeData": "{\n    \"source\": {\n        \"domain\": \"s3.amazonaws.com\",\n        \"bucketName\": \"pz-svcs-prevgen\",\n        \"fileName\": \"nasa_land_ocean_ice.tif\"\n    },\n    \"function\": \"crop\",\n    \"bounds\": {\n        \"minx\": -140.00,\n        \"miny\": 10.00,\n        \"maxx\": -60.00,\n        \"maxy\": 70.00\n    }\n}"
		},
		{
			"folder": "c7a2a43d-e1c5-8fda-1e2e-589814dbe35c",
			"id": "d3909c48-230d-0a50-5be4-032ed9e2735b",
			"name": "lightning",
			"dataMode": "params",
			"data": null,
			"rawModeData": null,
			"descriptionFormat": "html",
			"description": "Check that the latest lightning strike (if any) is returned.",
			"headers": "",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pzsvc-hello.{{domain}}/lightning",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'strike')) {\n    tests[\"'strike' is a boolean\"] = typeof data.strike === 'boolean';\n    if (testLevels(tests, data, 'lat')) {\n        tests[\"Valid lat\"] = data.lat >= -90 && data.lat <= 90;\n    }\n    if (testLevels(tests, data, 'lon')) {\n        tests[\"Valid lon\"] = data.lon >= -180 && data.lon <= 180;\n    }\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"collectionId": "07fcff34-0010-ab89-a0d2-2af1fb664bd3"
		},
		{
			"id": "d46cb0b8-1e39-68a1-d028-45d26dcd4727",
			"headers": "",
			"url": "https://pz-svcs-prevgen.{{domain}}/",
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\"< < < < < < < < PREVIEW - CRITICAL > > > > > > > >\");\nconsole.log(\"    These tests represent basic functionality.    \");\nconsole.log(\"         DO NOT PUSH if these tests fail.         \");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\npostman.setEnvironmentVariable('retry_loop',0);\npostman.setEnvironmentVariable('max_retries', 9);\npostman.setEnvironmentVariable('croppedURL','https://pz-gateway.geointservices.io/fakeurl');\npostman.setEnvironmentVariable('jobId','');\npostman.setEnvironmentVariable('serviceId_norm','');\npostman.setEnvironmentVariable('jobId_norm','');\npostman.setEnvironmentVariable('dataId_norm','');\npostman.setEnvironmentVariable('serviceId_async','');\npostman.setEnvironmentVariable('jobId_async','');\npostman.setEnvironmentVariable('dataId_async','');",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1489434487255,
			"name": "Hello Preview Generator!",
			"description": "Simple Health check to Preview Generator.  Postman Environemnt Variables are initialized in this step.",
			"collectionId": "07fcff34-0010-ab89-a0d2-2af1fb664bd3"
		},
		{
			"folder": "ff19cac1-72d1-4bd3-70ce-9b77174fb1c9",
			"id": "d4b91e08-c1e4-d5f3-38b3-5bd8e45c1f1a",
			"name": "Check Resulting Lightning dataId",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": "html",
			"description": "Validate the output of the lightning service job when run through Piazza.",
			"headers": "",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_lightning}}",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "07fcff34-0010-ab89-a0d2-2af1fb664bd3"
		},
		{
			"folder": "ff19cac1-72d1-4bd3-70ce-9b77174fb1c9",
			"id": "dc387304-e304-6f7d-3c20-68fccb741845",
			"name": "Register Lightning Service",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Check that the lightning service (as a GET) can be registered through Piazza.",
			"headers": "Content-Type: application/json\nsize: 30\nfrom: 0\nkey: stamp\norder: true\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/service",
			"preRequestScript": "",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.serviceId', 'string')) {\n    postman.setEnvironmentVariable(\"serviceId_lightning\",data.data.serviceId);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "07fcff34-0010-ab89-a0d2-2af1fb664bd3",
			"rawModeData": "{\n  \"url\" : \"https://pzsvc-hello.{{domain}}/lightning\",\n  \"timeout\" : \"180000\",\n  \"method\" : \"GET\",\n  \"contractUrl\" : \"https://pzsvc-hello.{{domain}}/lightning\",\n  \"resourceMetadata\" : {\n    \"name\" : \"hello test\",\n    \"description\" : \"hello says hello ... with lightning!\",\n    \"classType\": {\n      \"classification\": \"UNCLASSIFIED\"\n    }\n  }\n}"
		},
		{
			"folder": "ff19cac1-72d1-4bd3-70ce-9b77174fb1c9",
			"id": "e63bcc82-1021-9517-03a3-9771141bdfa5",
			"name": "Check Lightning Job Status",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": "html",
			"description": "Check that the lightning service job was successful.",
			"headers": "Content-Type: application/json\n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/job/{{jobId_lightning}}",
			"preRequestScript": "",
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.status')) {\n    if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Check Lightning Job Status');\n            wait(1000);\n        }\n        else {\n            tests[\"Job finished in time\"] = false;\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n    else if (data.data.status === 'Success') {\n        postman.setEnvironmentVariable('retry_loop',0);\n        tests[\"Job finished in time\"] = true;\n        if (testLevels(tests, data, 'data.result.dataId')) {\n            postman.setEnvironmentVariable(\"dataId_lightning\", data.data.result.dataId);\n        }\n    }\n    else {\n        tests[\"status should not be \" + data.data.status] = false;\n        postman.setEnvironmentVariable('retry_loop',0);\n    }\n}\nif (testLevels(tests, data, 'data.createdBy')) {\n    tests[\"Correct createdBy\"] = data.data.createdBy === postman.getEnvironmentVariable('username');\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "07fcff34-0010-ab89-a0d2-2af1fb664bd3"
		},
		{
			"folder": "ff19cac1-72d1-4bd3-70ce-9b77174fb1c9",
			"id": "e9099ce0-e930-90ce-a048-0c1a363ef840",
			"name": "Check Resulting Hello dataId",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": "html",
			"description": "",
			"headers": "",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_hello}}",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "07fcff34-0010-ab89-a0d2-2af1fb664bd3"
		},
		{
			"folder": "ff19cac1-72d1-4bd3-70ce-9b77174fb1c9",
			"id": "eb1e456a-1bc2-4c49-3203-954f387dde53",
			"name": "Create Lightning Job",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Create a lightning job through Piazza.",
			"headers": "Content-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/job",
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.jobId', 'string')) {\n    tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n    postman.setEnvironmentVariable(\"jobId_lightning\",data.data.jobId);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "07fcff34-0010-ab89-a0d2-2af1fb664bd3",
			"rawModeData": "{\n    \"type\": \"execute-service\",\n    \"data\": {\n        \"serviceId\": \"{{serviceId_lightning}}\",\n        \"dataInputs\" : {}, \n        \"dataOutput\": [{\n            \"mimeType\" : \"application/json\",          \n            \"type\" : \"text\"\n        }]\n    }\n}"
		},
		{
			"folder": "6f667756-0bbd-bdae-a365-66b143ee3b3f",
			"id": "ec23a0da-5633-9d1c-85e6-dfd6b0ed8935",
			"name": "Delete Asynch Service",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": "html",
			"description": "Unregister the asynchronous crop service from Piazza.",
			"headers": "",
			"method": "DELETE",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId_async}}",
			"preRequestScript": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "07fcff34-0010-ab89-a0d2-2af1fb664bd3"
		},
		{
			"folder": "826545a7-9851-46ae-c4ec-fa1966db2362",
			"id": "f12324aa-7eab-7795-40fe-ff46eb2aab49",
			"name": "Register Normal Service",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Register the synchronous crop service through Piazza.",
			"headers": "Content-Type: application/json\nsize: 30\nfrom: 0\nkey: stamp\norder: true\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/service",
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\" < < < < < < < < PREVIEW - IMPORTANT > > > > > > > > \");\nconsole.log(\"      These tests represent important features.      \");\nconsole.log(\"Use extreme caution when pushing if these tests fail.\");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.serviceId', 'string')) {\n    postman.setEnvironmentVariable(\"serviceId_norm\",data.data.serviceId);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "07fcff34-0010-ab89-a0d2-2af1fb664bd3",
			"rawModeData": "{\n  \"url\" : \"https://pz-svcs-prevgen.{{domain}}/crop\",\n  \"timeout\" : \"180000\",\n  \"method\" : \"POST\",\n  \"contractUrl\" : \"https://pz-svcs-prevgen.{{domain}}/crop\",\n  \"resourceMetadata\" : {\n    \"name\" : \"pz-svcs-prevgen crop raster test\",\n    \"description\" : \"pz-svcs-prevgen is an awesome sample crop image external service.\",\n    \"classType\": {\n      \"classification\": \"UNCLASSIFIED\"\n    }\n  }\n}"
		}
	]
}