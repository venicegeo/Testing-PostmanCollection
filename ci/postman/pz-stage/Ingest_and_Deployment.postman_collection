{
	"id": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
	"name": "Ingest_and_Deployment",
	"description": "",
	"order": [],
	"folders": [
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"description": "",
			"id": "17e8a8db-12f5-c81b-4e5b-82b7f1420a09",
			"lastRevision": 657378380,
			"lastUpdatedBy": "699425",
			"name": "1_Startup",
			"order": [
				"8dd63204-ede6-6a79-d203-2f981dd8870a",
				"d81bae55-bb44-e960-8c5f-5ab77fdbe72d",
				"25c9808c-c57a-67bb-1aba-8141bb74e7e5",
				"a0b17535-532b-1430-ba19-d6c48b9ecd82",
				"dbf61b56-d9c9-a9d5-5548-9ff76e5c8cba",
				"0f893e8d-3a66-1c4c-501e-a76aac3a69ad",
				"28935e7f-02b7-0032-7ea2-7c1c7f227a3a",
				"d42fe417-d455-19ce-fa34-98480ad31817",
				"f34b3995-c211-b38e-44c1-0ffadc4c0a6a",
				"a9dcf3be-7312-35fb-48e1-fdb79420690b",
				"befaada0-9ba2-caa8-81d6-5cf5367af5d5",
				"45feda0c-b5cc-cf6e-aa0d-ad2f9558a1b9"
			],
			"owner": "699425"
		},
		{
			"description": "",
			"id": "8c5d6086-e0a0-057e-55c8-e356ef1cae8d",
			"lastRevision": 657391007,
			"lastUpdatedBy": "699425",
			"name": "2_Critical",
			"order": [
				"486328ee-6c58-4a75-0742-488f610f9a13",
				"f535272c-e862-97eb-cb88-8d87cb12a167",
				"a0f390c9-22d3-b38b-1a37-3b4ed5bb52bf",
				"f0c0af14-29fb-bcf4-844c-1cea79373d93",
				"6e0ddb52-3da6-a62b-c32e-3f5740aac73d",
				"c91de108-42ae-e0d2-8e26-c22abcf43718",
				"9f7880f2-49d9-c8d6-1e87-5164634fba27",
				"9cc792d2-4473-7557-bb60-0bcf44b29ce1",
				"94c5d1fc-fa4f-dbb1-535f-61c14774f072",
				"c0c39868-8475-c607-fdb4-b6a1784d7205",
				"7945c76c-fb2f-d4be-8c68-4b883847902c",
				"df42a862-32ee-8191-c99c-222d5f397810",
				"674b0829-8175-9433-c789-9a86cff25f34",
				"155c7a62-0595-e14c-ab6f-4408d451e1cd"
			],
			"owner": "699425"
		},
		{
			"description": "",
			"id": "cc9daf7d-42ff-f62e-baf6-6982777d3ca2",
			"lastRevision": 695516849,
			"lastUpdatedBy": "699425",
			"name": "3_Important",
			"order": [
				"e324b993-d03c-abc4-7ac6-ec0a6fc13535",
				"e1dbba77-3657-4875-33cb-6368e9fd9f2b",
				"10d11622-39d1-414f-b959-d153973849e2",
				"c10a59ee-d08c-48c5-b8b7-676345673a90",
				"234e6a56-d982-5de3-453c-dcae55f93f87",
				"33c9840f-a208-1d25-f86a-b514c7f6434a",
				"14b5af2a-5436-ef79-8f5a-228735052685",
				"cd64dd9a-30ca-c8da-e1ce-4e17e99dfb43",
				"798c3664-62e7-a010-7bc9-b6bd9c4e6576",
				"a9b7e500-3c99-c2fc-0ba9-55fa8a049e08",
				"2d05af9b-4d59-95bf-3551-bd2a08e0dcb6",
				"a13f67ad-ad40-569f-29f6-21343f0889b3",
				"758a61cf-e95d-8ad1-4e6f-fb0a7d3d40a0",
				"369eb786-5bb2-7c1a-8572-505663d7195b",
				"47fc77ab-73e0-ed3a-1aa5-aa1da435f868",
				"f3de1268-2db6-c48a-5926-5045ff95e973",
				"6fa78b4f-932d-4dac-9a70-2339a7f45d40",
				"87b2bcac-5897-ed07-09e5-f2b8b27cb6e9",
				"ab39292f-2466-1e67-4934-fcda0178e59a"
			],
			"owner": "699425"
		},
		{
			"description": "",
			"id": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"lastRevision": 837545753,
			"lastUpdatedBy": "699425",
			"name": "4_Low",
			"order": [
				"aa468395-a868-76ff-b905-56f2a002ea99",
				"b0ed611f-c055-c916-f590-a62d0801cea1",
				"e1f15481-e3fd-64dd-de2d-feef3ce6ffff",
				"c38641a0-3320-2c3e-2597-33c4c173cc3c",
				"4401d44a-fb95-e00b-1a3e-cad4dc1d1a60",
				"94f9c98b-4680-fed1-7ae7-490c3d743dda",
				"93d469d4-ba66-8dd5-475f-c64761c15712",
				"974ca5fb-5239-545d-ac22-a4cbf5aeeef9",
				"e0144894-8d00-c384-e286-9b858220540d",
				"02a9d934-b858-0291-5616-e87feff824a4",
				"36bd0e76-1f4b-3d13-451d-ea6b6de6afba",
				"524be54c-92a3-e706-d018-8374287e9c52",
				"49a8793b-c00a-0a51-fb69-1ec4dc4719ee",
				"521d4871-6cee-0715-d6fa-ca9b85caab84",
				"b30814ba-627c-a2a2-fc7f-69e3cea7a388",
				"0b84a8c8-673c-cec3-9818-3d8639635e20",
				"de7293da-5bcc-cc27-2c1b-fd9ce5fe327e",
				"d6b91e1a-1ccd-cca5-9a02-f597b552c986",
				"ab37606f-d67f-526a-f5c5-d733ee179edf",
				"6de3ba54-091d-d836-bea1-960749b10f52",
				"a8c4ba92-6790-42be-4172-9e823c456909",
				"2f238c97-184e-5750-e310-0817771248f4",
				"54419072-1683-161b-115f-865562d3320d",
				"2683d240-8f0b-2f00-f8a3-b48814593fe3",
				"b6cf60c7-826f-0435-f24f-027b52be8a69",
				"1b5ec49d-1212-a6d4-ddf1-313ed4ca6bf9",
				"65d8c7bf-f7fc-7c2e-fff1-908573085b72",
				"9e217a32-78d4-25f6-ee18-1b4ff118c82d",
				"8dc7c1e8-aa20-ecd9-6a0c-00fb0300646d",
				"c2ec915c-e6d5-759a-251b-0cfa33760729",
				"87eb4860-6bb3-fe8e-ed57-ebf670de92c5",
				"a4cfb317-ef4f-72fd-6091-db7625233f1e",
				"36ae7e32-2c43-6e99-8cfd-836322831ef1",
				"b7ccfe3b-7ff6-332a-1712-72d2e005a3de",
				"d2e77455-ea60-90ca-a3aa-11d6adb2790a",
				"8189b31e-cf59-6180-68d2-c4c76c7d0037",
				"b126061e-c83f-80e1-9d0f-1fafa02bebe3",
				"21d9b17c-b6d2-53ab-bdaa-ce7fd2dfa4fb",
				"9647097d-9b8f-525b-c6ca-c26aa3b24557",
				"df4c09ee-b9c0-51c5-3302-1c1f335cab01",
				"f3c90946-1a2e-46e2-1485-3de249cdd466",
				"3e9d0c5d-64b4-90f6-f3ae-5b845eaa2816",
				"9065ecf5-a000-6cbc-f05b-9d9046e0c5c3",
				"ab674007-7511-950b-d794-d4fd4a3afb03",
				"d761df0b-c6f5-71de-6762-50a8c1cfeb7c",
				"4734c091-ff7f-aeeb-6155-5319750daf8c",
				"db32ecc1-d12d-05cf-1550-7d51f6c7145b",
				"630c2b07-184a-dc75-5cf2-13302603187a",
				"6af947e8-ae49-6d68-cf73-2bb7fff1a7d0",
				"7c7daea9-87bf-b938-6779-e61f04d16fab",
				"ad4c398b-e5c3-6106-3792-16ef8cf1a86f",
				"8ca4b1e4-b53d-988e-a7e5-f3e7010f1dfb",
				"9c3527f3-0519-3cdd-c175-172f7d5758cb",
				"79331ad8-3e53-7b3f-e745-9a74e05b934e",
				"5ed8f4b2-e203-78af-37d9-af4f96104648"
			],
			"owner": "699425",
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00"
		},
		{
			"description": "",
			"id": "3fdd6abc-222f-5021-48a6-3222396757d4",
			"lastRevision": 837545347,
			"lastUpdatedBy": "699425",
			"name": "5_Teardown",
			"order": [
				"39e87028-ddd1-d702-b78c-01c8721196c2",
				"4fa6a70c-498e-e3f7-9611-6439493bb12c",
				"2bd939cc-c166-299b-7259-d07beb4d30a4",
				"d49e92d8-b4ef-2af1-ddc5-6cd9d264890d",
				"d03bde33-baaf-3b10-9b43-00b53cd57af4"
			],
			"owner": "699425"
		}
	],
	"folders_order": [
		"17e8a8db-12f5-c81b-4e5b-82b7f1420a09",
		"8c5d6086-e0a0-057e-55c8-e356ef1cae8d",
		"cc9daf7d-42ff-f62e-baf6-6982777d3ca2",
		"eab39bb3-61a3-84aa-43ab-eac21622eb16",
		"3fdd6abc-222f-5021-48a6-3222396757d4"
	],
	"timestamp": 0,
	"owner": "699425",
	"public": false,
	"requests": [
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "02a9d934-b858-0291-5616-e87feff824a4",
			"name": "Get Geojson Deployment Metadata Details",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Validate the details of the geoJSON deployment metadata.",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId_geojson}}",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.deployment.deploymentId')) {\n    tests[\"Correct deploymentId returned\"] = data.data.deployment.deploymentId === postman.getEnvironmentVariable('deploymentId_geojson');\n}\ntestLevels(tests, data, 'data.deployment.capabilitiesUrl');\nif (testLevels(tests, data, 'data.deployment.dataId')) {\n    tests[\"Correct dataId\"] = data.data.deployment.dataId === postman.getEnvironmentVariable('dataId_geojson');\n}\nif (testLevels(tests, data, 'data.deployment.layer')) {\n    tests[\"Layer matches dataId\"] = data.data.deployment.layer === postman.getEnvironmentVariable('dataId_geojson');\n}\nif (testLevels(tests, data, 'data.deployment.createdOn', 'string')) {\n    tests[\"createdOn Date Generated\"] = data.data.deployment.createdOn.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);\n    tests[\"Created in the last half hour\"] = (Date.now() - Date.parse(data.data.deployment.createdOn)) <= 1800000;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId_shape}}\",\r\n  \"deploymentGroupId\": \"{{deploymentGroupId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "0b84a8c8-673c-cec3-9818-3d8639635e20",
			"name": "Complex Query - Search Name (TestShape.zip)",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Check that the Shape deployment (and no other deploymens) created in this suite of tests are present in the result of an Elastic Search query.\nThis query is checking that \"dataResource.metadata.name\" contains \"TestShape.zip\".",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/data/query",
			"preRequestScript": null,
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200 (Bug #11888)\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nvar found_shape = false;\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'dataId', 'skip', 'data[]')) {\n            found_shape = (found_shape || data.data[i].dataId === postman.getEnvironmentVariable('dataId_shape'));\n        }\n    }\n}\n\ntests[\"Ingested GeoJSON data found in list\"] = found_shape;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\n    \"query\": {\n        \"match\": {\n            \"dataResource.metadata.name\": \"foo\"\n        }\n    }\n}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"collectionRequestId": "0f893e8d-3a66-1c4c-501e-a76aac3a69ad",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Check the job status of the ingest geoJSON job to get the dataId.  Repeat up to 10 times until the job is successful.",
			"folder": "17e8a8db-12f5-c81b-4e5b-82b7f1420a09",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "0f893e8d-3a66-1c4c-501e-a76aac3a69ad",
			"isFromCollection": true,
			"method": "GET",
			"name": "Get GeoJSON dataId",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.status')) {\n    if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Get GeoJSON dataId');\n            wait(1000);\n        }\n        else {\n            tests[\"Job finished in time\"] = false;\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n    else if (data.data.status === 'Success') {\n        postman.setEnvironmentVariable('retry_loop',0);\n        tests[\"Job finished in time\"] = true;\n        if (testLevels(tests, data, 'data.result.dataId')) {\n            postman.setEnvironmentVariable(\"dataId_geojson\", data.data.result.dataId);\n        }\n    }\n    else {\n        tests[\"status should not be \" + data.data.status] = false;\n        postman.setEnvironmentVariable('retry_loop',0);\n    }\n}",
			"time": 1485367101905,
			"url": "https://pz-gateway.{{domain}}/job/{{jobId_geojson}}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"collectionRequestId": "10d11622-39d1-414f-b959-d153973849e2",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that you can get the metadata of the locally ingested raster.",
			"descriptionFormat": "html",
			"folder": "cc9daf7d-42ff-f62e-baf6-6982777d3ca2",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "10d11622-39d1-414f-b959-d153973849e2",
			"isFromCollection": true,
			"method": "GET",
			"name": "Get Raster Metadata",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'data.dataId')) {\n    tests[\"Correct dataId returned\"] = data.data.dataId === postman.getEnvironmentVariable('dataId_raster');\n}",
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_raster}}",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Get the geoJSON deployment metadata.",
			"descriptionFormat": "html",
			"folder": "cc9daf7d-42ff-f62e-baf6-6982777d3ca2",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "14b5af2a-5436-ef79-8f5a-228735052685",
			"method": "GET",
			"name": "Get Geojson Deployment Metadata",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.deployment.deploymentId')) {\n    tests[\"Correct deploymentId returned\"] = data.data.deployment.deploymentId === postman.getEnvironmentVariable('deploymentId_geojson');\n}\nif (testLevels(tests, data, 'data.deployment.capabilitiesUrl') && !postman.getEnvironmentVariable('capabilitiesUrl').match('garbage')) {\n    postman.setEnvironmentVariable('capabilitiesUrl', data.data.deployment.capabilitiesUrl);\n}",
			"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId_geojson}}",
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId_shape}}\",\r\n  \"deploymentGroupId\": \"{{deploymentGroupId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Check that the Shape deployment to a group was successful to get the deploymentId.  Repeat up to 10 times until the job is successful.",
			"descriptionFormat": "html",
			"folder": "8c5d6086-e0a0-057e-55c8-e356ef1cae8d",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "155c7a62-0595-e14c-ab6f-4408d451e1cd",
			"method": "GET",
			"name": "Get Shape deploymentId (in Group)",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\nvar data = parseJSON(tests, responseBody);\n\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.status')) {\n    if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Get Shape deploymentId (in Group)');\n            wait(1000);\n        }\n        else {\n            tests[\"Job finished in time (Bug #11544)\"] = false;\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n    else if (data.data.status === 'Success') {\n        postman.setEnvironmentVariable('retry_loop',0);\n        tests[\"Job finished in time\"] = true;\n        if (testLevels(tests, data, 'data.result.deployment.deploymentId')) {\n            postman.setEnvironmentVariable(\"deploymentId_shape\", data.data.result.deployment.deploymentId);\n        }\n    }\n    else {\n        tests[\"status should not be \" + data.data.status] = false;\n        postman.setEnvironmentVariable('retry_loop',0);\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Verify that the data that has already been deleted cannot be deleted again.",
			"descriptionFormat": "html",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "1b5ec49d-1212-a6d4-ddf1-313ed4ca6bf9",
			"method": "DELETE",
			"name": "Deleted Data - Delete Again",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 404\"] = responseCode.code === 404;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ee]rror/);\n}\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Not Found Message\"] = data.message.match(/[Nn]o/) && data.message.match(/[Ff]ound/);\n    tests[\"Deployment Id included in message\"] = data.message.match(postman.getEnvironmentVariable('dataId_geojson'));\n}",
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_geojson}}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt to deploy ingested text to geoserver.",
			"descriptionFormat": "html",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "21d9b17c-b6d2-53ab-bdaa-ce7fd2dfa4fb",
			"method": "POST",
			"name": "Deploy Text",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.jobId')) {\n    postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n}",
			"url": "https://pz-gateway.{{domain}}/deployment",
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId_text}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that you can get the metadata of the ingested Shape.\nVerify that the previous metadata update was successful.",
			"descriptionFormat": "html",
			"folder": "cc9daf7d-42ff-f62e-baf6-6982777d3ca2",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "234e6a56-d982-5de3-453c-dcae55f93f87",
			"method": "GET",
			"name": "Get Shape Metadata",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'data.dataId')) {\n    tests[\"Correct dataId returned\"] = data.data.dataId === postman.getEnvironmentVariable('dataId_shape');\n}\nif (testLevels(tests, data, 'data.metadata.name')) {\n    tests[\"Update was successful\"] = data.data.metadata.name === 'foo';\n}",
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_shape}}",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Ingest text.",
			"descriptionFormat": "html",
			"folder": "17e8a8db-12f5-c81b-4e5b-82b7f1420a09",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "25c9808c-c57a-67bb-1aba-8141bb74e7e5",
			"method": "POST",
			"name": "Ingest Text",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.jobId')) {\n    postman.setEnvironmentVariable(\"jobId_text\",data.data.jobId);\n}",
			"url": "https://pz-gateway.{{domain}}/data",
			"rawModeData": "{\r\n  \"data\": {\r\n    \"dataType\": {\r\n        \"content\": \"{{Ingested Text}}\",\r\n        \"type\": \"text\"\r\n    },\r\n    \"metadata\": {\r\n        \"description\": \"A file for integration tests.\"\r\n    }\r\n  },\r\n  \"host\": false,\r\n  \"type\": \"ingest\"\r\n}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Check that the job to deploy to a deleted deploymentGroup failed.",
			"descriptionFormat": "html",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "2683d240-8f0b-2f00-f8a3-b48814593fe3",
			"method": "GET",
			"name": "Deleted Group - Deploy - Job Status",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": null,
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.status')) {\n    if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Deleted Group - Deploy - Job Status');\n            wait(1000);\n        }\n        else {\n            tests[\"Job finished in time\"] = false;\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n    else if (data.data.status === 'Error') {\n        postman.setEnvironmentVariable('retry_loop',0);\n        tests[\"Job finished in time\"] = true;\n        if (testLevels(tests, data, 'data.result.details', 'string')) {\n            tests[\"Details state Deployment Group does not exist\"] = data.data.result.details.match(/do.*no.*exist/i);\n            tests[\"deploymentGroupId included in details\"] = data.data.result.details.match(postman.getEnvironmentVariable('deploymentGroupId'));\n        }\n    }\n    else {\n        tests[\"status should not be \" + data.data.status + \" (Bug #9223)\"] = false;\n        postman.setEnvironmentVariable('retry_loop',0);\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}"
		},
		{
			"id": "28935e7f-02b7-0032-7ea2-7c1c7f227a3a",
			"headers": "Authorization: \n",
			"headerData": [
				{
					"key": "Authorization",
					"value": "",
					"description": "",
					"enabled": true
				}
			],
			"url": "https://pz-gateway.{{domain}}/data/file",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [
				{
					"enabled": true,
					"key": "data",
					"type": "text",
					"value": "{ \"type\": \"ingest\", \"host\": \"true\", \"data\" : { \"dataType\": { \"type\": \"raster\" }, \"metadata\": { \"name\": \"terrametrics.tif\", \"description\": \"A file for integration tests.\", \"classType\": { \"classification\": \"unclassified\" } } } }"
				},
				{
					"enabled": true,
					"key": "file",
					"type": "file",
					"value": "terrametrics.tif"
				}
			],
			"dataMode": "params",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.jobId')) {\n    postman.setEnvironmentVariable(\"jobId_raster\",data.data.jobId);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1503692416625,
			"name": "Ingest Raster",
			"description": "Ingest a local raster file into piazza.",
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Delete the text dataId used in this suite of tests.",
			"descriptionFormat": "html",
			"folder": "3fdd6abc-222f-5021-48a6-3222396757d4",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "2bd939cc-c166-299b-7259-d07beb4d30a4",
			"method": "DELETE",
			"name": "Delete Text Data",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_text}}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Check that the \"capabilitiesUrl\" from deployment metadata is a valid URL.",
			"descriptionFormat": "html",
			"folder": "cc9daf7d-42ff-f62e-baf6-6982777d3ca2",
			"headers": "",
			"helperAttributes": {},
			"id": "2d05af9b-4d59-95bf-3551-bd2a08e0dcb6",
			"method": "GET",
			"name": "Validate capabilitiesUrl",
			"pathVariables": {},
			"preRequestScript": null,
			"rawModeData": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"url": "{{capabilitiesUrl}}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Verify that a deployment that has already been deleted cannot be deleted again.",
			"descriptionFormat": "html",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "2f238c97-184e-5750-e310-0817771248f4",
			"method": "DELETE",
			"name": "Delete Deployment Group Again",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 404\"] = responseCode.code === 404;\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Does not exist message\"] = data.message.match(/no.*exist/i);\n}",
			"url": "https://pz-gateway.{{domain}}/deployment/group/{{deploymentGroupId}}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that you can get the metadata of the externally ingested raster.",
			"descriptionFormat": "html",
			"folder": "cc9daf7d-42ff-f62e-baf6-6982777d3ca2",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "33c9840f-a208-1d25-f86a-b514c7f6434a",
			"method": "GET",
			"name": "Get External Raster Metadata",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'data.dataId')) {\n    tests[\"Correct dataId returned\"] = data.data.dataId === postman.getEnvironmentVariable('dataId_external');\n}",
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_external}}",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"id": "369eb786-5bb2-7c1a-8572-505663d7195b",
			"headers": "Authorization: \n",
			"headerData": [
				{
					"key": "Authorization",
					"value": "",
					"description": "",
					"enabled": true
				}
			],
			"url": "https://pz-gateway.{{domain}}/data/file",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [
				{
					"enabled": true,
					"key": "data",
					"type": "text",
					"value": "{ \"type\": \"ingest\", \"host\": \"true\", \"data\" : { \"dataType\": { \"type\": \"geojson\" }, \"metadata\": { \"name\": \"Test.geojson\", \"description\": \"A file for integration tests.\", \"classType\": { \"classification\": \"unclassified\" } } } }"
				},
				{
					"enabled": true,
					"key": "file",
					"type": "file",
					"value": "beachfront.geojson"
				}
			],
			"dataMode": "params",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.jobId')) {\n    postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1503692549704,
			"name": "Large - Ingest GeoJSON",
			"description": "Ingest a large (~ 5MB) geoJSON file into piazza.",
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Query the /data/query (Elastic Search) endpoint to verify that the deleted dataId is not present in the result.",
			"descriptionFormat": "html",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "36ae7e32-2c43-6e99-8cfd-836322831ef1",
			"method": "POST",
			"name": "Deleted Data - Verify Removed from ES",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200 (Bug #11888)\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nvar found_geojson = false;\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'dataId', 'skip', 'data[]')) {\n            found_geojson = (found_geojson || data.data[i].dataId === postman.getEnvironmentVariable('dataId_geojson'));\n        }\n    }\n}\n\ntests[\"Ingested GeoJSON removed from list (Bug #9174)\"] = !found_geojson;",
			"url": "https://pz-gateway.{{domain}}/data/query",
			"rawModeData": "{\n    \"query\": {\n        \"match\": {\n            \"dataResource.metadata.description\": \"integration\"\n        }\n    }\n}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Validate the details of the (Local) Raster deployment metadata.",
			"descriptionFormat": "html",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "36bd0e76-1f4b-3d13-451d-ea6b6de6afba",
			"method": "GET",
			"name": "Get Raster Deployment Metadata Details",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.deployment.deploymentId')) {\n    tests[\"Correct deploymentId returned\"] = data.data.deployment.deploymentId === postman.getEnvironmentVariable('deploymentId_raster');\n}\ntestLevels(tests, data, 'data.deployment.capabilitiesUrl');\nif (testLevels(tests, data, 'data.deployment.dataId')) {\n    tests[\"Correct dataId\"] = data.data.deployment.dataId === postman.getEnvironmentVariable('dataId_raster');\n}\nif (testLevels(tests, data, 'data.deployment.layer')) {\n    tests[\"Layer matches dataId\"] = data.data.deployment.layer === postman.getEnvironmentVariable('dataId_raster');\n}\nif (testLevels(tests, data, 'data.deployment.createdOn', 'string')) {\n    tests[\"createdOn Date Generated\"] = data.data.deployment.createdOn.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);\n    tests[\"Created in the last half hour\"] = (Date.now() - Date.parse(data.data.deployment.createdOn)) <= 1800000;\n}",
			"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId_raster}}",
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId_shape}}\",\r\n  \"deploymentGroupId\": \"{{deploymentGroupId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Delete the (local) raster dataId used in this suite of tests.",
			"descriptionFormat": "html",
			"folder": "3fdd6abc-222f-5021-48a6-3222396757d4",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "39e87028-ddd1-d702-b78c-01c8721196c2",
			"method": "DELETE",
			"name": "Delete Raster Data",
			"pathVariables": {},
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\" < < < < < < < < < < < < TEAR-DOWN > > > > > > > > > > > \");\nconsole.log(\"These tests destroy any items created by previous tests. \");\nconsole.log(\" These tests represent important features, like DELETEs. \");\nconsole.log(\"            DO NOT PUSH if these tests fail.             \");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"rawModeData": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_raster}}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt a deployment without specifying the \"dataId\" parameter.",
			"descriptionFormat": "html",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "3e9d0c5d-64b4-90f6-f3ae-5b845eaa2816",
			"method": "POST",
			"name": "Deploy - No dataId",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'errors', 'array')) {\n    if (testLevels(tests, data.errors[0], 'field', 'skip', 'errors[0].')) {\n        tests[\"Problem with deploymentType\"] = data.errors[0].field === 'dataId';\n    }\n    if (testLevels(tests, data.errors[0], 'defaultMessage', 'string', 'errors[0].')) {\n        tests[\"Cannot Be Null Message\"] = data.errors[0].defaultMessage.match(/null/i);\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/deployment",
			"rawModeData": "{\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Validate the details of the externally ingested metadata.",
			"descriptionFormat": "html",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "4401d44a-fb95-e00b-1a3e-cad4dc1d1a60",
			"method": "GET",
			"name": "Get External Raster Metadata Details",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'data.dataId')) {\n    tests[\"Correct dataId\"] = data.data.dataId === postman.getEnvironmentVariable('dataId_external');\n}\nif (testLevels(tests, data, 'data.dataType.type')) {\n    tests[\"Type is 'geojson'\"] = data.data.dataType.type === 'raster';\n}\nif (testLevels(tests, data, 'data.metadata.description')) {\n    tests[\"Correct Description\"] = data.data.metadata.description === 'A file for integration tests.';\n}\nif (testLevels(tests, data, 'data.metadata.createdBy')) {\n    tests[\"Correct createdBy\"] = data.data.metadata.createdBy === postman.getEnvironmentVariable('username');\n}\nif (testLevels(tests, data, 'data.metadata.createdOn', 'string')) {\n    tests[\"Date Generated\"] = data.data.metadata.createdOn.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);\n    tests[\"Created in the last half hour\"] = (Date.now() - Date.parse(data.data.metadata.createdOn)) <= 1800000;\n}\nif (testLevels(tests, data, 'data.metadata.createdByJobId')) {\n    tests[\"Correct createdByJobId\"] = data.data.metadata.createdByJobId === postman.getEnvironmentVariable('jobId_external');\n}\nif (testLevels(tests, data, 'data.metadata.name')) {\n    tests[\"Correct name\"] = data.data.metadata.name === 'My Test raster external file';\n}\nif (testLevels(tests, data, 'data.spatialMetadata.minX')) {\n    tests[\"Correct minX\"] = data.data.spatialMetadata.minX === 496147.97;\n}\nif (testLevels(tests, data, 'data.spatialMetadata.maxX')) {\n    tests[\"Correct maxX\"] = data.data.spatialMetadata.maxX === 496545.97;\n}\nif (testLevels(tests, data, 'data.spatialMetadata.minY')) {\n    tests[\"Correct minY\"] = data.data.spatialMetadata.minY === 5422119.88;\n}\nif (testLevels(tests, data, 'data.spatialMetadata.maxY')) {\n    tests[\"Correct maxY\"] = data.data.spatialMetadata.maxY === 5422343.88;\n}",
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_external}}",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Check the job status of the ingestexternal raster job to get the dataId.  Repeat up to 10 times until the job is successful.",
			"descriptionFormat": "html",
			"folder": "17e8a8db-12f5-c81b-4e5b-82b7f1420a09",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "45feda0c-b5cc-cf6e-aa0d-ad2f9558a1b9",
			"method": "GET",
			"name": "Get External Raster dataId",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": null,
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.status')) {\n    if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Get External Raster dataId');\n            wait(1000);\n        }\n        else {\n            tests[\"Job finished in time\"] = false;\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n    else if (data.data.status === 'Success') {\n        postman.setEnvironmentVariable('retry_loop',0);\n        tests[\"Job finished in time\"] = true;\n        if (testLevels(tests, data, 'data.result.dataId')) {\n            postman.setEnvironmentVariable(\"dataId_external\", data.data.result.dataId);\n        }\n    }\n    else {\n        tests[\"status should not be \" + data.data.status] = false;\n        postman.setEnvironmentVariable('retry_loop',0);\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId_external}}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt a text ingest without specifying the \"dataType.type\" parameter.",
			"descriptionFormat": "html",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "4734c091-ff7f-aeeb-6155-5319750daf8c",
			"method": "POST",
			"name": "Ingest Text - No dataType.type",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Missing Type message\"] = data.message.match(/missing.*type/i);\n    tests[\"Mentions 'data.dataType' object\"] = data.message.match(/data\\.dataType/i);\n}",
			"url": "https://pz-gateway.{{domain}}/data",
			"rawModeData": "{\r\n  \"data\": {\r\n    \"dataType\": {\r\n        \"content\": \"{{Ingested Text}}\"\r\n    },\r\n    \"metadata\": {\r\n        \"description\": \"A file for integration tests.\"\r\n    }\r\n  },\r\n  \"type\": \"ingest\",\r\n  \"host\": false\r\n}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Check the job status of the ingest large (~5 MB) geoJSON job to get the dataId.  Repeat up to 10 times until the job is successful.",
			"descriptionFormat": "html",
			"folder": "cc9daf7d-42ff-f62e-baf6-6982777d3ca2",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "47fc77ab-73e0-ed3a-1aa5-aa1da435f868",
			"method": "GET",
			"name": "Large - Get GeoJSON dataId",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\nvar data = parseJSON(tests, responseBody);\n\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.status')) {\n    if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Large - Get GeoJSON dataId');\n            wait(3000); // Longer because of larger file.\n        }\n        else {\n            tests[\"Job finished in time\"] = false;\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n    else if (data.data.status === 'Success') {\n        postman.setEnvironmentVariable('retry_loop',0);\n        tests[\"Job finished in time\"] = true;\n        if (testLevels(tests, data, 'data.result.dataId')) {\n            postman.setEnvironmentVariable(\"dataId_geojson_large\", data.data.result.dataId);\n        }\n    }\n    else {\n        tests[\"status should not be \" + data.data.status] = false;\n        postman.setEnvironmentVariable('retry_loop',0);\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Get the raw text that was previously ingested.",
			"descriptionFormat": "html",
			"folder": "8c5d6086-e0a0-057e-55c8-e356ef1cae8d",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "486328ee-6c58-4a75-0742-488f610f9a13",
			"method": "GET",
			"name": "Download Text",
			"pathVariables": {},
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\"< < < < < < < < < < < CRITICAL > > > > > > > > > >\");\nconsole.log(\"    These tests represent basic functionality.    \");\nconsole.log(\"         DO NOT PUSH if these tests fail.         \");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Downloaded File has correct content\"] = responseBody === postman.getEnvironmentVariable(\"Ingested Text\");",
			"url": "https://pz-gateway.{{domain}}/file/{{dataId_text}}",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Validate the details of the (External) Raster deployment metadata.",
			"descriptionFormat": "html",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "49a8793b-c00a-0a51-fb69-1ec4dc4719ee",
			"method": "GET",
			"name": "Get External Raster Deployment Metadata Details",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.deployment.deploymentId')) {\n    tests[\"Correct deploymentId returned\"] = data.data.deployment.deploymentId === postman.getEnvironmentVariable('deploymentId_external');\n}\ntestLevels(tests, data, 'data.deployment.capabilitiesUrl');\nif (testLevels(tests, data, 'data.deployment.dataId')) {\n    tests[\"Correct dataId\"] = data.data.deployment.dataId === postman.getEnvironmentVariable('dataId_external');\n}\nif (testLevels(tests, data, 'data.deployment.layer')) {\n    tests[\"Layer matches dataId\"] = data.data.deployment.layer === postman.getEnvironmentVariable('dataId_external');\n}\nif (testLevels(tests, data, 'data.deployment.createdOn', 'string')) {\n    tests[\"createdOn Date Generated\"] = data.data.deployment.createdOn.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);\n    tests[\"Created in the last half hour\"] = (Date.now() - Date.parse(data.data.deployment.createdOn)) <= 1800000;\n}",
			"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId_external}}",
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId_shape}}\",\r\n  \"deploymentGroupId\": \"{{deploymentGroupId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Delete the shape dataId used in this suite of tests.",
			"descriptionFormat": "html",
			"folder": "3fdd6abc-222f-5021-48a6-3222396757d4",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "4fa6a70c-498e-e3f7-9611-6439493bb12c",
			"method": "DELETE",
			"name": "Delete Shape Data",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_shape}}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that the deployments created in this suite of tests are present in the result of an Elastic Search query.\nThis query is checking that \"dataResource.metadata.descritpion\" contains \"integration\".",
			"descriptionFormat": "html",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "521d4871-6cee-0715-d6fa-ca9b85caab84",
			"method": "POST",
			"name": "Complex Query - Search Description",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200 (Bug #11888)\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nvar found_geojson = false;\nvar found_raster = false;\nvar found_shape = false;\nvar found_text = false;\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'dataId', 'skip', 'data[]')) {\n            found_geojson = (found_geojson || data.data[i].dataId === postman.getEnvironmentVariable('dataId_geojson'));\n            found_raster = (found_raster || data.data[i].dataId === postman.getEnvironmentVariable('dataId_raster'));\n            found_shape = (found_shape || data.data[i].dataId === postman.getEnvironmentVariable('dataId_shape'));\n            found_text = (found_text || data.data[i].dataId === postman.getEnvironmentVariable('dataId_text'));\n        }\n    }\n}\n\ntests[\"Ingested GeoJSON data found in list\"] = found_geojson;\ntests[\"Ingested Raster data found in list\"] = found_raster;\ntests[\"Ingested Shape data found in list\"] = found_shape;\ntests[\"Ingested Text data found in list\"] = found_text;",
			"url": "https://pz-gateway.{{domain}}/data/query",
			"rawModeData": "{\n    \"query\": {\n        \"match\": {\n            \"dataResource.metadata.description\": \"integration\"\n        }\n    }\n}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Validate the details of the Shape deployment metadata.",
			"descriptionFormat": "html",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "524be54c-92a3-e706-d018-8374287e9c52",
			"method": "GET",
			"name": "Get Shape Deployment Metadata Details",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.deployment.deploymentId')) {\n    tests[\"Correct deploymentId returned\"] = data.data.deployment.deploymentId === postman.getEnvironmentVariable('deploymentId_shape');\n}\ntestLevels(tests, data, 'data.deployment.capabilitiesUrl');\nif (testLevels(tests, data, 'data.deployment.dataId')) {\n    tests[\"Correct dataId\"] = data.data.deployment.dataId === postman.getEnvironmentVariable('dataId_shape');\n}\nif (testLevels(tests, data, 'data.deployment.layer')) {\n    tests[\"Layer matches dataId\"] = data.data.deployment.layer === postman.getEnvironmentVariable('dataId_shape');\n}\nif (testLevels(tests, data, 'data.deployment.createdOn', 'string')) {\n    tests[\"createdOn Date Generated\"] = data.data.deployment.createdOn.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);\n    tests[\"Created in the last half hour\"] = (Date.now() - Date.parse(data.data.deployment.createdOn)) <= 1800000;\n}",
			"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId_shape}}",
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId_shape}}\",\r\n  \"deploymentGroupId\": \"{{deploymentGroupId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt to make a deployment to a deleted deployment group.",
			"descriptionFormat": "html",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "54419072-1683-161b-115f-865562d3320d",
			"method": "POST",
			"name": "Deleted Group - Deploy",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.jobId')) {\n    postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n}",
			"url": "https://pz-gateway.{{domain}}/deployment",
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId_geojson}}\",\r\n  \"deploymentGroupId\": \"{{deploymentGroupId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt to ingest test with \"content\": [].",
			"descriptionFormat": "html",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "5ed8f4b2-e203-78af-37d9-af4f96104648",
			"method": "POST",
			"name": "Ingest Text - Content as Array",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Bad content message\"] = data.message.match(/content/i);\n    tests[\"Problem with ARRAY\"] = data.message.match(/array/i);\n}",
			"url": "https://pz-gateway.{{domain}}/data",
			"rawModeData": "{\r\n  \"data\": {\r\n    \"dataType\": {\r\n        \"content\": [\r\n          \"should\",\r\n          \"not\",\r\n          \"be\",\r\n          \"array\"\r\n          ],\r\n        \"type\": \"text\"\r\n    },\r\n    \"metadata\": {\r\n        \"description\": \"A file for integration tests.\"\r\n    }\r\n  },\r\n  \"host\": false,\r\n  \"type\": \"ingest\"\r\n}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt a deployment with an invalid \"type\" parameter.",
			"descriptionFormat": "html",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "630c2b07-184a-dc75-5cf2-13302603187a",
			"method": "POST",
			"name": "Deploy - Bad type",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Bad Type message\"] = data.message.match(/type/i);\n    tests[\"Good options given\"] = data.message.match(/known.*\\[(.*,?)*\\]/i);\n}",
			"url": "https://pz-gateway.{{domain}}/deployment",
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId_geojson}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"~access\"\r\n}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Verify that the metadata of a dataId that has been deleted cannot be retrieved.",
			"descriptionFormat": "html",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "65d8c7bf-f7fc-7c2e-fff1-908573085b72",
			"method": "GET",
			"name": "Deleted Data - GET",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 404\"] = responseCode.code === 404;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Error Type\"] = data.type.match(/[Ee]rror/);\n}\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Not Found Message\"] = data.message.match(/[Nn]o/) && data.message.match(/[Ff]ound/);\n    tests[\"Deployment Id included in message\"] = data.message.match(postman.getEnvironmentVariable('dataId_geojson'));\n}",
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_geojson}}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Deploy the previously ingested Shape to a geoserver deployment group.",
			"descriptionFormat": "html",
			"folder": "8c5d6086-e0a0-057e-55c8-e356ef1cae8d",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "674b0829-8175-9433-c789-9a86cff25f34",
			"method": "POST",
			"name": "Deploy Shape into Group",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.jobId')) {\n    postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n}",
			"url": "https://pz-gateway.{{domain}}/deployment",
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId_shape}}\",\r\n  \"deploymentGroupId\": \"{{deploymentGroupId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt a deployment with an invalid \"deploymentType\" parameter.",
			"descriptionFormat": "html",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "6af947e8-ae49-6d68-cf73-2bb7fff1a7d0",
			"method": "POST",
			"name": "Deploy - Bad deploymentType",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.jobId')) {\n    postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n}",
			"url": "https://pz-gateway.{{domain}}/deployment",
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId_geojson}}\",\r\n  \"deploymentType\": \"~geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt to delete a deployment, the (Local) Raster, without deleting the group to which it was deployed.",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headerData": [
				{
					"description": "",
					"enabled": true,
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"description": "",
					"enabled": true,
					"key": "Authorization",
					"value": ""
				}
			],
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "6de3ba54-091d-d836-bea1-960749b10f52",
			"method": "DELETE",
			"name": "Delete Deployment in Group",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": "",
			"queryParams": [],
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 403\"] = responseCode.code === 403;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Error response\"] = data.type.match(/[Ee]rror/);\n}\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Unable to delete message\"] = data.message.match(/unable.*delet/i);\n    tests[\"Deployment Id included in message\"] = data.message.match(postman.getEnvironmentVariable('dataId_raster'));\n    tests[\"Deployment Group Id included in message\"] = data.message.match(postman.getEnvironmentVariable('deploymentGroupId'));\n}",
			"time": 1502919057360,
			"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId_raster}}",
			"rawModeData": ""
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Get the raw raster that was previously ingested (external source).",
			"descriptionFormat": "html",
			"folder": "8c5d6086-e0a0-057e-55c8-e356ef1cae8d",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "6e0ddb52-3da6-a62b-c32e-3f5740aac73d",
			"method": "GET",
			"name": "Download External Raster",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"url": "https://pz-gateway.{{domain}}/file/{{dataId_external}}",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Deploy the previously ingested large (~5 MB) geoJSON to a geoserver deployment group.",
			"descriptionFormat": "html",
			"folder": "cc9daf7d-42ff-f62e-baf6-6982777d3ca2",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "6fa78b4f-932d-4dac-9a70-2339a7f45d40",
			"method": "POST",
			"name": "Large - Deploy Geojson to Group",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.jobId')) {\n    postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n}",
			"url": "https://pz-gateway.{{domain}}/deployment",
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId_geojson_large}}\",\r\n  \"deploymentGroupId\": \"{{deploymentGroupId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that the deployments created in this suite of tests are present in the list of deployments.",
			"descriptionFormat": "html",
			"folder": "cc9daf7d-42ff-f62e-baf6-6982777d3ca2",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "758a61cf-e95d-8ad1-4e6f-fb0a7d3d40a0",
			"method": "GET",
			"name": "List Deployments",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nvar found_external = false;\nvar found_geojson = false;\nvar found_raster = false;\nvar found_shape = false;\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'deploymentId', 'skip', 'data[]')) {\n            found_external = (found_external || data.data[i].deploymentId === postman.getEnvironmentVariable('deploymentId_external'));\n            found_geojson = (found_geojson || data.data[i].deploymentId === postman.getEnvironmentVariable('deploymentId_geojson'));\n            found_raster = (found_raster || data.data[i].deploymentId === postman.getEnvironmentVariable('deploymentId_raster'));\n            found_shape = (found_shape || data.data[i].deploymentId === postman.getEnvironmentVariable('deploymentId_shape'));\n        }\n    }\n}\n\n\ntests[\"Ingested External Raster deployment found in list\"] = found_external;\ntests[\"Ingested GeoJSON deployment found in list\"] = found_geojson;\ntests[\"Ingested Raster deployment found in list\"] = found_raster;\ntests[\"Ingested Shape deployment found in list\"] = found_shape;",
			"url": "https://pz-gateway.{{domain}}/deployment?perPage=200&sortBy=createdOn&order=desc",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt to ingest test with \"content\": {}.",
			"descriptionFormat": "html",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "79331ad8-3e53-7b3f-e745-9a74e05b934e",
			"method": "POST",
			"name": "Ingest Text - Content as Object",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Bad content message\"] = data.message.match(/content/i);\n    tests[\"Problem with OBJECT\"] = data.message.match(/object/i);\n}",
			"url": "https://pz-gateway.{{domain}}/data",
			"rawModeData": "{\r\n  \"data\": {\r\n    \"dataType\": {\r\n        \"content\": {\r\n          \"bad\": \"content\"\r\n        },\r\n        \"type\": \"text\"\r\n    },\r\n    \"metadata\": {\r\n        \"description\": \"A file for integration tests.\"\r\n    }\r\n  },\r\n  \"host\": false,\r\n  \"type\": \"ingest\"\r\n}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"collectionRequestId": "7945c76c-fb2f-d4be-8c68-4b883847902c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Deploy the previously ingested local raster to a geoserver deployment group.",
			"descriptionFormat": "html",
			"folder": "8c5d6086-e0a0-057e-55c8-e356ef1cae8d",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "7945c76c-fb2f-d4be-8c68-4b883847902c",
			"isFromCollection": true,
			"method": "POST",
			"name": "Deploy Raster into Group",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.jobId')) {\n    postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n}",
			"url": "https://pz-gateway.{{domain}}/deployment",
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId_raster}}\",\r\n  \"deploymentGroupId\": \"{{deploymentGroupId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Get the Shape deployment metadata.",
			"descriptionFormat": "html",
			"folder": "cc9daf7d-42ff-f62e-baf6-6982777d3ca2",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "798c3664-62e7-a010-7bc9-b6bd9c4e6576",
			"method": "GET",
			"name": "Get Shape Deployment Metadata",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.deployment.deploymentId')) {\n    tests[\"Correct deploymentId returned\"] = data.data.deployment.deploymentId === postman.getEnvironmentVariable('deploymentId_shape');\n}\nif (testLevels(tests, data, 'data.deployment.capabilitiesUrl') && postman.getEnvironmentVariable('capabilitiesUrl').match(/garbage/)) {\n    postman.setEnvironmentVariable('capabilitiesUrl', data.data.deployment.capabilitiesUrl);\n}",
			"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId_shape}}",
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId_shape}}\",\r\n  \"deploymentGroupId\": \"{{deploymentGroupId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Check that the job to deploy with a bad \"deploymentType\" parameter failed.",
			"descriptionFormat": "html",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "7c7daea9-87bf-b938-6779-e61f04d16fab",
			"method": "GET",
			"name": "Deploy - Bad deploymentType - Job Status",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": null,
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.status')) {\n    if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Deploy - Bad deploymentType - Job Status');\n            wait(1000);\n        }\n        else {\n            tests[\"Job finished in time\"] = false;\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n    else if (data.data.status === 'Error') {\n        postman.setEnvironmentVariable('retry_loop',0);\n        tests[\"Job finished in time\"] = true;\n        if (testLevels(tests, data, 'data.result.details', 'string')) {\n            tests[\"Details mention that '~geoserver' is an unknown deployment type\"] = data.data.result.details.match(/unknown/i) && data.data.result.details.match(/type/i) && data.data.result.details.match(/~geoserver/i);\n        }\n    }\n    else {\n        tests[\"status should not be \" + data.data.status] = false;\n        postman.setEnvironmentVariable('retry_loop',0);\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt to retrieve the metadata of the deleted deployment.",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "8189b31e-cf59-6180-68d2-c4c76c7d0037",
			"method": "GET",
			"name": "Deleted Deployment - GET",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 404\"] = responseCode.code === 404;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ee]rror/);\n}\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Not Found Message\"] = data.message.match(/[Nn]o/) && data.message.match(/[Ff]ound/);\n    tests[\"Deployment Id included in message\"] = data.message.match(postman.getEnvironmentVariable('deploymentId_raster'));\n}",
			"time": 1488472317481,
			"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId_raster}}",
			"rawModeData": ""
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Check that the large (~5 MB) geoJSON deployment to a group was successful to get the deploymentId.  Repeat up to 10 times until the job is successful.",
			"descriptionFormat": "html",
			"folder": "cc9daf7d-42ff-f62e-baf6-6982777d3ca2",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "87b2bcac-5897-ed07-09e5-f2b8b27cb6e9",
			"method": "GET",
			"name": "Large - Get GeoJSON deploymentId",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\nvar data = parseJSON(tests, responseBody);\n\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.status')) {\n    if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Large - Get GeoJSON deploymentId');\n            wait(1000);\n        }\n        else {\n            tests[\"Job finished in time (Bug #11544)\"] = false;\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n    else if (data.data.status === 'Success') {\n        postman.setEnvironmentVariable('retry_loop',0);\n        tests[\"Job finished in time\"] = true;\n        if (testLevels(tests, data, 'data.result.deployment.deploymentId')) {\n            postman.setEnvironmentVariable(\"deploymentId_geojson_large\", data.data.result.deployment.deploymentId);\n        }\n    }\n    else {\n        tests[\"status should not be \" + data.data.status] = false;\n        postman.setEnvironmentVariable('retry_loop',0);\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt to create a deployment with a dataId that has been deleted.",
			"descriptionFormat": "html",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "87eb4860-6bb3-fe8e-ed57-ebf670de92c5",
			"method": "POST",
			"name": "Deleted Data - Deploy",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.jobId')) {\n    postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n}",
			"url": "https://pz-gateway.{{domain}}/deployment",
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId_geojson}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt a text ingest with an invalid \"dataType.type\" parameter.",
			"descriptionFormat": "html",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "8ca4b1e4-b53d-988e-a7e5-f3e7010f1dfb",
			"method": "POST",
			"name": "Ingest Text - Bad dataType.type",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Bad Type message\"] = data.message.match(/type/i);\n    tests[\"Mentions 'data.dataType' object\"] = data.message.match(/data\\.dataType/i);\n    tests[\"Good options given\"] = data.message.match(/known.*\\[(.*,?)*\\]/i);\n}",
			"url": "https://pz-gateway.{{domain}}/data",
			"rawModeData": "{\r\n  \"data\": {\r\n    \"dataType\": {\r\n        \"content\": {\r\n          \"bad\": \"content\"\r\n        },\r\n        \"type\": \"~text\"\r\n    },\r\n    \"metadata\": {\r\n        \"description\": \"A file for integration tests.\"\r\n    }\r\n  },\r\n  \"host\": false,\r\n  \"type\": \"ingest\"\r\n}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Retrun a list of dataIds, and verify that the one that was deleted is not present.",
			"descriptionFormat": "html",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "8dc7c1e8-aa20-ecd9-6a0c-00fb0300646d",
			"method": "GET",
			"name": "Deleted Data - Verify Removed from List",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nvar found_geojson = false;\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'dataId', 'skip', 'data[]')) {\n            found_geojson = (found_geojson || data.data[i].dataId === postman.getEnvironmentVariable('dataId_geojson'));\n        }\n    }\n}\n\ntests[\"Ingested GeoJSON removed from list\"] = !found_geojson;",
			"url": "https://pz-gateway.{{domain}}/data?perPage=200&sortBy=metadata.createdOn&order=desc",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"collectionRequestId": "8dd63204-ede6-6a79-d203-2f981dd8870a",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Simple Health check to pz-gateway.  Postman Environemnt Variables are initialized in this step.",
			"descriptionFormat": null,
			"folder": "17e8a8db-12f5-c81b-4e5b-82b7f1420a09",
			"headers": "Authorization: \n",
			"helperAttributes": {},
			"id": "8dd63204-ede6-6a79-d203-2f981dd8870a",
			"isFromCollection": true,
			"method": "GET",
			"name": "Hello, pz-gateway!",
			"pathVariables": {},
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\"< < < < < < < < < < < < < START-UP > > > > > > > > > > > \");\nconsole.log(\"   These tests create required environment variables.    \");\nconsole.log(\"    Any failures here will cause other tests to fail.    \");\nconsole.log(\"            DO NOT PUSH if these tests fail.             \");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"rawModeData": null,
			"tests": "tests[\"Says Hello!\"] = responseBody.has('Hello');\npostman.setEnvironmentVariable('retry_loop',0);\npostman.setEnvironmentVariable('max_retries', 9);\npostman.setEnvironmentVariable('Ingested Text', 'This is the ingested text for integration tests!');\npostman.setEnvironmentVariable('Ingested Geojson', '{\"type\": \"FeatureCollection\",\"features\": [{\"type\": \"Feature\",\"geometry\": {\"type\": \"Point\",\"coordinates\": [102.0,0.5]},\"properties\": {\"prop0\": \"value0\"}},{\"type\": \"Feature\",\"geometry\": {\"type\": \"Point\",\"coordinates\": [106.0,4]},\"properties\": {\"prop0\": \"value0\"}}]}');\npostman.setEnvironmentVariable('jobId','');\npostman.setEnvironmentVariable('jobId_text','');\npostman.setEnvironmentVariable('dataId_text','');\npostman.setEnvironmentVariable('jobId_geojson','');\npostman.setEnvironmentVariable('dataId_geojson','');\npostman.setEnvironmentVariable('jobId_raster','');\npostman.setEnvironmentVariable('dataId_raster','');\npostman.setEnvironmentVariable('jobId_shape','');\npostman.setEnvironmentVariable('dataId_shape','');\npostman.setEnvironmentVariable('jobId_external','');\npostman.setEnvironmentVariable('dataId_external','');\npostman.setEnvironmentVariable('deploymentId_geojson','');\npostman.setEnvironmentVariable('deploymentId_external','');\npostman.setEnvironmentVariable('deploymentGroupId','');\npostman.setEnvironmentVariable('deploymentId_raster','');\npostman.setEnvironmentVariable('deploymentId_shape','');\npostman.setEnvironmentVariable('capabilitiesUrl','http://google.com/garbage');\npostman.setEnvironmentVariable('dataId_geojson_large','');\npostman.setEnvironmentVariable('deploymentId_geojson_large','');",
			"url": "https://pz-gateway.{{domain}}/"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt a text ingest without specifying the \"type\" parameter.",
			"descriptionFormat": "html",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "9065ecf5-a000-6cbc-f05b-9d9046e0c5c3",
			"method": "POST",
			"name": "Ingest Text - No type",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Missing Type message\"] = data.message.match(/missing.*type/i);\n}",
			"url": "https://pz-gateway.{{domain}}/data",
			"rawModeData": "{\r\n  \"data\": {\r\n    \"dataType\": {\r\n        \"content\": \"{{Ingested Text}}\",\r\n        \"type\": \"text\"\r\n    },\r\n    \"metadata\": {\r\n        \"description\": \"A file for integration tests.\"\r\n    }\r\n  },\r\n  \"host\": false\r\n}"
		},
		{
			"id": "93d469d4-ba66-8dd5-475f-c64761c15712",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "",
					"description": "",
					"enabled": true
				}
			],
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_text}}",
			"queryParams": [],
			"preRequestScript": "",
			"pathVariables": {},
			"pathVariableData": [],
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\ntests[\"Status code is 400\"] = responseCode.code === 400;\n\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"'Could not update' message\"] = data.message.match(/no.*update/i);\n    tests[\"'createdBy' specified\"] = data.message.match(/createdBy/i);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1503691049399,
			"name": "Protected Field - Update createdBy",
			"description": "Try to update the \"createdBy\" field.",
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"responses": [],
			"folderId": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"rawModeData": "{\r\n  \"createdBy\": \"foo\",\r\n  \"classType\": {\r\n    \"classification\": \"UNCLASSIFIED\" \r\n  }\r\n}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Check that the (External) Raster deployment was successful to get the deploymentId.  Repeat up to 10 times until the job is successful.",
			"descriptionFormat": "html",
			"folder": "8c5d6086-e0a0-057e-55c8-e356ef1cae8d",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "94c5d1fc-fa4f-dbb1-535f-61c14774f072",
			"method": "GET",
			"name": "Get External Raster deploymentId",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\nvar data = parseJSON(tests, responseBody);\n\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.status')) {\n    if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Get External Raster deploymentId');\n            wait(1000);\n        }\n        else {\n            tests[\"Job finished in time (Bug #11544)\"] = false;\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n    else if (data.data.status === 'Success') {\n        postman.setEnvironmentVariable('retry_loop',0);\n        tests[\"Job finished in time\"] = true;\n        if (testLevels(tests, data, 'data.result.deployment.deploymentId')) {\n            postman.setEnvironmentVariable(\"deploymentId_external\", data.data.result.deployment.deploymentId);\n        }\n    }\n    else {\n        tests[\"status should not be \" + data.data.status] = false;\n        postman.setEnvironmentVariable('retry_loop',0);\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}"
		},
		{
			"id": "94f9c98b-4680-fed1-7ae7-490c3d743dda",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "",
					"description": "",
					"enabled": true
				}
			],
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_text}}",
			"queryParams": [],
			"preRequestScript": "",
			"pathVariables": {},
			"pathVariableData": [],
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\ntests[\"Status code is 400\"] = responseCode.code === 400;\n\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"'Could not update' message\"] = data.message.match(/no.*update/i);\n    tests[\"'createdOn' specified\"] = data.message.match(/createdOn/i);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1503691030888,
			"name": "Protected Field - Update createdOn",
			"description": "Try to update the \"createdOn\" field.",
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"responses": [],
			"folderId": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"rawModeData": "{\r\n  \"createdOn\": \"foo\",\r\n  \"classType\": {\r\n    \"classification\": \"UNCLASSIFIED\" \r\n  }\r\n}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Verify that the job to deploy text to geoserver failed.",
			"descriptionFormat": "html",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "9647097d-9b8f-525b-c6ca-c26aa3b24557",
			"method": "GET",
			"name": "Deploy Text Job Status",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": null,
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.status')) {\n    if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Deploy Text Job Status');\n            wait(1000);\n        }\n        else {\n            tests[\"Job finished in time\"] = false;\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n    else if (data.data.status === 'Error') {\n        postman.setEnvironmentVariable('retry_loop',0);\n        tests[\"Job finished in time\"] = true;\n        if (testLevels(tests, data, 'data.result.details', 'string')) {\n            tests[\"Details mention that 'text' type cannot be deployed\"] = data.data.result.details.match(/no.*deploy/i) && data.data.result.details.match(/type/i) && data.data.result.details.match(/text/i);\n        }\n    }\n    else {\n        tests[\"status should not be \" + data.data.status] = false;\n        postman.setEnvironmentVariable('retry_loop',0);\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}"
		},
		{
			"id": "974ca5fb-5239-545d-ac22-a4cbf5aeeef9",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "",
					"description": "",
					"enabled": true
				}
			],
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_text}}",
			"queryParams": [],
			"preRequestScript": "",
			"pathVariables": {},
			"pathVariableData": [],
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\ntests[\"Status code is 400\"] = responseCode.code === 400;\n\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"'Could not update' message\"] = data.message.match(/no.*update/i);\n    tests[\"'createdByJobId' specified\"] = data.message.match(/createdByJobId/i);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1503691089781,
			"name": "Protected Field - Update createdByJobId",
			"description": "Try to update the \"createdByJobId\" field.",
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"responses": [],
			"folderId": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"rawModeData": "{\r\n  \"createdByJobId\": \"foo\",\r\n  \"classType\": {\r\n    \"classification\": \"UNCLASSIFIED\" \r\n  }\r\n}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [
				{
					"enabled": true,
					"key": "data",
					"type": "text",
					"value": "{ \"type\": \"ingest\", \"host\": \"true\", \"data\" : { \"dataType\": { \"type\": \"raster\" }, \"metadata\": { \"name\": \"terrametrics.tif\", \"description\": \"A file for integration tests.\", \"classType\": { \"classification\": \"unclassified\" } } } }"
				}
			],
			"dataMode": "params",
			"description": "Attempt to ingest a file without attaching a file to ingest.",
			"descriptionFormat": "html",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "9c3527f3-0519-3cdd-c175-172f7d5758cb",
			"method": "POST",
			"name": "Ingest Local Raster - No Attached File",
			"pathVariables": {},
			"preRequestScript": null,
			"rawModeData": null,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"File not present\"] = data.message.match(/file.*no.*present/i);\n}",
			"url": "https://pz-gateway.{{domain}}/data/file"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Deploy the previously ingested external raster to geoserver.",
			"descriptionFormat": "html",
			"folder": "8c5d6086-e0a0-057e-55c8-e356ef1cae8d",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "9cc792d2-4473-7557-bb60-0bcf44b29ce1",
			"method": "POST",
			"name": "Deploy External Raster",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.jobId')) {\n    postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n}",
			"url": "https://pz-gateway.{{domain}}/deployment",
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId_external}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Verify that a deleted dataId cannot be downloaded.",
			"descriptionFormat": "html",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "9e217a32-78d4-25f6-ee18-1b4ff118c82d",
			"method": "GET",
			"name": "Deleted Data - Download",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 404\"] = responseCode.code === 404;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ee]rror/);\n}\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Not Found Message\"] = data.message.match(/[Nn]o/) && data.message.match(/[Ff]ound/);\n    tests[\"Deployment Id included in message\"] = data.message.match(postman.getEnvironmentVariable('dataId_geojson'));\n}",
			"url": "https://pz-gateway.{{domain}}/file/{{dataId_geojson}}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"collectionRequestId": "9f7880f2-49d9-c8d6-1e87-5164634fba27",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Check that the GeoJSON deployment was successful to get the deploymentId.  Repeat up to 10 times until the job is successful.",
			"descriptionFormat": "html",
			"folder": "8c5d6086-e0a0-057e-55c8-e356ef1cae8d",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "9f7880f2-49d9-c8d6-1e87-5164634fba27",
			"isFromCollection": true,
			"method": "GET",
			"name": "Get GeoJSON deploymentId",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\nvar data = parseJSON(tests, responseBody);\n\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.status')) {\n    if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Get GeoJSON deploymentId');\n            wait(1000);\n        }\n        else {\n            tests[\"Job finished in time (Bug #11544)\"] = false;\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n    else if (data.data.status === 'Success') {\n        postman.setEnvironmentVariable('retry_loop',0);\n        tests[\"Job finished in time\"] = true;\n        if (testLevels(tests, data, 'data.result.deployment.deploymentId')) {\n            postman.setEnvironmentVariable(\"deploymentId_geojson\", data.data.result.deployment.deploymentId);\n        }\n    }\n    else {\n        tests[\"status should not be \" + data.data.status] = false;\n        postman.setEnvironmentVariable('retry_loop',0);\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Check the job status of the ingest text job to get the dataId.  Repeat up to 10 times until the job is successful.",
			"descriptionFormat": "html",
			"folder": "17e8a8db-12f5-c81b-4e5b-82b7f1420a09",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "a0b17535-532b-1430-ba19-d6c48b9ecd82",
			"method": "GET",
			"name": "Get Text dataId",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": null,
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.status')) {\n    if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Get Text dataId');\n            wait(1000);\n        }\n        else {\n            tests[\"Job finished in time\"] = false;\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n    else if (data.data.status === 'Success') {\n        postman.setEnvironmentVariable('retry_loop',0);\n        tests[\"Job finished in time\"] = true;\n        if (testLevels(tests, data, 'data.result.dataId')) {\n            postman.setEnvironmentVariable(\"dataId_text\", data.data.result.dataId);\n        }\n    }\n    else {\n        tests[\"status should not be \" + data.data.status] = false;\n        postman.setEnvironmentVariable('retry_loop',0);\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId_text}}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Get the raw raster that was previously ingested (local source).",
			"descriptionFormat": "html",
			"folder": "8c5d6086-e0a0-057e-55c8-e356ef1cae8d",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "a0f390c9-22d3-b38b-1a37-3b4ed5bb52bf",
			"method": "GET",
			"name": "Download Raster",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"url": "https://pz-gateway.{{domain}}/file/{{dataId_raster}}",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "List all ingested data, making sure that the data ingested in this suite of tests is present.",
			"descriptionFormat": "html",
			"folder": "cc9daf7d-42ff-f62e-baf6-6982777d3ca2",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "a13f67ad-ad40-569f-29f6-21343f0889b3",
			"method": "GET",
			"name": "List Data",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nvar found_external = false;\nvar found_geojson = false;\nvar found_raster = false;\nvar found_shape = false;\nvar found_text = false;\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'dataId', 'skip', 'data[]')) {\n            found_external = (found_external || data.data[i].dataId === postman.getEnvironmentVariable('dataId_external'));\n            found_geojson = (found_geojson || data.data[i].dataId === postman.getEnvironmentVariable('dataId_geojson'));\n            found_raster = (found_raster || data.data[i].dataId === postman.getEnvironmentVariable('dataId_raster'));\n            found_shape = (found_shape || data.data[i].dataId === postman.getEnvironmentVariable('dataId_shape'));\n            found_text = (found_text || data.data[i].dataId === postman.getEnvironmentVariable('dataId_text'));\n        }\n    }\n}\n\ntests[\"Ingested External Raster data found in list\"] = found_external;\ntests[\"Ingested GeoJSON data found in list\"] = found_geojson;\ntests[\"Ingested Raster data found in list\"] = found_raster;\ntests[\"Ingested Shape data found in list\"] = found_shape;\ntests[\"Ingested Text data found in list\"] = found_text;",
			"url": "https://pz-gateway.{{domain}}/data?perPage=200&sortBy=metadata.createdOn&order=desc",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Check that the attempted deployment of a deleted dataId failed.",
			"descriptionFormat": "html",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "a4cfb317-ef4f-72fd-6091-db7625233f1e",
			"method": "GET",
			"name": "Deleted Data - Deploy - Job Status",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": null,
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.status')) {\n    if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Deleted Data - Deploy - Job Status');\n            wait(1000);\n        }\n        else {\n            tests[\"Job finished in time\"] = false;\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n    else if (data.data.status === 'Error') {\n        postman.setEnvironmentVariable('retry_loop',0);\n        tests[\"Job finished in time\"] = true;\n        if (testLevels(tests, data, 'data.result.details', 'string')) {\n            tests[\"Details state dataId does not exist\"] = data.data.result.details.match(/do.*no.*exist/i);\n            tests[\"dataId included in details\"] = data.data.result.details.match(postman.getEnvironmentVariable('dataId_geojson'));\n        }\n    }\n    else {\n        tests[\"status should not be \" + data.data.status + \" (Bug #9223)\"] = false;\n        postman.setEnvironmentVariable('retry_loop',0);\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Delete the geoserver deployment group used throught this test.",
			"descriptionFormat": "html",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "a8c4ba92-6790-42be-4172-9e823c456909",
			"method": "DELETE",
			"name": "Delete Deployment Group",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"url": "https://pz-gateway.{{domain}}/deployment/group/{{deploymentGroupId}}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Get the (External) Raster deployment metadata.",
			"descriptionFormat": "html",
			"folder": "cc9daf7d-42ff-f62e-baf6-6982777d3ca2",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "a9b7e500-3c99-c2fc-0ba9-55fa8a049e08",
			"method": "GET",
			"name": "Get External Raster Deployment Metadata",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.deployment.deploymentId')) {\n    tests[\"Correct deploymentId returned\"] = data.data.deployment.deploymentId === postman.getEnvironmentVariable('deploymentId_external');\n}\nif (testLevels(tests, data, 'data.deployment.capabilitiesUrl') && postman.getEnvironmentVariable('capabilitiesUrl').match(/garbage/)) {\n    postman.setEnvironmentVariable('capabilitiesUrl', data.data.deployment.capabilitiesUrl);\n}",
			"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId_external}}",
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId_shape}}\",\r\n  \"deploymentGroupId\": \"{{deploymentGroupId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Check the job status of the ingest Shape job to get the dataId.  Repeat up to 10 times until the job is successful.",
			"descriptionFormat": "html",
			"folder": "17e8a8db-12f5-c81b-4e5b-82b7f1420a09",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "a9dcf3be-7312-35fb-48e1-fdb79420690b",
			"method": "GET",
			"name": "Get Shape dataId",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": null,
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.status')) {\n    if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Get Shape dataId');\n            wait(1000);\n        }\n        else {\n            tests[\"Job finished in time\"] = false;\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n    else if (data.data.status === 'Success') {\n        postman.setEnvironmentVariable('retry_loop',0);\n        tests[\"Job finished in time\"] = true;\n        if (testLevels(tests, data, 'data.result.dataId')) {\n            postman.setEnvironmentVariable(\"dataId_shape\", data.data.result.dataId);\n        }\n    }\n    else {\n        tests[\"status should not be \" + data.data.status] = false;\n        postman.setEnvironmentVariable('retry_loop',0);\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId_shape}}"
		},
		{
			"id": "aa468395-a868-76ff-b905-56f2a002ea99",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "",
					"description": "",
					"enabled": true
				}
			],
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_text}}",
			"queryParams": [],
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\"< < < < < < < < < < < < LOW > > > > > > > > > > > \");\nconsole.log(\"  These tests represent less-important features.  \");\nconsole.log(\"More attention is given to options and edge cases.\");\nconsole.log(\"You may push if these tests fail, but be careful. \");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'data.dataId')) {\n    tests[\"Correct dataId\"] = data.data.dataId === postman.getEnvironmentVariable('dataId_text');\n}\nif (testLevels(tests, data, 'data.dataType.type')) {\n    tests[\"Type is 'text'\"] = data.data.dataType.type === 'text';\n}\nif (testLevels(tests, data, 'data.dataType.content')) {\n    tests[\"Correct Content\"] = data.data.dataType.content === postman.getEnvironmentVariable('Ingested Text');\n}\nif (testLevels(tests, data, 'data.metadata.description')) {\n    tests[\"Correct Description\"] = data.data.metadata.description === 'A file for integration tests.';\n}\nif (testLevels(tests, data, 'data.metadata.createdBy')) {\n    tests[\"Correct createdBy\"] = data.data.metadata.createdBy === postman.getEnvironmentVariable('username');\n}\nif (testLevels(tests, data, 'data.metadata.createdOn', 'string')) {\n    tests[\"Date Generated\"] = data.data.metadata.createdOn.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);\n    tests[\"Created in the last half hour\"] = (Date.now() - Date.parse(data.data.metadata.createdOn)) <= 1800000;\n    postman.setEnvironmentVariable('orig_date', data.data.metadata.createdOn);\n}\nif (testLevels(tests, data, 'data.metadata.createdByJobId')) {\n    tests[\"Correct createdByJobId\"] = data.data.metadata.createdByJobId === postman.getEnvironmentVariable('jobId_text');\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1503692106639,
			"name": "Get Text Metadata Details",
			"description": "Validate the details of the ingested text metadata.",
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"collectionRequestId": "ab37606f-d67f-526a-f5c5-d733ee179edf",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "List deployments (filetered with the geoJSON deploymentId as the keyword), making sure that only that geoJSON deployment is returned.",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headerData": [
				{
					"description": "",
					"enabled": true,
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"description": "",
					"enabled": true,
					"key": "Authorization",
					"value": ""
				}
			],
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "ab37606f-d67f-526a-f5c5-d733ee179edf",
			"isFromCollection": true,
			"method": "GET",
			"name": "List Deployment with Keyword (GeoJSON deploymentId)",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": "",
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "perPage",
					"value": "200"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "sortBy",
					"value": "metadata.createdOn"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "order",
					"value": "desc"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "keyword",
					"value": "{{deploymentId_geojson}}"
				}
			],
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nvar found_geojson = false;\nvar found_keyword = true;\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'deploymentId', 'skip', 'data[]')) {\n            found_geojson = (found_geojson || data.data[i].deploymentId === postman.getEnvironmentVariable('deploymentId_geojson'));\n        }\n        found_keyword = found_keyword && JSON.stringify(data.data[i]).match(postman.getEnvironmentVariable('deploymentId_geojson'));\n    }\n    if (testLevels(tests, data, 'pagination.count') && testLevels(tests, data, 'pagination.perPage')) {\n        tests[\"Count is correct\"] = data.pagination.count === data.data.length || data.pagination.perPage === data.data.length;\n    }\n}\n\ntests[\"Ingested geoJSON data found in list\"] = found_geojson;\ntests[\"All results contain the keyword\"] = found_keyword;",
			"time": 1496326974072,
			"url": "https://pz-gateway.{{domain}}/deployment?perPage=200&sortBy=metadata.createdOn&order=desc&keyword={{deploymentId_geojson}}",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that the deployments created in this suite of tests are present in the result of an Elastic Search query.\nThis is a \"match_all\" query.",
			"descriptionFormat": "html",
			"folder": "cc9daf7d-42ff-f62e-baf6-6982777d3ca2",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "ab39292f-2466-1e67-4934-fcda0178e59a",
			"method": "POST",
			"name": "Complex Query",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200 (Bug #11888)\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nvar found_external = false;\nvar found_geojson = false;\nvar found_raster = false;\nvar found_shape = false;\nvar found_text = false;\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'dataId', 'skip', 'data[]')) {\n            found_external = (found_external || data.data[i].dataId === postman.getEnvironmentVariable('dataId_external'));\n            found_geojson = (found_geojson || data.data[i].dataId === postman.getEnvironmentVariable('dataId_geojson'));\n            found_raster = (found_raster || data.data[i].dataId === postman.getEnvironmentVariable('dataId_raster'));\n            found_shape = (found_shape || data.data[i].dataId === postman.getEnvironmentVariable('dataId_shape'));\n            found_text = (found_text || data.data[i].dataId === postman.getEnvironmentVariable('dataId_text'));\n        }\n    }\n}\n\ntests[\"Ingested GeoJSON data found in list\"] = found_geojson;\ntests[\"Ingested External Raster data found in list\"] = found_external;\ntests[\"Ingested Raster data found in list\"] = found_raster;\ntests[\"Ingested Shape data found in list\"] = found_shape;\ntests[\"Ingested Text data found in list\"] = found_text;",
			"url": "https://pz-gateway.{{domain}}/data/query?perPage=200",
			"rawModeData": "{\n    \"query\": {\n        \"match_all\": {}\n    }\n}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt a text ingest without specifying the \"host\" parameter.",
			"descriptionFormat": "html",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "ab674007-7511-950b-d794-d4fd4a3afb03",
			"method": "POST",
			"name": "Ingest Text - No host",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'errors', 'array')) {\n    if (testLevels(tests, data.errors[0], 'field', 'skip', 'errors[0].')) {\n        tests[\"Problem with deploymentType\"] = data.errors[0].field === 'host';\n    }\n    if (testLevels(tests, data.errors[0], 'defaultMessage', 'string', 'errors[0].')) {\n        tests[\"Cannot Be Null Message\"] = data.errors[0].defaultMessage.match(/null/i);\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/data",
			"rawModeData": "{\r\n  \"data\": {\r\n    \"dataType\": {\r\n        \"content\": \"{{Ingested Text}}\",\r\n        \"type\": \"text\"\r\n    },\r\n    \"metadata\": {\r\n        \"description\": \"A file for integration tests.\"\r\n    }\r\n  },\r\n  \"type\": \"ingest\"\r\n}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt a text ingest with an invalid \"type\" parameter.",
			"descriptionFormat": "html",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "ad4c398b-e5c3-6106-3792-16ef8cf1a86f",
			"method": "POST",
			"name": "Ingest Text - Bad type",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Bad Type message\"] = data.message.match(/type/i);\n    tests[\"Good options given\"] = data.message.match(/known.*\\[(.*,?)*\\]/i);\n}",
			"url": "https://pz-gateway.{{domain}}/data",
			"rawModeData": "{\r\n  \"data\": {\r\n    \"dataType\": {\r\n        \"content\": \"{{Ingested Text}}\",\r\n        \"type\": \"text\"\r\n    },\r\n    \"metadata\": {\r\n        \"description\": \"A file for integration tests.\"\r\n    }\r\n  },\r\n  \"host\": false,\r\n  \"type\": \"~ingest\"\r\n}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Validate the details of the ingested geoJSON metadata.",
			"descriptionFormat": "html",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "b0ed611f-c055-c916-f590-a62d0801cea1",
			"method": "GET",
			"name": "Get geoJSON Metadata Details",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'data.dataId')) {\n    tests[\"Correct dataId\"] = data.data.dataId === postman.getEnvironmentVariable('dataId_geojson');\n}\nif (testLevels(tests, data, 'data.dataType.type')) {\n    tests[\"Type is 'geojson'\"] = data.data.dataType.type === 'geojson';\n}\nif (testLevels(tests, data, 'data.metadata.description')) {\n    tests[\"Correct Description\"] = data.data.metadata.description === 'A file for integration tests.';\n}\nif (testLevels(tests, data, 'data.metadata.createdBy')) {\n    tests[\"Correct createdBy\"] = data.data.metadata.createdBy === postman.getEnvironmentVariable('username');\n}\nif (testLevels(tests, data, 'data.metadata.createdOn', 'string')) {\n    tests[\"Date Generated\"] = data.data.metadata.createdOn.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);\n    tests[\"Created in the last half hour\"] = (Date.now() - Date.parse(data.data.metadata.createdOn)) <= 1800000;\n}\nif (testLevels(tests, data, 'data.metadata.createdByJobId')) {\n    tests[\"Correct createdByJobId\"] = data.data.metadata.createdByJobId === postman.getEnvironmentVariable('jobId_geojson');\n}\nif (testLevels(tests, data, 'data.metadata.name')) {\n    tests[\"Correct name\"] = data.data.metadata.name === 'Test.geojson';\n}\nif (testLevels(tests, data, 'data.spatialMetadata.minX')) {\n    tests[\"Correct minX\"] = data.data.spatialMetadata.minX === 102;\n}\nif (testLevels(tests, data, 'data.spatialMetadata.maxX')) {\n    tests[\"Correct maxX\"] = data.data.spatialMetadata.maxX === 106;\n}\nif (testLevels(tests, data, 'data.spatialMetadata.minY')) {\n    tests[\"Correct minY\"] = data.data.spatialMetadata.minY === 0.5;\n}\nif (testLevels(tests, data, 'data.spatialMetadata.maxY')) {\n    tests[\"Correct maxY\"] = data.data.spatialMetadata.maxY === 4;\n}",
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_geojson}}",
			"isFromCollection": true,
			"collectionRequestId": "b0ed611f-c055-c916-f590-a62d0801cea1",
			"folderId": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Retrun a list of deploymentIds, and verify that the one that was deleted is not present.",
			"descriptionFormat": "html",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "b126061e-c83f-80e1-9d0f-1fafa02bebe3",
			"method": "GET",
			"name": "Deleted Deployment - Verify Removed from List",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nvar found_geojson = false;\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'deploymentId', 'skip', 'data[]')) {\n            found_geojson = (found_geojson || data.data[i].deploymentId === postman.getEnvironmentVariable('deploymentId_raster'));\n        }\n    }\n}\n\ntests[\"Deployed raster removed from list\"] = !found_geojson;",
			"url": "https://pz-gateway.{{domain}}/deployment?perPage=200&sortBy=createdOn&order=desc",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that the geoJSON deployment (and no other deploymens) created in this suite of tests are present in the result of an Elastic Search query.\nThis query is checking that \"dataResource.dataType.type\" contains \"geojson\".",
			"descriptionFormat": "html",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "b30814ba-627c-a2a2-fc7f-69e3cea7a388",
			"method": "POST",
			"name": "Complex Query - Search Type (geojson)",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200 (Bug #11888)\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nvar found_geojson = false;\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'dataId', 'skip', 'data[]')) {\n            found_geojson = (found_geojson || data.data[i].dataId === postman.getEnvironmentVariable('dataId_geojson'));\n        }\n    }\n}\n\ntests[\"Ingested GeoJSON data found in list\"] = found_geojson;",
			"url": "https://pz-gateway.{{domain}}/data/query",
			"rawModeData": "{\n    \"query\": {\n        \"match\": {\n            \"dataResource.dataType.type\": \"geojson\"\n        }\n    }\n}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"collectionRequestId": "b6cf60c7-826f-0435-f24f-027b52be8a69",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Delete the ingested geoJSON dataId used throughout this test.",
			"descriptionFormat": "html",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "b6cf60c7-826f-0435-f24f-027b52be8a69",
			"isFromCollection": true,
			"method": "DELETE",
			"name": "Delete GeoJSON Data",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_geojson}}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Delete the (Local) Raster deployment used in this suite of tests.",
			"descriptionFormat": "html",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "b7ccfe3b-7ff6-332a-1712-72d2e005a3de",
			"method": "DELETE",
			"name": "Delete Raster Deployment",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId_raster}}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Ingest an external raster file into piazza.",
			"folder": "17e8a8db-12f5-c81b-4e5b-82b7f1420a09",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "befaada0-9ba2-caa8-81d6-5cf5367af5d5",
			"method": "POST",
			"name": "Ingest External Raster",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.jobId')) {\n    postman.setEnvironmentVariable(\"jobId_external\",data.data.jobId);\n}",
			"time": 1485367118642,
			"url": "https://pz-gateway.{{domain}}/data",
			"rawModeData": "{\n  \"type\": \"ingest\",\n  \"host\": \"false\",\n  \"data\": {\n    \"dataType\": {\n      \"type\": \"raster\",\n      \"location\": {\n        \"type\": \"s3\",\n        \"bucketName\": \"external-public-access-test\",\n        \"fileName\": \"elevation.tif\",\n        \"domainName\": \"s3.amazonaws.com\"\n      }\n    },\n    \"metadata\": {\n      \"name\": \"My Test raster external file\",\n      \"description\": \"A file for integration tests.\",\n      \"classType\": \"unclassified\"\n    }\n  }\n}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"collectionRequestId": "c0c39868-8475-c607-fdb4-b6a1784d7205",
			"currentHelper": "basicAuth",
			"data": null,
			"dataMode": "params",
			"description": "Create a geoserver deployment group.",
			"descriptionFormat": "html",
			"folder": "8c5d6086-e0a0-057e-55c8-e356ef1cae8d",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "c0c39868-8475-c607-fdb4-b6a1784d7205",
			"isFromCollection": true,
			"method": "POST",
			"name": "Create Group",
			"pathVariables": {},
			"preRequestScript": null,
			"rawModeData": null,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.deploymentGroupId')) {\n    postman.setEnvironmentVariable(\"deploymentGroupId\",data.data.deploymentGroupId);\n}",
			"url": "https://pz-gateway.{{domain}}/deployment/group"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Update the \"name\" field within the ingested Shape metadata.",
			"descriptionFormat": "html",
			"folder": "cc9daf7d-42ff-f62e-baf6-6982777d3ca2",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "c10a59ee-d08c-48c5-b8b7-676345673a90",
			"method": "PUT",
			"name": "Update Shape Metadata",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'data.message', 'string')) {\n    tests[\"Updated message\"] = data.data.message.match(/update/i);\n    tests[\"Correct dataId mentioned\"] = data.data.message.match(postman.getEnvironmentVariable('dataId_shape'));\n}",
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_shape}}",
			"rawModeData": "{\r\n  \"name\": \"foo\",\r\n  \"classType\": {\r\n    \"classification\": \"UNCLASSIFIED\"\r\n  }\r\n}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"collectionRequestId": "c2ec915c-e6d5-759a-251b-0cfa33760729",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "After deleting the geoJSON dataId, verify that the corresponding deploymentId was deleted.",
			"descriptionFormat": "html",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "c2ec915c-e6d5-759a-251b-0cfa33760729",
			"isFromCollection": true,
			"method": "GET",
			"name": "Deleted Data - Verify DeploymentId Deleted",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 404\"] = responseCode.code === 404;\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Not Found Message\"] = data.message.match(/[Nn]o/) && data.message.match(/[Ff]ound/);\n    tests[\"Deployment Id included in message\"] = data.message.match(postman.getEnvironmentVariable('deploymentId_geojson'));\n}",
			"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId_geojson}}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Validate the details of the ingested shape metadata.",
			"descriptionFormat": "html",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "c38641a0-3320-2c3e-2597-33c4c173cc3c",
			"method": "GET",
			"name": "Get Shape Metadata Details",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'data.dataId')) {\n    tests[\"Correct dataId\"] = data.data.dataId === postman.getEnvironmentVariable('dataId_shape');\n}\nif (testLevels(tests, data, 'data.dataType.type')) {\n    tests[\"Type is 'shapefile'\"] = data.data.dataType.type === 'shapefile';\n}\nif (testLevels(tests, data, 'data.metadata.description')) {\n    tests[\"Correct Description\"] = data.data.metadata.description === 'A file for integration tests.';\n}\nif (testLevels(tests, data, 'data.metadata.createdBy')) {\n    tests[\"Correct createdBy\"] = data.data.metadata.createdBy === postman.getEnvironmentVariable('username');\n}\nif (testLevels(tests, data, 'data.metadata.createdOn', 'string')) {\n    tests[\"Date Generated\"] = data.data.metadata.createdOn.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);\n    tests[\"Created in the last half hour\"] = (Date.now() - Date.parse(data.data.metadata.createdOn)) <= 1800000;\n}\nif (testLevels(tests, data, 'data.metadata.createdByJobId')) {\n    tests[\"Correct createdByJobId\"] = data.data.metadata.createdByJobId === postman.getEnvironmentVariable('jobId_shape');\n}\nif (testLevels(tests, data, 'data.metadata.name')) {\n    tests[\"Correct name\"] = data.data.metadata.name === 'foo';\n}\nif (testLevels(tests, data, 'data.spatialMetadata.minX')) {\n    tests[\"Correct minX\"] = data.data.spatialMetadata.minX === 102;\n}\nif (testLevels(tests, data, 'data.spatialMetadata.maxX')) {\n    tests[\"Correct maxX\"] = data.data.spatialMetadata.maxX === 106;\n}\nif (testLevels(tests, data, 'data.spatialMetadata.minY')) {\n    tests[\"Correct minY\"] = data.data.spatialMetadata.minY === 0.5;\n}\nif (testLevels(tests, data, 'data.spatialMetadata.maxY')) {\n    tests[\"Correct maxY\"] = data.data.spatialMetadata.maxY === 4;\n}",
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_shape}}",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"collectionRequestId": "c91de108-42ae-e0d2-8e26-c22abcf43718",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Deploy the previously ingested geoJSON to geoserver.",
			"descriptionFormat": "html",
			"folder": "8c5d6086-e0a0-057e-55c8-e356ef1cae8d",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "c91de108-42ae-e0d2-8e26-c22abcf43718",
			"isFromCollection": true,
			"method": "POST",
			"name": "Deploy Geojson",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.jobId')) {\n    postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n}",
			"url": "https://pz-gateway.{{domain}}/deployment",
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId_geojson}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Get the (Local) Raster deployment metadata.",
			"descriptionFormat": "html",
			"folder": "cc9daf7d-42ff-f62e-baf6-6982777d3ca2",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "cd64dd9a-30ca-c8da-e1ce-4e17e99dfb43",
			"method": "GET",
			"name": "Get Raster Deployment Metadata",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.deployment.deploymentId')) {\n    tests[\"Correct deploymentId returned\"] = data.data.deployment.deploymentId === postman.getEnvironmentVariable('deploymentId_raster');\n}\nif (testLevels(tests, data, 'data.deployment.capabilitiesUrl') && postman.getEnvironmentVariable('capabilitiesUrl').match(/garbage/)) {\n    postman.setEnvironmentVariable('capabilitiesUrl', data.data.deployment.capabilitiesUrl);\n}",
			"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId_raster}}",
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId_shape}}\",\r\n  \"deploymentGroupId\": \"{{deploymentGroupId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Delete the (Large) geoJSON data used in this suite of tests.",
			"descriptionFormat": "html",
			"folder": "3fdd6abc-222f-5021-48a6-3222396757d4",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "d03bde33-baaf-3b10-9b43-00b53cd57af4",
			"method": "DELETE",
			"name": "Delete Large GeoJSON Data",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_geojson_large}}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Try to delete a deployment after it has already been deleted.",
			"descriptionFormat": "html",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "d2e77455-ea60-90ca-a3aa-11d6adb2790a",
			"method": "DELETE",
			"name": "Deleted Deployment - Delete Again",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 404\"] = responseCode.code === 404;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ee]rror/);\n}\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Not Found Message\"] = data.message.match(/[Nn]o/) && data.message.match(/[Ff]ound/);\n    tests[\"Deployment Id included in message\"] = data.message.match(postman.getEnvironmentVariable('deploymentId_raster'));\n}",
			"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId_raster}}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"collectionRequestId": "d42fe417-d455-19ce-fa34-98480ad31817",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Check the job status of the ingest local raster job to get the dataId.  Repeat up to 10 times until the job is successful.",
			"descriptionFormat": "html",
			"folder": "17e8a8db-12f5-c81b-4e5b-82b7f1420a09",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "d42fe417-d455-19ce-fa34-98480ad31817",
			"isFromCollection": true,
			"method": "GET",
			"name": "Get Raster dataId",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": null,
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.status')) {\n    if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Get Raster dataId');\n            wait(1000);\n        }\n        else {\n            tests[\"Job finished in time\"] = false;\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n    else if (data.data.status === 'Success') {\n        postman.setEnvironmentVariable('retry_loop',0);\n        tests[\"Job finished in time\"] = true;\n        if (testLevels(tests, data, 'data.result.dataId')) {\n            postman.setEnvironmentVariable(\"dataId_raster\", data.data.result.dataId);\n        }\n    }\n    else {\n        tests[\"status should not be \" + data.data.status] = false;\n        postman.setEnvironmentVariable('retry_loop',0);\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId_raster}}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "",
			"descriptionFormat": "html",
			"folder": "3fdd6abc-222f-5021-48a6-3222396757d4",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "d49e92d8-b4ef-2af1-ddc5-6cd9d264890d",
			"method": "DELETE",
			"name": "Delete External Raster Data",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_external}}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"collectionRequestId": "d6b91e1a-1ccd-cca5-9a02-f597b552c986",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Test that keyword search works for deployment lists, by searching for the dataId of the ingested Raster file.",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headerData": [
				{
					"description": "",
					"enabled": true,
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"description": "",
					"enabled": true,
					"key": "Authorization",
					"value": ""
				}
			],
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "d6b91e1a-1ccd-cca5-9a02-f597b552c986",
			"isFromCollection": true,
			"method": "GET",
			"name": "List Deployment with Keyword (Raster dataId)",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": "",
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "perPage",
					"value": "200"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "sortBy",
					"value": "metadata.createdOn"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "order",
					"value": "desc"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "keyword",
					"value": "{{dataId_raster}}"
				}
			],
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nvar found_raster = false;\nvar found_keyword = true;\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'deploymentId', 'skip', 'data[]')) {\n            found_raster = (found_raster || data.data[i].deploymentId === postman.getEnvironmentVariable('deploymentId_raster'));\n        }\n        found_keyword = found_keyword && JSON.stringify(data.data[i]).match(postman.getEnvironmentVariable('dataId_raster'));\n    }\n    if (testLevels(tests, data, 'pagination.count') && testLevels(tests, data, 'pagination.perPage')) {\n        tests[\"Count is correct\"] = data.pagination.count === data.data.length || data.pagination.perPage === data.data.length;\n    }\n}\n\ntests[\"Ingested Raster data found in list\"] = found_raster;\ntests[\"All results contain the keyword\"] = found_keyword;",
			"time": 1496326960157,
			"url": "https://pz-gateway.{{domain}}/deployment?perPage=200&sortBy=metadata.createdOn&order=desc&keyword={{dataId_raster}}",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt a text ingest without specifying the \"dataType\" parameter.",
			"descriptionFormat": "html",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "d761df0b-c6f5-71de-6762-50a8c1cfeb7c",
			"method": "POST",
			"name": "Ingest Text - No dataType",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'errors', 'array')) {\n    if (testLevels(tests, data.errors[0], 'field', 'skip', 'errors[0].')) {\n        tests[\"Problem with deploymentType\"] = data.errors[0].field === 'data.dataType';\n    }\n    if (testLevels(tests, data.errors[0], 'defaultMessage', 'string', 'errors[0].')) {\n        tests[\"Cannot Be Null Message\"] = data.errors[0].defaultMessage.match(/null/i);\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/data",
			"rawModeData": "{\r\n  \"data\": {\r\n    \"metadata\": {\r\n        \"description\": \"A file for integration tests.\"\r\n    }\r\n  },\r\n  \"type\": \"ingest\",\r\n  \"host\": false\r\n}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Retrieve an API key for testing.",
			"folder": "17e8a8db-12f5-c81b-4e5b-82b7f1420a09",
			"headerData": [
				{
					"description": "",
					"enabled": true,
					"key": "Authorization",
					"value": ""
				}
			],
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{cert1}}"
			},
			"id": "d81bae55-bb44-e960-8c5f-5ab77fdbe72d",
			"method": "GET",
			"name": "Get Key",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": "",
			"queryParams": [],
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'uuid')) {\n    postman.setEnvironmentVariable('API Key', data.uuid);\n} else {\n    // postman.setNextRequest('');\n}",
			"time": 1502822262438,
			"url": "https://pz-gateway.{{domain}}/v2/key",
			"version": 2,
			"rawModeData": ""
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt a text ingest without specifying the \"dataType.content\" parameter.",
			"descriptionFormat": "html",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "db32ecc1-d12d-05cf-1550-7d51f6c7145b",
			"method": "POST",
			"name": "Ingest Text - No dataType.content",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'errors', 'array')) {\n    if (testLevels(tests, data.errors[0], 'field', 'skip', 'errors[0].')) {\n        tests[\"Problem with deploymentType\"] = data.errors[0].field === 'data.dataType.content';\n    }\n    if (testLevels(tests, data.errors[0], 'defaultMessage', 'string', 'errors[0].')) {\n        tests[\"Cannot Be Null Message\"] = data.errors[0].defaultMessage.match(/null/i);\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/data",
			"rawModeData": "{\r\n  \"data\": {\r\n    \"dataType\": {\r\n        \"type\": \"text\"\r\n    },\r\n    \"metadata\": {\r\n        \"description\": \"A file for integration tests.\"\r\n    }\r\n  },\r\n  \"type\": \"ingest\",\r\n  \"host\": false\r\n}"
		},
		{
			"id": "dbf61b56-d9c9-a9d5-5548-9ff76e5c8cba",
			"headers": "Authorization: \n",
			"headerData": [
				{
					"key": "Authorization",
					"value": "",
					"description": "",
					"enabled": true
				}
			],
			"url": "https://pz-gateway.{{domain}}/data/file",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [
				{
					"enabled": true,
					"key": "data",
					"type": "text",
					"value": "{ \"type\": \"ingest\", \"host\": \"true\", \"data\" : { \"dataType\": { \"type\": \"geojson\" }, \"metadata\": { \"name\": \"Test.geojson\", \"description\": \"A file for integration tests.\", \"classType\": { \"classification\": \"unclassified\" } } } }"
				},
				{
					"enabled": true,
					"key": "file",
					"type": "file",
					"value": "Test.geojson"
				}
			],
			"dataMode": "params",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.jobId')) {\n    postman.setEnvironmentVariable(\"jobId_geojson\",data.data.jobId);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1503692254689,
			"name": "Ingest GeoJSON",
			"description": "Ingest a local geoJSON file into piazza.",
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "List ingested data (filetered with the keyword, \"integration\"), making sure that the data ingested in this suite of tests is present.",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headerData": [
				{
					"description": "",
					"enabled": true,
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"description": "",
					"enabled": true,
					"key": "Authorization",
					"value": ""
				}
			],
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "de7293da-5bcc-cc27-2c1b-fd9ce5fe327e",
			"method": "GET",
			"name": "List Data with Keyword",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": "",
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "perPage",
					"value": "200"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "sortBy",
					"value": "metadata.createdOn"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "order",
					"value": "desc"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "keyword",
					"value": "integration"
				}
			],
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nvar found_geojson = false;\nvar found_raster = false;\nvar found_shape = false;\nvar found_text = false;\nvar found_keyword = true;\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'dataId', 'skip', 'data[]')) {\n            found_geojson = (found_geojson || data.data[i].dataId === postman.getEnvironmentVariable('dataId_geojson'));\n            found_raster = (found_raster || data.data[i].dataId === postman.getEnvironmentVariable('dataId_raster'));\n            found_shape = (found_shape || data.data[i].dataId === postman.getEnvironmentVariable('dataId_shape'));\n            found_text = (found_text || data.data[i].dataId === postman.getEnvironmentVariable('dataId_text'));\n        }\n        found_keyword = found_keyword && JSON.stringify(data.data[i]).match('integration');\n    }\n    if (testLevels(tests, data, 'pagination.count') && testLevels(tests, data, 'pagination.perPage')) {\n        tests[\"Count is correct\"] = data.pagination.count === data.data.length || data.pagination.perPage === data.data.length;\n    }\n}\n\ntests[\"Ingested GeoJSON data found in list\"] = found_geojson;\ntests[\"Ingested Raster data found in list\"] = found_raster;\ntests[\"Ingested Shape data found in list\"] = found_shape;\ntests[\"Ingested Text data found in list\"] = found_text;\ntests[\"All results contain 'integration'\"] = found_keyword;",
			"time": 1496326916467,
			"url": "https://pz-gateway.{{domain}}/data?perPage=200&sortBy=metadata.createdOn&order=desc&keyword=integration",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"collectionRequestId": "df42a862-32ee-8191-c99c-222d5f397810",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Check that the (Local) Raster deployment to a group was successful to get the deploymentId.  Repeat up to 10 times until the job is successful.",
			"descriptionFormat": "html",
			"folder": "8c5d6086-e0a0-057e-55c8-e356ef1cae8d",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "df42a862-32ee-8191-c99c-222d5f397810",
			"isFromCollection": true,
			"method": "GET",
			"name": "Get Raster deploymentId (in Group)",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\nvar data = parseJSON(tests, responseBody);\n\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.status')) {\n    if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Get Raster deploymentId (in Group)');\n            wait(1000);\n        }\n        else {\n            tests[\"Job finished in time (Bug #11544)\"] = false;\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n    else if (data.data.status === 'Success') {\n        postman.setEnvironmentVariable('retry_loop',0);\n        tests[\"Job finished in time\"] = true;\n        if (testLevels(tests, data, 'data.result.deployment.deploymentId')) {\n            postman.setEnvironmentVariable(\"deploymentId_raster\", data.data.result.deployment.deploymentId);\n        }\n    }\n    else {\n        tests[\"status should not be \" + data.data.status] = false;\n        postman.setEnvironmentVariable('retry_loop',0);\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt a deployment without specifying the \"type\" parameter.",
			"descriptionFormat": "html",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "df4c09ee-b9c0-51c5-3302-1c1f335cab01",
			"method": "POST",
			"name": "Deploy - No type",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Missing Type message\"] = data.message.match(/missing.*type/i);\n}",
			"url": "https://pz-gateway.{{domain}}/deployment",
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId_external}}\",\r\n  \"deploymentType\": \"geoserver\"\r\n}"
		},
		{
			"id": "e0144894-8d00-c384-e286-9b858220540d",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "",
					"description": "",
					"enabled": true
				}
			],
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_text}}",
			"queryParams": [],
			"preRequestScript": "",
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.metadata.createdBy')) {\n    tests[\"'createdBy' was not updated\"] = data.data.metadata.createdBy === postman.getEnvironmentVariable('username');\n}\nif (testLevels(tests, data, 'data.metadata.createdByJobId')) {\n    tests[\"'createdByJobId' was not updated\"] = data.data.metadata.createdByJobId === postman.getEnvironmentVariable('jobId_text');\n}\nif (testLevels(tests, data, 'data.metadata.createdOn')) {\n    tests[\"'createdOn' was not updated\"] = data.data.metadata.createdOn === postman.getEnvironmentVariable('orig_date');\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1503692427844,
			"name": "Protected Field - Validate",
			"description": "Check that none of the protected fields were updated.",
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"responses": [],
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that you can get the metadata of the ingested geoJSON.",
			"descriptionFormat": "html",
			"folder": "cc9daf7d-42ff-f62e-baf6-6982777d3ca2",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "e1dbba77-3657-4875-33cb-6368e9fd9f2b",
			"method": "GET",
			"name": "Get Geojson Metadata",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'data.dataId')) {\n    tests[\"Correct dataId returned\"] = data.data.dataId === postman.getEnvironmentVariable('dataId_geojson');\n}",
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_geojson}}",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Validate the details of the locally ingested raster metadata.",
			"descriptionFormat": "html",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "e1f15481-e3fd-64dd-de2d-feef3ce6ffff",
			"method": "GET",
			"name": "Get Raster Metadata Details",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'data.dataId')) {\n    tests[\"Correct dataId\"] = data.data.dataId === postman.getEnvironmentVariable('dataId_raster');\n}\nif (testLevels(tests, data, 'data.dataType.type')) {\n    tests[\"Type is 'geojson'\"] = data.data.dataType.type === 'raster';\n}\nif (testLevels(tests, data, 'data.metadata.description')) {\n    tests[\"Correct Description\"] = data.data.metadata.description === 'A file for integration tests.';\n}\nif (testLevels(tests, data, 'data.metadata.createdBy')) {\n    tests[\"Correct createdBy\"] = data.data.metadata.createdBy === postman.getEnvironmentVariable('username');\n}\nif (testLevels(tests, data, 'data.metadata.createdOn', 'string')) {\n    tests[\"Date Generated\"] = data.data.metadata.createdOn.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);\n    tests[\"Created in the last half hour\"] = (Date.now() - Date.parse(data.data.metadata.createdOn)) <= 1800000;\n}\nif (testLevels(tests, data, 'data.metadata.createdByJobId')) {\n    tests[\"Correct createdByJobId\"] = data.data.metadata.createdByJobId === postman.getEnvironmentVariable('jobId_raster');\n}\nif (testLevels(tests, data, 'data.metadata.name')) {\n    tests[\"Correct name\"] = data.data.metadata.name === 'terrametrics.tif';\n}\nif (testLevels(tests, data, 'data.spatialMetadata.minX')) {\n    tests[\"Correct minX\"] = data.data.spatialMetadata.minX === -48.52855770516021;\n}\nif (testLevels(tests, data, 'data.spatialMetadata.maxX')) {\n    tests[\"Correct maxX\"] = data.data.spatialMetadata.maxX === -48.34313089042421;\n}\nif (testLevels(tests, data, 'data.spatialMetadata.minY')) {\n    tests[\"Correct minY\"] = data.data.spatialMetadata.minY === -6.404746816973356;\n}\nif (testLevels(tests, data, 'data.spatialMetadata.maxY')) {\n    tests[\"Correct maxY\"] = data.data.spatialMetadata.maxY === -6.182956360425359;\n}",
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_raster}}",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that you can get the metadata of the ingested text.",
			"descriptionFormat": "html",
			"folder": "cc9daf7d-42ff-f62e-baf6-6982777d3ca2",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "e324b993-d03c-abc4-7ac6-ec0a6fc13535",
			"method": "GET",
			"name": "Get Text Metadata",
			"pathVariables": {},
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\"< < < < < < < < < < < IMPORTANT > > > > > > > > > > >\");\nconsole.log(\"      These tests represent important features.      \");\nconsole.log(\"Use extreme caution when pushing if these tests fail.\");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'data.dataId')) {\n    tests[\"Correct dataId returned\"] = data.data.dataId === postman.getEnvironmentVariable('dataId_text');\n}",
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_text}}",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Get the raw Shape that was previously ingested.",
			"descriptionFormat": "html",
			"folder": "8c5d6086-e0a0-057e-55c8-e356ef1cae8d",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "f0c0af14-29fb-bcf4-844c-1cea79373d93",
			"method": "GET",
			"name": "Download Shape",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"url": "https://pz-gateway.{{domain}}/file/{{dataId_shape}}",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"id": "f34b3995-c211-b38e-44c1-0ffadc4c0a6a",
			"headers": "Authorization: \n",
			"headerData": [
				{
					"key": "Authorization",
					"value": "",
					"description": "",
					"enabled": true
				}
			],
			"url": "https://pz-gateway.{{domain}}/data/file",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [
				{
					"enabled": true,
					"key": "data",
					"type": "text",
					"value": "{ \"type\": \"ingest\", \"host\": \"true\", \"data\" : { \"dataType\": { \"type\": \"shapefile\" }, \"metadata\": { \"name\": \"TestShape.zip\", \"description\": \"A file for integration tests.\", \"classType\": { \"classification\": \"unclassified\" } } } }"
				},
				{
					"enabled": true,
					"key": "file",
					"type": "file",
					"value": "TestShape.zip"
				}
			],
			"dataMode": "params",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.jobId')) {\n    postman.setEnvironmentVariable(\"jobId_shape\",data.data.jobId);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1503692262124,
			"name": "Ingest Shape",
			"description": "Ingest a local shape file into piazza.",
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt a deployment without specifying the \"deploymentType\" parameter.",
			"descriptionFormat": "html",
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "f3c90946-1a2e-46e2-1485-3de249cdd466",
			"method": "POST",
			"name": "Deploy - No deploymentType",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'errors', 'array')) {\n    if (testLevels(tests, data.errors[0], 'field', 'skip', 'errors[0].')) {\n        tests[\"Problem with deploymentType\"] = data.errors[0].field === 'deploymentType';\n    }\n    if (testLevels(tests, data.errors[0], 'defaultMessage', 'string', 'errors[0].')) {\n        tests[\"Cannot Be Null Message\"] = data.errors[0].defaultMessage.match(/null/i);\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/deployment",
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId_external}}\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Get the raw, large (~5 MB) geoJSON that was previously ingested.",
			"descriptionFormat": "html",
			"folder": "cc9daf7d-42ff-f62e-baf6-6982777d3ca2",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "f3de1268-2db6-c48a-5926-5045ff95e973",
			"method": "GET",
			"name": "Large - Download Geojson",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;",
			"url": "https://pz-gateway.{{domain}}/file/{{dataId_geojson_large}}",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Get the raw geoJSON that was previously ingested.",
			"descriptionFormat": "html",
			"folder": "8c5d6086-e0a0-057e-55c8-e356ef1cae8d",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "f535272c-e862-97eb-cb88-8d87cb12a167",
			"method": "GET",
			"name": "Download Geojson",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Downloaded File has correct content\"] = responseBody === postman.getEnvironmentVariable(\"Ingested Geojson\");",
			"url": "https://pz-gateway.{{domain}}/file/{{dataId_geojson}}",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		}
	]
}
