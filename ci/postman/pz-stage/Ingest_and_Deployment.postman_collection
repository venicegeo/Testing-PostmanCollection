{
	"id": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
	"name": "Ingest_and_Deployment",
	"description": "",
	"order": [],
	"folders": [
		{
			"owner": "699425",
			"lastUpdatedBy": "699425",
			"lastRevision": 657378380,
			"id": "17e8a8db-12f5-c81b-4e5b-82b7f1420a09",
			"name": "1_Startup",
			"description": "",
			"order": [
				"8dd63204-ede6-6a79-d203-2f981dd8870a",
				"d81bae55-bb44-e960-8c5f-5ab77fdbe72d",
				"25c9808c-c57a-67bb-1aba-8141bb74e7e5",
				"a0b17535-532b-1430-ba19-d6c48b9ecd82",
				"dbf61b56-d9c9-a9d5-5548-9ff76e5c8cba",
				"0f893e8d-3a66-1c4c-501e-a76aac3a69ad",
				"28935e7f-02b7-0032-7ea2-7c1c7f227a3a",
				"d42fe417-d455-19ce-fa34-98480ad31817",
				"f34b3995-c211-b38e-44c1-0ffadc4c0a6a",
				"a9dcf3be-7312-35fb-48e1-fdb79420690b",
				"befaada0-9ba2-caa8-81d6-5cf5367af5d5",
				"45feda0c-b5cc-cf6e-aa0d-ad2f9558a1b9"
			],
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00"
		},
		{
			"owner": "699425",
			"lastUpdatedBy": "699425",
			"lastRevision": 657391007,
			"id": "8c5d6086-e0a0-057e-55c8-e356ef1cae8d",
			"name": "2_Critical",
			"description": "",
			"order": [
				"486328ee-6c58-4a75-0742-488f610f9a13",
				"f535272c-e862-97eb-cb88-8d87cb12a167",
				"a0f390c9-22d3-b38b-1a37-3b4ed5bb52bf",
				"f0c0af14-29fb-bcf4-844c-1cea79373d93",
				"6e0ddb52-3da6-a62b-c32e-3f5740aac73d",
				"c91de108-42ae-e0d2-8e26-c22abcf43718",
				"9f7880f2-49d9-c8d6-1e87-5164634fba27",
				"9cc792d2-4473-7557-bb60-0bcf44b29ce1",
				"94c5d1fc-fa4f-dbb1-535f-61c14774f072",
				"c0c39868-8475-c607-fdb4-b6a1784d7205",
				"7945c76c-fb2f-d4be-8c68-4b883847902c",
				"df42a862-32ee-8191-c99c-222d5f397810",
				"674b0829-8175-9433-c789-9a86cff25f34",
				"155c7a62-0595-e14c-ab6f-4408d451e1cd"
			]
		},
		{
			"owner": "699425",
			"lastUpdatedBy": "699425",
			"lastRevision": 695516849,
			"id": "cc9daf7d-42ff-f62e-baf6-6982777d3ca2",
			"name": "3_Important",
			"description": "",
			"order": [
				"e324b993-d03c-abc4-7ac6-ec0a6fc13535",
				"e1dbba77-3657-4875-33cb-6368e9fd9f2b",
				"10d11622-39d1-414f-b959-d153973849e2",
				"c10a59ee-d08c-48c5-b8b7-676345673a90",
				"234e6a56-d982-5de3-453c-dcae55f93f87",
				"33c9840f-a208-1d25-f86a-b514c7f6434a",
				"14b5af2a-5436-ef79-8f5a-228735052685",
				"cd64dd9a-30ca-c8da-e1ce-4e17e99dfb43",
				"798c3664-62e7-a010-7bc9-b6bd9c4e6576",
				"a9b7e500-3c99-c2fc-0ba9-55fa8a049e08",
				"2d05af9b-4d59-95bf-3551-bd2a08e0dcb6",
				"a13f67ad-ad40-569f-29f6-21343f0889b3",
				"758a61cf-e95d-8ad1-4e6f-fb0a7d3d40a0",
				"369eb786-5bb2-7c1a-8572-505663d7195b",
				"47fc77ab-73e0-ed3a-1aa5-aa1da435f868",
				"f3de1268-2db6-c48a-5926-5045ff95e973",
				"6fa78b4f-932d-4dac-9a70-2339a7f45d40",
				"87b2bcac-5897-ed07-09e5-f2b8b27cb6e9",
				"ab39292f-2466-1e67-4934-fcda0178e59a"
			]
		},
		{
			"owner": "699425",
			"lastUpdatedBy": "699425",
			"lastRevision": 837545753,
			"id": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"name": "4_Low",
			"description": "",
			"order": [
				"aa468395-a868-76ff-b905-56f2a002ea99",
				"b0ed611f-c055-c916-f590-a62d0801cea1",
				"e1f15481-e3fd-64dd-de2d-feef3ce6ffff",
				"c38641a0-3320-2c3e-2597-33c4c173cc3c",
				"4401d44a-fb95-e00b-1a3e-cad4dc1d1a60",
				"02a9d934-b858-0291-5616-e87feff824a4",
				"36bd0e76-1f4b-3d13-451d-ea6b6de6afba",
				"524be54c-92a3-e706-d018-8374287e9c52",
				"49a8793b-c00a-0a51-fb69-1ec4dc4719ee",
				"521d4871-6cee-0715-d6fa-ca9b85caab84",
				"b30814ba-627c-a2a2-fc7f-69e3cea7a388",
				"0b84a8c8-673c-cec3-9818-3d8639635e20",
				"de7293da-5bcc-cc27-2c1b-fd9ce5fe327e",
				"d6b91e1a-1ccd-cca5-9a02-f597b552c986",
				"ab37606f-d67f-526a-f5c5-d733ee179edf",
				"6de3ba54-091d-d836-bea1-960749b10f52",
				"a8c4ba92-6790-42be-4172-9e823c456909",
				"2f238c97-184e-5750-e310-0817771248f4",
				"54419072-1683-161b-115f-865562d3320d",
				"2683d240-8f0b-2f00-f8a3-b48814593fe3",
				"b6cf60c7-826f-0435-f24f-027b52be8a69",
				"1b5ec49d-1212-a6d4-ddf1-313ed4ca6bf9",
				"65d8c7bf-f7fc-7c2e-fff1-908573085b72",
				"9e217a32-78d4-25f6-ee18-1b4ff118c82d",
				"8dc7c1e8-aa20-ecd9-6a0c-00fb0300646d",
				"c2ec915c-e6d5-759a-251b-0cfa33760729",
				"87eb4860-6bb3-fe8e-ed57-ebf670de92c5",
				"a4cfb317-ef4f-72fd-6091-db7625233f1e",
				"36ae7e32-2c43-6e99-8cfd-836322831ef1",
				"b7ccfe3b-7ff6-332a-1712-72d2e005a3de",
				"d2e77455-ea60-90ca-a3aa-11d6adb2790a",
				"8189b31e-cf59-6180-68d2-c4c76c7d0037",
				"b126061e-c83f-80e1-9d0f-1fafa02bebe3",
				"21d9b17c-b6d2-53ab-bdaa-ce7fd2dfa4fb",
				"9647097d-9b8f-525b-c6ca-c26aa3b24557",
				"df4c09ee-b9c0-51c5-3302-1c1f335cab01",
				"f3c90946-1a2e-46e2-1485-3de249cdd466",
				"3e9d0c5d-64b4-90f6-f3ae-5b845eaa2816",
				"9065ecf5-a000-6cbc-f05b-9d9046e0c5c3",
				"ab674007-7511-950b-d794-d4fd4a3afb03",
				"d761df0b-c6f5-71de-6762-50a8c1cfeb7c",
				"4734c091-ff7f-aeeb-6155-5319750daf8c",
				"db32ecc1-d12d-05cf-1550-7d51f6c7145b",
				"630c2b07-184a-dc75-5cf2-13302603187a",
				"6af947e8-ae49-6d68-cf73-2bb7fff1a7d0",
				"7c7daea9-87bf-b938-6779-e61f04d16fab",
				"ad4c398b-e5c3-6106-3792-16ef8cf1a86f",
				"8ca4b1e4-b53d-988e-a7e5-f3e7010f1dfb",
				"9c3527f3-0519-3cdd-c175-172f7d5758cb",
				"79331ad8-3e53-7b3f-e745-9a74e05b934e",
				"5ed8f4b2-e203-78af-37d9-af4f96104648"
			]
		},
		{
			"owner": "699425",
			"lastUpdatedBy": "699425",
			"lastRevision": 837545347,
			"id": "3fdd6abc-222f-5021-48a6-3222396757d4",
			"name": "5_Teardown",
			"description": "",
			"order": [
				"39e87028-ddd1-d702-b78c-01c8721196c2",
				"4fa6a70c-498e-e3f7-9611-6439493bb12c",
				"2bd939cc-c166-299b-7259-d07beb4d30a4",
				"d49e92d8-b4ef-2af1-ddc5-6cd9d264890d",
				"d03bde33-baaf-3b10-9b43-00b53cd57af4"
			]
		}
	],
	"timestamp": 0,
	"owner": "699425",
	"public": false,
	"requests": [
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "02a9d934-b858-0291-5616-e87feff824a4",
			"name": "Get Geojson Deployment Metadata Details",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Validate the details of the geoJSON deployment metadata.",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId_geojson}}",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.deployment.deploymentId')) {\n    tests[\"Correct deploymentId returned\"] = data.data.deployment.deploymentId === postman.getEnvironmentVariable('deploymentId_geojson');\n}\ntestLevels(tests, data, 'data.deployment.capabilitiesUrl');\nif (testLevels(tests, data, 'data.deployment.dataId')) {\n    tests[\"Correct dataId\"] = data.data.deployment.dataId === postman.getEnvironmentVariable('dataId_geojson');\n}\nif (testLevels(tests, data, 'data.deployment.layer')) {\n    tests[\"Layer matches dataId\"] = data.data.deployment.layer === postman.getEnvironmentVariable('dataId_geojson');\n}\nif (testLevels(tests, data, 'data.deployment.createdOn', 'string')) {\n    tests[\"createdOn Date Generated\"] = data.data.deployment.createdOn.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);\n    tests[\"Created in the last half hour\"] = (Date.now() - Date.parse(data.data.deployment.createdOn)) <= 1800000;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId_shape}}\",\r\n  \"deploymentGroupId\": \"{{deploymentGroupId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "0b84a8c8-673c-cec3-9818-3d8639635e20",
			"name": "Complex Query - Search Name (TestShape.zip)",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Check that the Shape deployment (and no other deploymens) created in this suite of tests are present in the result of an Elastic Search query.\nThis query is checking that \"dataResource.metadata.name\" contains \"TestShape.zip\".",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/data/query",
			"preRequestScript": null,
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200 (Bug #11888)\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nvar found_shape = false;\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'dataId', 'skip', 'data[]')) {\n            found_shape = (found_shape || data.data[i].dataId === postman.getEnvironmentVariable('dataId_shape'));\n        }\n    }\n}\n\ntests[\"Ingested GeoJSON data found in list\"] = found_shape;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\n    \"query\": {\n        \"match\": {\n            \"dataResource.metadata.name\": \"TestShape.zip\"\n        }\n    }\n}"
		},
		{
			"id": "0f893e8d-3a66-1c4c-501e-a76aac3a69ad",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId_geojson}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.status')) {\n    if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Get GeoJSON dataId');\n            wait(1000);\n        }\n        else {\n            tests[\"Job finished in time\"] = false;\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n    else if (data.data.status === 'Success') {\n        postman.setEnvironmentVariable('retry_loop',0);\n        tests[\"Job finished in time\"] = true;\n        if (testLevels(tests, data, 'data.result.dataId')) {\n            postman.setEnvironmentVariable(\"dataId_geojson\", data.data.result.dataId);\n        }\n    }\n    else {\n        tests[\"status should not be \" + data.data.status] = false;\n        postman.setEnvironmentVariable('retry_loop',0);\n    }\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1485367101905,
			"name": "Get GeoJSON dataId",
			"description": "Check the job status of the ingest geoJSON job to get the dataId.  Repeat up to 10 times until the job is successful.",
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00"
		},
		{
			"folder": "cc9daf7d-42ff-f62e-baf6-6982777d3ca2",
			"id": "10d11622-39d1-414f-b959-d153973849e2",
			"name": "Get Raster Metadata",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Check that you can get the metadata of the locally ingested raster.",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_raster}}",
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'data.dataId')) {\n    tests[\"Correct dataId returned\"] = data.data.dataId === postman.getEnvironmentVariable('dataId_raster');\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"folder": "cc9daf7d-42ff-f62e-baf6-6982777d3ca2",
			"id": "14b5af2a-5436-ef79-8f5a-228735052685",
			"name": "Get Geojson Deployment Metadata",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Get the geoJSON deployment metadata.",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId_geojson}}",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.deployment.deploymentId')) {\n    tests[\"Correct deploymentId returned\"] = data.data.deployment.deploymentId === postman.getEnvironmentVariable('deploymentId_geojson');\n}\nif (testLevels(tests, data, 'data.deployment.capabilitiesUrl') && !postman.getEnvironmentVariable('capabilitiesUrl').match('garbage')) {\n    postman.setEnvironmentVariable('capabilitiesUrl', data.data.deployment.capabilitiesUrl);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId_shape}}\",\r\n  \"deploymentGroupId\": \"{{deploymentGroupId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"folder": "8c5d6086-e0a0-057e-55c8-e356ef1cae8d",
			"id": "155c7a62-0595-e14c-ab6f-4408d451e1cd",
			"name": "Get Shape deploymentId (in Group)",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": "html",
			"description": "Check that the Shape deployment to a group was successful to get the deploymentId.  Repeat up to 10 times until the job is successful.",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
			"preRequestScript": "",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\nvar data = parseJSON(tests, responseBody);\n\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.status')) {\n    if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Get Shape deploymentId (in Group)');\n            wait(1000);\n        }\n        else {\n            tests[\"Job finished in time (Bug #11544)\"] = false;\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n    else if (data.data.status === 'Success') {\n        postman.setEnvironmentVariable('retry_loop',0);\n        tests[\"Job finished in time\"] = true;\n        if (testLevels(tests, data, 'data.result.deployment.deploymentId')) {\n            postman.setEnvironmentVariable(\"deploymentId_shape\", data.data.result.deployment.deploymentId);\n        }\n    }\n    else {\n        tests[\"status should not be \" + data.data.status] = false;\n        postman.setEnvironmentVariable('retry_loop',0);\n    }\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00"
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "1b5ec49d-1212-a6d4-ddf1-313ed4ca6bf9",
			"name": "Deleted Data - Delete Again",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "",
			"descriptionFormat": "html",
			"description": "Verify that the data that has already been deleted cannot be deleted again.",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"method": "DELETE",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_geojson}}",
			"preRequestScript": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 404\"] = responseCode.code === 404;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ee]rror/);\n}\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Not Found Message\"] = data.message.match(/[Nn]o/) && data.message.match(/[Ff]ound/);\n    tests[\"Deployment Id included in message\"] = data.message.match(postman.getEnvironmentVariable('dataId_geojson'));\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00"
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "21d9b17c-b6d2-53ab-bdaa-ce7fd2dfa4fb",
			"name": "Deploy Text",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Attempt to deploy ingested text to geoserver.",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/deployment",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.jobId')) {\n    postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId_text}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"folder": "cc9daf7d-42ff-f62e-baf6-6982777d3ca2",
			"id": "234e6a56-d982-5de3-453c-dcae55f93f87",
			"name": "Get Shape Metadata",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Check that you can get the metadata of the ingested Shape.\nVerify that the previous metadata update was successful.",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_shape}}",
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'data.dataId')) {\n    tests[\"Correct dataId returned\"] = data.data.dataId === postman.getEnvironmentVariable('dataId_shape');\n}\nif (testLevels(tests, data, 'data.metadata.name')) {\n    tests[\"Update was successful\"] = data.data.metadata.name === 'foo';\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"folder": "17e8a8db-12f5-c81b-4e5b-82b7f1420a09",
			"id": "25c9808c-c57a-67bb-1aba-8141bb74e7e5",
			"name": "Ingest Text",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Ingest text.",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/data",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.jobId')) {\n    postman.setEnvironmentVariable(\"jobId_text\",data.data.jobId);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"data\": {\r\n    \"dataType\": {\r\n        \"content\": \"{{Ingested Text}}\",\r\n        \"type\": \"text\"\r\n    },\r\n    \"metadata\": {\r\n        \"description\": \"A file for integration tests.\"\r\n    }\r\n  },\r\n  \"host\": false,\r\n  \"type\": \"ingest\"\r\n}"
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "2683d240-8f0b-2f00-f8a3-b48814593fe3",
			"name": "Deleted Group - Deploy - Job Status",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": "html",
			"description": "Check that the job to deploy to a deleted deploymentGroup failed.",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
			"preRequestScript": "",
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.status')) {\n    if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Deleted Group - Deploy - Job Status');\n            wait(1000);\n        }\n        else {\n            tests[\"Job finished in time\"] = false;\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n    else if (data.data.status === 'Error') {\n        postman.setEnvironmentVariable('retry_loop',0);\n        tests[\"Job finished in time\"] = true;\n        if (testLevels(tests, data, 'data.result.details', 'string')) {\n            tests[\"Details state Deployment Group does not exist\"] = data.data.result.details.match(/do.*no.*exist/i);\n            tests[\"deploymentGroupId included in details\"] = data.data.result.details.match(postman.getEnvironmentVariable('deploymentGroupId'));\n        }\n    }\n    else {\n        tests[\"status should not be \" + data.data.status + \" (Bug #9223)\"] = false;\n        postman.setEnvironmentVariable('retry_loop',0);\n    }\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00"
		},
		{
			"id": "28935e7f-02b7-0032-7ea2-7c1c7f227a3a",
			"headers": "Authorization: \n",
			"headerData": [
				{
					"key": "Authorization",
					"value": "",
					"description": "",
					"enabled": true
				}
			],
			"url": "https://pz-gateway.{{domain}}/data/file",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [
				{
					"key": "data",
					"value": "{ \"type\": \"ingest\", \"host\": \"true\", \"data\" : { \"dataType\": { \"type\": \"raster\" }, \"metadata\": { \"name\": \"terrametrics.tif\", \"description\": \"A file for integration tests.\", \"classType\": { \"classification\": \"unclassified\" } } } }",
					"type": "text",
					"enabled": true
				},
				{
					"key": "file",
					"value": "terrametrics.tif",
					"type": "file",
					"enabled": true
				}
			],
			"dataMode": "params",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.jobId')) {\n    postman.setEnvironmentVariable(\"jobId_raster\",data.data.jobId);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1500641881525,
			"name": "Ingest Raster",
			"description": "Ingest a local raster file into piazza.",
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00"
		},
		{
			"folder": "3fdd6abc-222f-5021-48a6-3222396757d4",
			"id": "2bd939cc-c166-299b-7259-d07beb4d30a4",
			"name": "Delete Text Data",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "",
			"descriptionFormat": "html",
			"description": "Delete the text dataId used in this suite of tests.",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"method": "DELETE",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_text}}",
			"preRequestScript": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00"
		},
		{
			"folder": "cc9daf7d-42ff-f62e-baf6-6982777d3ca2",
			"id": "2d05af9b-4d59-95bf-3551-bd2a08e0dcb6",
			"name": "Validate capabilitiesUrl",
			"dataMode": "params",
			"data": null,
			"rawModeData": null,
			"descriptionFormat": "html",
			"description": "Check that the \"capabilitiesUrl\" from deployment metadata is a valid URL.",
			"headers": "",
			"method": "GET",
			"pathVariables": {},
			"url": "{{capabilitiesUrl}}",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00"
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "2f238c97-184e-5750-e310-0817771248f4",
			"name": "Delete Deployment Group Again",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "",
			"descriptionFormat": "html",
			"description": "Verify that a deployment that has already been deleted cannot be deleted again.",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"method": "DELETE",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/deployment/group/{{deploymentGroupId}}",
			"preRequestScript": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 404\"] = responseCode.code === 404;\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Does not exist message\"] = data.message.match(/no.*exist/i);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00"
		},
		{
			"folder": "cc9daf7d-42ff-f62e-baf6-6982777d3ca2",
			"id": "33c9840f-a208-1d25-f86a-b514c7f6434a",
			"name": "Get External Raster Metadata",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Check that you can get the metadata of the externally ingested raster.",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_external}}",
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'data.dataId')) {\n    tests[\"Correct dataId returned\"] = data.data.dataId === postman.getEnvironmentVariable('dataId_external');\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"id": "369eb786-5bb2-7c1a-8572-505663d7195b",
			"headers": "Authorization: \n",
			"headerData": [
				{
					"key": "Authorization",
					"value": "",
					"description": "",
					"enabled": true
				}
			],
			"url": "https://pz-gateway.{{domain}}/data/file",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [
				{
					"key": "data",
					"value": "{ \"type\": \"ingest\", \"host\": \"true\", \"data\" : { \"dataType\": { \"type\": \"geojson\" }, \"metadata\": { \"name\": \"Test.geojson\", \"description\": \"A file for integration tests.\", \"classType\": { \"classification\": \"unclassified\" } } } }",
					"type": "text",
					"enabled": true
				},
				{
					"key": "file",
					"value": "beachfront.geojson",
					"type": "file",
					"enabled": true
				}
			],
			"dataMode": "params",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.jobId')) {\n    postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1500642267570,
			"name": "Large - Ingest GeoJSON",
			"description": "Ingest a large (~ 5MB) geoJSON file into piazza.",
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00"
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "36ae7e32-2c43-6e99-8cfd-836322831ef1",
			"name": "Deleted Data - Verify Removed from ES",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Query the /data/query (Elastic Search) endpoint to verify that the deleted dataId is not present in the result.",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/data/query",
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200 (Bug #11888)\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nvar found_geojson = false;\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'dataId', 'skip', 'data[]')) {\n            found_geojson = (found_geojson || data.data[i].dataId === postman.getEnvironmentVariable('dataId_geojson'));\n        }\n    }\n}\n\ntests[\"Ingested GeoJSON removed from list (Bug #9174)\"] = !found_geojson;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\n    \"query\": {\n        \"match\": {\n            \"dataResource.metadata.description\": \"integration\"\n        }\n    }\n}"
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "36bd0e76-1f4b-3d13-451d-ea6b6de6afba",
			"name": "Get Raster Deployment Metadata Details",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Validate the details of the (Local) Raster deployment metadata.",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId_raster}}",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.deployment.deploymentId')) {\n    tests[\"Correct deploymentId returned\"] = data.data.deployment.deploymentId === postman.getEnvironmentVariable('deploymentId_raster');\n}\ntestLevels(tests, data, 'data.deployment.capabilitiesUrl');\nif (testLevels(tests, data, 'data.deployment.dataId')) {\n    tests[\"Correct dataId\"] = data.data.deployment.dataId === postman.getEnvironmentVariable('dataId_raster');\n}\nif (testLevels(tests, data, 'data.deployment.layer')) {\n    tests[\"Layer matches dataId\"] = data.data.deployment.layer === postman.getEnvironmentVariable('dataId_raster');\n}\nif (testLevels(tests, data, 'data.deployment.createdOn', 'string')) {\n    tests[\"createdOn Date Generated\"] = data.data.deployment.createdOn.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);\n    tests[\"Created in the last half hour\"] = (Date.now() - Date.parse(data.data.deployment.createdOn)) <= 1800000;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId_shape}}\",\r\n  \"deploymentGroupId\": \"{{deploymentGroupId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"folder": "3fdd6abc-222f-5021-48a6-3222396757d4",
			"id": "39e87028-ddd1-d702-b78c-01c8721196c2",
			"name": "Delete Raster Data",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "",
			"descriptionFormat": "html",
			"description": "Delete the (local) raster dataId used in this suite of tests.",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"method": "DELETE",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_raster}}",
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\" < < < < < < < < < < < < TEAR-DOWN > > > > > > > > > > > \");\nconsole.log(\"These tests destroy any items created by previous tests. \");\nconsole.log(\" These tests represent important features, like DELETEs. \");\nconsole.log(\"            DO NOT PUSH if these tests fail.             \");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00"
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "3e9d0c5d-64b4-90f6-f3ae-5b845eaa2816",
			"name": "Deploy - No dataId",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Attempt a deployment without specifying the \"dataId\" parameter.",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/deployment",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'errors', 'array')) {\n    if (testLevels(tests, data.errors[0], 'field', 'skip', 'errors[0].')) {\n        tests[\"Problem with deploymentType\"] = data.errors[0].field === 'dataId';\n    }\n    if (testLevels(tests, data.errors[0], 'defaultMessage', 'string', 'errors[0].')) {\n        tests[\"Cannot Be Null Message\"] = data.errors[0].defaultMessage.match(/null/i);\n    }\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "4401d44a-fb95-e00b-1a3e-cad4dc1d1a60",
			"name": "Get External Raster Metadata Details",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Validate the details of the externally ingested metadata.",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_external}}",
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'data.dataId')) {\n    tests[\"Correct dataId\"] = data.data.dataId === postman.getEnvironmentVariable('dataId_external');\n}\nif (testLevels(tests, data, 'data.dataType.type')) {\n    tests[\"Type is 'geojson'\"] = data.data.dataType.type === 'raster';\n}\nif (testLevels(tests, data, 'data.metadata.description')) {\n    tests[\"Correct Description\"] = data.data.metadata.description === 'A file for integration tests.';\n}\nif (testLevels(tests, data, 'data.metadata.createdBy')) {\n    tests[\"Correct createdBy\"] = data.data.metadata.createdBy === postman.getEnvironmentVariable('username');\n}\nif (testLevels(tests, data, 'data.metadata.createdOn', 'string')) {\n    tests[\"Date Generated\"] = data.data.metadata.createdOn.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);\n    tests[\"Created in the last half hour\"] = (Date.now() - Date.parse(data.data.metadata.createdOn)) <= 1800000;\n}\nif (testLevels(tests, data, 'data.metadata.createdByJobId')) {\n    tests[\"Correct createdByJobId\"] = data.data.metadata.createdByJobId === postman.getEnvironmentVariable('jobId_external');\n}\nif (testLevels(tests, data, 'data.metadata.name')) {\n    tests[\"Correct name\"] = data.data.metadata.name === 'My Test raster external file';\n}\nif (testLevels(tests, data, 'data.spatialMetadata.minX')) {\n    tests[\"Correct minX\"] = data.data.spatialMetadata.minX === 496147.97;\n}\nif (testLevels(tests, data, 'data.spatialMetadata.maxX')) {\n    tests[\"Correct maxX\"] = data.data.spatialMetadata.maxX === 496545.97;\n}\nif (testLevels(tests, data, 'data.spatialMetadata.minY')) {\n    tests[\"Correct minY\"] = data.data.spatialMetadata.minY === 5422119.88;\n}\nif (testLevels(tests, data, 'data.spatialMetadata.maxY')) {\n    tests[\"Correct maxY\"] = data.data.spatialMetadata.maxY === 5422343.88;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"folder": "17e8a8db-12f5-c81b-4e5b-82b7f1420a09",
			"id": "45feda0c-b5cc-cf6e-aa0d-ad2f9558a1b9",
			"name": "Get External Raster dataId",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": "html",
			"description": "Check the job status of the ingestexternal raster job to get the dataId.  Repeat up to 10 times until the job is successful.",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/job/{{jobId_external}}",
			"preRequestScript": "",
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.status')) {\n    if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Get External Raster dataId');\n            wait(1000);\n        }\n        else {\n            tests[\"Job finished in time\"] = false;\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n    else if (data.data.status === 'Success') {\n        postman.setEnvironmentVariable('retry_loop',0);\n        tests[\"Job finished in time\"] = true;\n        if (testLevels(tests, data, 'data.result.dataId')) {\n            postman.setEnvironmentVariable(\"dataId_external\", data.data.result.dataId);\n        }\n    }\n    else {\n        tests[\"status should not be \" + data.data.status] = false;\n        postman.setEnvironmentVariable('retry_loop',0);\n    }\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00"
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "4734c091-ff7f-aeeb-6155-5319750daf8c",
			"name": "Ingest Text - No dataType.type",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Attempt a text ingest without specifying the \"dataType.type\" parameter.",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/data",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Missing Type message\"] = data.message.match(/missing.*type/i);\n    tests[\"Mentions 'data.dataType' object\"] = data.message.match(/data\\.dataType/i);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"data\": {\r\n    \"dataType\": {\r\n        \"content\": \"{{Ingested Text}}\"\r\n    },\r\n    \"metadata\": {\r\n        \"description\": \"A file for integration tests.\"\r\n    }\r\n  },\r\n  \"type\": \"ingest\",\r\n  \"host\": false\r\n}"
		},
		{
			"folder": "cc9daf7d-42ff-f62e-baf6-6982777d3ca2",
			"id": "47fc77ab-73e0-ed3a-1aa5-aa1da435f868",
			"name": "Large - Get GeoJSON dataId",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": "html",
			"description": "Check the job status of the ingest large (~5 MB) geoJSON job to get the dataId.  Repeat up to 10 times until the job is successful.",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
			"preRequestScript": "",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\nvar data = parseJSON(tests, responseBody);\n\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.status')) {\n    if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Large - Get GeoJSON dataId');\n            wait(3000); // Longer because of larger file.\n        }\n        else {\n            tests[\"Job finished in time\"] = false;\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n    else if (data.data.status === 'Success') {\n        postman.setEnvironmentVariable('retry_loop',0);\n        tests[\"Job finished in time\"] = true;\n        if (testLevels(tests, data, 'data.result.dataId')) {\n            postman.setEnvironmentVariable(\"dataId_geojson_large\", data.data.result.dataId);\n        }\n    }\n    else {\n        tests[\"status should not be \" + data.data.status] = false;\n        postman.setEnvironmentVariable('retry_loop',0);\n    }\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00"
		},
		{
			"folder": "8c5d6086-e0a0-057e-55c8-e356ef1cae8d",
			"id": "486328ee-6c58-4a75-0742-488f610f9a13",
			"name": "Download Text",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Get the raw text that was previously ingested.",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/file/{{dataId_text}}",
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\"< < < < < < < < < < < CRITICAL > > > > > > > > > >\");\nconsole.log(\"    These tests represent basic functionality.    \");\nconsole.log(\"         DO NOT PUSH if these tests fail.         \");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Downloaded File has correct content\"] = responseBody === postman.getEnvironmentVariable(\"Ingested Text\");",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "49a8793b-c00a-0a51-fb69-1ec4dc4719ee",
			"name": "Get External Raster Deployment Metadata Details",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Validate the details of the (External) Raster deployment metadata.",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId_external}}",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.deployment.deploymentId')) {\n    tests[\"Correct deploymentId returned\"] = data.data.deployment.deploymentId === postman.getEnvironmentVariable('deploymentId_external');\n}\ntestLevels(tests, data, 'data.deployment.capabilitiesUrl');\nif (testLevels(tests, data, 'data.deployment.dataId')) {\n    tests[\"Correct dataId\"] = data.data.deployment.dataId === postman.getEnvironmentVariable('dataId_external');\n}\nif (testLevels(tests, data, 'data.deployment.layer')) {\n    tests[\"Layer matches dataId\"] = data.data.deployment.layer === postman.getEnvironmentVariable('dataId_external');\n}\nif (testLevels(tests, data, 'data.deployment.createdOn', 'string')) {\n    tests[\"createdOn Date Generated\"] = data.data.deployment.createdOn.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);\n    tests[\"Created in the last half hour\"] = (Date.now() - Date.parse(data.data.deployment.createdOn)) <= 1800000;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId_shape}}\",\r\n  \"deploymentGroupId\": \"{{deploymentGroupId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"folder": "3fdd6abc-222f-5021-48a6-3222396757d4",
			"id": "4fa6a70c-498e-e3f7-9611-6439493bb12c",
			"name": "Delete Shape Data",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "",
			"descriptionFormat": "html",
			"description": "Delete the shape dataId used in this suite of tests.",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"method": "DELETE",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_shape}}",
			"preRequestScript": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00"
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "521d4871-6cee-0715-d6fa-ca9b85caab84",
			"name": "Complex Query - Search Description",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Check that the deployments created in this suite of tests are present in the result of an Elastic Search query.\nThis query is checking that \"dataResource.metadata.descritpion\" contains \"integration\".",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/data/query",
			"preRequestScript": null,
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200 (Bug #11888)\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nvar found_geojson = false;\nvar found_raster = false;\nvar found_shape = false;\nvar found_text = false;\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'dataId', 'skip', 'data[]')) {\n            found_geojson = (found_geojson || data.data[i].dataId === postman.getEnvironmentVariable('dataId_geojson'));\n            found_raster = (found_raster || data.data[i].dataId === postman.getEnvironmentVariable('dataId_raster'));\n            found_shape = (found_shape || data.data[i].dataId === postman.getEnvironmentVariable('dataId_shape'));\n            found_text = (found_text || data.data[i].dataId === postman.getEnvironmentVariable('dataId_text'));\n        }\n    }\n}\n\ntests[\"Ingested GeoJSON data found in list\"] = found_geojson;\ntests[\"Ingested Raster data found in list\"] = found_raster;\ntests[\"Ingested Shape data found in list\"] = found_shape;\ntests[\"Ingested Text data found in list\"] = found_text;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\n    \"query\": {\n        \"match\": {\n            \"dataResource.metadata.description\": \"integration\"\n        }\n    }\n}"
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "524be54c-92a3-e706-d018-8374287e9c52",
			"name": "Get Shape Deployment Metadata Details",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Validate the details of the Shape deployment metadata.",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId_shape}}",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.deployment.deploymentId')) {\n    tests[\"Correct deploymentId returned\"] = data.data.deployment.deploymentId === postman.getEnvironmentVariable('deploymentId_shape');\n}\ntestLevels(tests, data, 'data.deployment.capabilitiesUrl');\nif (testLevels(tests, data, 'data.deployment.dataId')) {\n    tests[\"Correct dataId\"] = data.data.deployment.dataId === postman.getEnvironmentVariable('dataId_shape');\n}\nif (testLevels(tests, data, 'data.deployment.layer')) {\n    tests[\"Layer matches dataId\"] = data.data.deployment.layer === postman.getEnvironmentVariable('dataId_shape');\n}\nif (testLevels(tests, data, 'data.deployment.createdOn', 'string')) {\n    tests[\"createdOn Date Generated\"] = data.data.deployment.createdOn.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);\n    tests[\"Created in the last half hour\"] = (Date.now() - Date.parse(data.data.deployment.createdOn)) <= 1800000;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId_shape}}\",\r\n  \"deploymentGroupId\": \"{{deploymentGroupId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "54419072-1683-161b-115f-865562d3320d",
			"name": "Deleted Group - Deploy",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Attempt to make a deployment to a deleted deployment group.",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/deployment",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.jobId')) {\n    postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId_geojson}}\",\r\n  \"deploymentGroupId\": \"{{deploymentGroupId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "5ed8f4b2-e203-78af-37d9-af4f96104648",
			"name": "Ingest Text - Content as Array",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Attempt to ingest test with \"content\": [].",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/data",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Bad content message\"] = data.message.match(/content/i);\n    tests[\"Problem with ARRAY\"] = data.message.match(/array/i);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"data\": {\r\n    \"dataType\": {\r\n        \"content\": [\r\n          \"should\",\r\n          \"not\",\r\n          \"be\",\r\n          \"array\"\r\n          ],\r\n        \"type\": \"text\"\r\n    },\r\n    \"metadata\": {\r\n        \"description\": \"A file for integration tests.\"\r\n    }\r\n  },\r\n  \"host\": false,\r\n  \"type\": \"ingest\"\r\n}"
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "630c2b07-184a-dc75-5cf2-13302603187a",
			"name": "Deploy - Bad type",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Attempt a deployment with an invalid \"type\" parameter.",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/deployment",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Bad Type message\"] = data.message.match(/type/i);\n    tests[\"Good options given\"] = data.message.match(/known.*\\[(.*,?)*\\]/i);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId_geojson}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"~access\"\r\n}"
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "65d8c7bf-f7fc-7c2e-fff1-908573085b72",
			"name": "Deleted Data - GET",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "",
			"descriptionFormat": "html",
			"description": "Verify that the metadata of a dataId that has been deleted cannot be retrieved.",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_geojson}}",
			"preRequestScript": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 404\"] = responseCode.code === 404;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Error Type\"] = data.type.match(/[Ee]rror/);\n}\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Not Found Message\"] = data.message.match(/[Nn]o/) && data.message.match(/[Ff]ound/);\n    tests[\"Deployment Id included in message\"] = data.message.match(postman.getEnvironmentVariable('dataId_geojson'));\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00"
		},
		{
			"folder": "8c5d6086-e0a0-057e-55c8-e356ef1cae8d",
			"id": "674b0829-8175-9433-c789-9a86cff25f34",
			"name": "Deploy Shape into Group",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Deploy the previously ingested Shape to a geoserver deployment group.",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/deployment",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.jobId')) {\n    postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId_shape}}\",\r\n  \"deploymentGroupId\": \"{{deploymentGroupId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "6af947e8-ae49-6d68-cf73-2bb7fff1a7d0",
			"name": "Deploy - Bad deploymentType",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Attempt a deployment with an invalid \"deploymentType\" parameter.",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/deployment",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.jobId')) {\n    postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId_geojson}}\",\r\n  \"deploymentType\": \"~geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "6de3ba54-091d-d836-bea1-960749b10f52",
			"name": "Delete Deployment in Group",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "",
			"descriptionFormat": "html",
			"description": "Attempt to delete a deployment, the (Local) Raster, without deleting the group to which it was deployed.",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"method": "DELETE",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId_raster}}",
			"preRequestScript": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 500\"] = responseCode.code === 500;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Error response\"] = data.type.match(/[Ee]rror/);\n}\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Unable to delete message\"] = data.message.match(/unable.*delet/i);\n    tests[\"Deployment Id included in message\"] = data.message.match(postman.getEnvironmentVariable('dataId_raster'));\n    tests[\"Deployment Group Id included in message\"] = data.message.match(postman.getEnvironmentVariable('deploymentGroupId'));\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00"
		},
		{
			"folder": "8c5d6086-e0a0-057e-55c8-e356ef1cae8d",
			"id": "6e0ddb52-3da6-a62b-c32e-3f5740aac73d",
			"name": "Download External Raster",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Get the raw raster that was previously ingested (external source).",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/file/{{dataId_external}}",
			"preRequestScript": "",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"folder": "cc9daf7d-42ff-f62e-baf6-6982777d3ca2",
			"id": "6fa78b4f-932d-4dac-9a70-2339a7f45d40",
			"name": "Large - Deploy Geojson to Group",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Deploy the previously ingested large (~5 MB) geoJSON to a geoserver deployment group.",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/deployment",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.jobId')) {\n    postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId_geojson_large}}\",\r\n  \"deploymentGroupId\": \"{{deploymentGroupId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"folder": "cc9daf7d-42ff-f62e-baf6-6982777d3ca2",
			"id": "758a61cf-e95d-8ad1-4e6f-fb0a7d3d40a0",
			"name": "List Deployments",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Check that the deployments created in this suite of tests are present in the list of deployments.",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/deployment?perPage=200&sortBy=createdOn&order=desc",
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nvar found_external = false;\nvar found_geojson = false;\nvar found_raster = false;\nvar found_shape = false;\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'deploymentId', 'skip', 'data[]')) {\n            found_external = (found_external || data.data[i].deploymentId === postman.getEnvironmentVariable('deploymentId_external'));\n            found_geojson = (found_geojson || data.data[i].deploymentId === postman.getEnvironmentVariable('deploymentId_geojson'));\n            found_raster = (found_raster || data.data[i].deploymentId === postman.getEnvironmentVariable('deploymentId_raster'));\n            found_shape = (found_shape || data.data[i].deploymentId === postman.getEnvironmentVariable('deploymentId_shape'));\n        }\n    }\n}\n\n\ntests[\"Ingested External Raster deployment found in list\"] = found_external;\ntests[\"Ingested GeoJSON deployment found in list\"] = found_geojson;\ntests[\"Ingested Raster deployment found in list\"] = found_raster;\ntests[\"Ingested Shape deployment found in list\"] = found_shape;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "79331ad8-3e53-7b3f-e745-9a74e05b934e",
			"name": "Ingest Text - Content as Object",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Attempt to ingest test with \"content\": {}.",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/data",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Bad content message\"] = data.message.match(/content/i);\n    tests[\"Problem with OBJECT\"] = data.message.match(/object/i);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"data\": {\r\n    \"dataType\": {\r\n        \"content\": {\r\n          \"bad\": \"content\"\r\n        },\r\n        \"type\": \"text\"\r\n    },\r\n    \"metadata\": {\r\n        \"description\": \"A file for integration tests.\"\r\n    }\r\n  },\r\n  \"host\": false,\r\n  \"type\": \"ingest\"\r\n}"
		},
		{
			"folder": "8c5d6086-e0a0-057e-55c8-e356ef1cae8d",
			"id": "7945c76c-fb2f-d4be-8c68-4b883847902c",
			"name": "Deploy Raster into Group",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Deploy the previously ingested local raster to a geoserver deployment group.",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/deployment",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.jobId')) {\n    postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId_raster}}\",\r\n  \"deploymentGroupId\": \"{{deploymentGroupId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"folder": "cc9daf7d-42ff-f62e-baf6-6982777d3ca2",
			"id": "798c3664-62e7-a010-7bc9-b6bd9c4e6576",
			"name": "Get Shape Deployment Metadata",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Get the Shape deployment metadata.",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId_shape}}",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.deployment.deploymentId')) {\n    tests[\"Correct deploymentId returned\"] = data.data.deployment.deploymentId === postman.getEnvironmentVariable('deploymentId_shape');\n}\nif (testLevels(tests, data, 'data.deployment.capabilitiesUrl') && postman.getEnvironmentVariable('capabilitiesUrl').match(/garbage/)) {\n    postman.setEnvironmentVariable('capabilitiesUrl', data.data.deployment.capabilitiesUrl);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId_shape}}\",\r\n  \"deploymentGroupId\": \"{{deploymentGroupId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "7c7daea9-87bf-b938-6779-e61f04d16fab",
			"name": "Deploy - Bad deploymentType - Job Status",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": "html",
			"description": "Check that the job to deploy with a bad \"deploymentType\" parameter failed.",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
			"preRequestScript": "",
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.status')) {\n    if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Deploy - Bad deploymentType - Job Status');\n            wait(1000);\n        }\n        else {\n            tests[\"Job finished in time\"] = false;\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n    else if (data.data.status === 'Error') {\n        postman.setEnvironmentVariable('retry_loop',0);\n        tests[\"Job finished in time\"] = true;\n        if (testLevels(tests, data, 'data.result.details', 'string')) {\n            tests[\"Details mention that '~geoserver' is an unknown deployment type\"] = data.data.result.details.match(/unknown/i) && data.data.result.details.match(/type/i) && data.data.result.details.match(/~geoserver/i);\n        }\n    }\n    else {\n        tests[\"status should not be \" + data.data.status] = false;\n        postman.setEnvironmentVariable('retry_loop',0);\n    }\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00"
		},
		{
			"id": "8189b31e-cf59-6180-68d2-c4c76c7d0037",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId_raster}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 404\"] = responseCode.code === 404;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ee]rror/);\n}\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Not Found Message\"] = data.message.match(/[Nn]o/) && data.message.match(/[Ff]ound/);\n    tests[\"Deployment Id included in message\"] = data.message.match(postman.getEnvironmentVariable('deploymentId_raster'));\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1488472317481,
			"name": "Deleted Deployment - GET",
			"description": "Attempt to retrieve the metadata of the deleted deployment.",
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": ""
		},
		{
			"folder": "cc9daf7d-42ff-f62e-baf6-6982777d3ca2",
			"id": "87b2bcac-5897-ed07-09e5-f2b8b27cb6e9",
			"name": "Large - Get GeoJSON deploymentId",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": "html",
			"description": "Check that the large (~5 MB) geoJSON deployment to a group was successful to get the deploymentId.  Repeat up to 10 times until the job is successful.",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
			"preRequestScript": "",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\nvar data = parseJSON(tests, responseBody);\n\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.status')) {\n    if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Large - Get GeoJSON deploymentId');\n            wait(1000);\n        }\n        else {\n            tests[\"Job finished in time (Bug #11544)\"] = false;\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n    else if (data.data.status === 'Success') {\n        postman.setEnvironmentVariable('retry_loop',0);\n        tests[\"Job finished in time\"] = true;\n        if (testLevels(tests, data, 'data.result.deployment.deploymentId')) {\n            postman.setEnvironmentVariable(\"deploymentId_geojson_large\", data.data.result.deployment.deploymentId);\n        }\n    }\n    else {\n        tests[\"status should not be \" + data.data.status] = false;\n        postman.setEnvironmentVariable('retry_loop',0);\n    }\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00"
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "87eb4860-6bb3-fe8e-ed57-ebf670de92c5",
			"name": "Deleted Data - Deploy",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Attempt to create a deployment with a dataId that has been deleted.",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/deployment",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.jobId')) {\n    postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId_geojson}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "8ca4b1e4-b53d-988e-a7e5-f3e7010f1dfb",
			"name": "Ingest Text - Bad dataType.type",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Attempt a text ingest with an invalid \"dataType.type\" parameter.",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/data",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Bad Type message\"] = data.message.match(/type/i);\n    tests[\"Mentions 'data.dataType' object\"] = data.message.match(/data\\.dataType/i);\n    tests[\"Good options given\"] = data.message.match(/known.*\\[(.*,?)*\\]/i);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"data\": {\r\n    \"dataType\": {\r\n        \"content\": {\r\n          \"bad\": \"content\"\r\n        },\r\n        \"type\": \"~text\"\r\n    },\r\n    \"metadata\": {\r\n        \"description\": \"A file for integration tests.\"\r\n    }\r\n  },\r\n  \"host\": false,\r\n  \"type\": \"ingest\"\r\n}"
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "8dc7c1e8-aa20-ecd9-6a0c-00fb0300646d",
			"name": "Deleted Data - Verify Removed from List",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Retrun a list of dataIds, and verify that the one that was deleted is not present.",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/data?perPage=200&sortBy=metadata.createdOn&order=desc",
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nvar found_geojson = false;\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'dataId', 'skip', 'data[]')) {\n            found_geojson = (found_geojson || data.data[i].dataId === postman.getEnvironmentVariable('dataId_geojson'));\n        }\n    }\n}\n\ntests[\"Ingested GeoJSON removed from list\"] = !found_geojson;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"folder": "17e8a8db-12f5-c81b-4e5b-82b7f1420a09",
			"id": "8dd63204-ede6-6a79-d203-2f981dd8870a",
			"name": "Hello, pz-gateway!",
			"dataMode": "params",
			"data": null,
			"rawModeData": null,
			"descriptionFormat": null,
			"description": "Simple Health check to pz-gateway.  Postman Environemnt Variables are initialized in this step.",
			"headers": "Authorization: \n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/",
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\"< < < < < < < < < < < < < START-UP > > > > > > > > > > > \");\nconsole.log(\"   These tests create required environment variables.    \");\nconsole.log(\"    Any failures here will cause other tests to fail.    \");\nconsole.log(\"            DO NOT PUSH if these tests fail.             \");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"tests": "tests[\"Says Hello!\"] = responseBody.has('Hello');\npostman.setEnvironmentVariable('retry_loop',0);\npostman.setEnvironmentVariable('max_retries', 9);\npostman.setEnvironmentVariable('Ingested Text', 'This is the ingested text for integration tests!');\npostman.setEnvironmentVariable('Ingested Geojson', '{\"type\": \"FeatureCollection\",\"features\": [{\"type\": \"Feature\",\"geometry\": {\"type\": \"Point\",\"coordinates\": [102.0,0.5]},\"properties\": {\"prop0\": \"value0\"}},{\"type\": \"Feature\",\"geometry\": {\"type\": \"Point\",\"coordinates\": [106.0,4]},\"properties\": {\"prop0\": \"value0\"}}]}');\npostman.setEnvironmentVariable('jobId','');\npostman.setEnvironmentVariable('jobId_text','');\npostman.setEnvironmentVariable('dataId_text','');\npostman.setEnvironmentVariable('jobId_geojson','');\npostman.setEnvironmentVariable('dataId_geojson','');\npostman.setEnvironmentVariable('jobId_raster','');\npostman.setEnvironmentVariable('dataId_raster','');\npostman.setEnvironmentVariable('jobId_shape','');\npostman.setEnvironmentVariable('dataId_shape','');\npostman.setEnvironmentVariable('jobId_external','');\npostman.setEnvironmentVariable('dataId_external','');\npostman.setEnvironmentVariable('deploymentId_geojson','');\npostman.setEnvironmentVariable('deploymentId_external','');\npostman.setEnvironmentVariable('deploymentGroupId','');\npostman.setEnvironmentVariable('deploymentId_raster','');\npostman.setEnvironmentVariable('deploymentId_shape','');\npostman.setEnvironmentVariable('capabilitiesUrl','http://google.com/garbage');\npostman.setEnvironmentVariable('dataId_geojson_large','');\npostman.setEnvironmentVariable('deploymentId_geojson_large','');",
			"currentHelper": "normal",
			"helperAttributes": {},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00"
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "9065ecf5-a000-6cbc-f05b-9d9046e0c5c3",
			"name": "Ingest Text - No type",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Attempt a text ingest without specifying the \"type\" parameter.",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/data",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Missing Type message\"] = data.message.match(/missing.*type/i);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"data\": {\r\n    \"dataType\": {\r\n        \"content\": \"{{Ingested Text}}\",\r\n        \"type\": \"text\"\r\n    },\r\n    \"metadata\": {\r\n        \"description\": \"A file for integration tests.\"\r\n    }\r\n  },\r\n  \"host\": false\r\n}"
		},
		{
			"folder": "8c5d6086-e0a0-057e-55c8-e356ef1cae8d",
			"id": "94c5d1fc-fa4f-dbb1-535f-61c14774f072",
			"name": "Get External Raster deploymentId",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": "html",
			"description": "Check that the (External) Raster deployment was successful to get the deploymentId.  Repeat up to 10 times until the job is successful.",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
			"preRequestScript": "",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\nvar data = parseJSON(tests, responseBody);\n\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.status')) {\n    if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Get External Raster deploymentId');\n            wait(1000);\n        }\n        else {\n            tests[\"Job finished in time (Bug #11544)\"] = false;\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n    else if (data.data.status === 'Success') {\n        postman.setEnvironmentVariable('retry_loop',0);\n        tests[\"Job finished in time\"] = true;\n        if (testLevels(tests, data, 'data.result.deployment.deploymentId')) {\n            postman.setEnvironmentVariable(\"deploymentId_external\", data.data.result.deployment.deploymentId);\n        }\n    }\n    else {\n        tests[\"status should not be \" + data.data.status] = false;\n        postman.setEnvironmentVariable('retry_loop',0);\n    }\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00"
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "9647097d-9b8f-525b-c6ca-c26aa3b24557",
			"name": "Deploy Text Job Status",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": "html",
			"description": "Verify that the job to deploy text to geoserver failed.",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
			"preRequestScript": "",
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.status')) {\n    if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Deploy Text Job Status');\n            wait(1000);\n        }\n        else {\n            tests[\"Job finished in time\"] = false;\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n    else if (data.data.status === 'Error') {\n        postman.setEnvironmentVariable('retry_loop',0);\n        tests[\"Job finished in time\"] = true;\n        if (testLevels(tests, data, 'data.result.details', 'string')) {\n            tests[\"Details mention that 'text' type cannot be deployed\"] = data.data.result.details.match(/no.*deploy/i) && data.data.result.details.match(/type/i) && data.data.result.details.match(/text/i);\n        }\n    }\n    else {\n        tests[\"status should not be \" + data.data.status] = false;\n        postman.setEnvironmentVariable('retry_loop',0);\n    }\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00"
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "9c3527f3-0519-3cdd-c175-172f7d5758cb",
			"name": "Ingest Local Raster - No Attached File",
			"dataMode": "params",
			"data": [
				{
					"key": "data",
					"value": "{ \"type\": \"ingest\", \"host\": \"true\", \"data\" : { \"dataType\": { \"type\": \"raster\" }, \"metadata\": { \"name\": \"terrametrics.tif\", \"description\": \"A file for integration tests.\", \"classType\": { \"classification\": \"unclassified\" } } } }",
					"type": "text",
					"enabled": true
				}
			],
			"rawModeData": null,
			"descriptionFormat": "html",
			"description": "Attempt to ingest a file without attaching a file to ingest.",
			"headers": "Authorization: \n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/data/file",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"File not present\"] = data.message.match(/file.*no.*present/i);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00"
		},
		{
			"folder": "8c5d6086-e0a0-057e-55c8-e356ef1cae8d",
			"id": "9cc792d2-4473-7557-bb60-0bcf44b29ce1",
			"name": "Deploy External Raster",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Deploy the previously ingested external raster to geoserver.",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/deployment",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.jobId')) {\n    postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId_external}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "9e217a32-78d4-25f6-ee18-1b4ff118c82d",
			"name": "Deleted Data - Download",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "",
			"descriptionFormat": "html",
			"description": "Verify that a deleted dataId cannot be downloaded.",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/file/{{dataId_geojson}}",
			"preRequestScript": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 404\"] = responseCode.code === 404;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ee]rror/);\n}\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Not Found Message\"] = data.message.match(/[Nn]o/) && data.message.match(/[Ff]ound/);\n    tests[\"Deployment Id included in message\"] = data.message.match(postman.getEnvironmentVariable('dataId_geojson'));\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00"
		},
		{
			"folder": "8c5d6086-e0a0-057e-55c8-e356ef1cae8d",
			"id": "9f7880f2-49d9-c8d6-1e87-5164634fba27",
			"name": "Get GeoJSON deploymentId",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": "html",
			"description": "Check that the GeoJSON deployment was successful to get the deploymentId.  Repeat up to 10 times until the job is successful.",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
			"preRequestScript": "",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\nvar data = parseJSON(tests, responseBody);\n\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.status')) {\n    if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Get GeoJSON deploymentId');\n            wait(1000);\n        }\n        else {\n            tests[\"Job finished in time (Bug #11544)\"] = false;\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n    else if (data.data.status === 'Success') {\n        postman.setEnvironmentVariable('retry_loop',0);\n        tests[\"Job finished in time\"] = true;\n        if (testLevels(tests, data, 'data.result.deployment.deploymentId')) {\n            postman.setEnvironmentVariable(\"deploymentId_geojson\", data.data.result.deployment.deploymentId);\n        }\n    }\n    else {\n        tests[\"status should not be \" + data.data.status] = false;\n        postman.setEnvironmentVariable('retry_loop',0);\n    }\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00"
		},
		{
			"folder": "17e8a8db-12f5-c81b-4e5b-82b7f1420a09",
			"id": "a0b17535-532b-1430-ba19-d6c48b9ecd82",
			"name": "Get Text dataId",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": "html",
			"description": "Check the job status of the ingest text job to get the dataId.  Repeat up to 10 times until the job is successful.",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/job/{{jobId_text}}",
			"preRequestScript": "",
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.status')) {\n    if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Get Text dataId');\n            wait(1000);\n        }\n        else {\n            tests[\"Job finished in time\"] = false;\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n    else if (data.data.status === 'Success') {\n        postman.setEnvironmentVariable('retry_loop',0);\n        tests[\"Job finished in time\"] = true;\n        if (testLevels(tests, data, 'data.result.dataId')) {\n            postman.setEnvironmentVariable(\"dataId_text\", data.data.result.dataId);\n        }\n    }\n    else {\n        tests[\"status should not be \" + data.data.status] = false;\n        postman.setEnvironmentVariable('retry_loop',0);\n    }\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00"
		},
		{
			"folder": "8c5d6086-e0a0-057e-55c8-e356ef1cae8d",
			"id": "a0f390c9-22d3-b38b-1a37-3b4ed5bb52bf",
			"name": "Download Raster",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Get the raw raster that was previously ingested (local source).",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/file/{{dataId_raster}}",
			"preRequestScript": "",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"folder": "cc9daf7d-42ff-f62e-baf6-6982777d3ca2",
			"id": "a13f67ad-ad40-569f-29f6-21343f0889b3",
			"name": "List Data",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "List all ingested data, making sure that the data ingested in this suite of tests is present.",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/data?perPage=200&sortBy=metadata.createdOn&order=desc",
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nvar found_external = false;\nvar found_geojson = false;\nvar found_raster = false;\nvar found_shape = false;\nvar found_text = false;\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'dataId', 'skip', 'data[]')) {\n            found_external = (found_external || data.data[i].dataId === postman.getEnvironmentVariable('dataId_external'));\n            found_geojson = (found_geojson || data.data[i].dataId === postman.getEnvironmentVariable('dataId_geojson'));\n            found_raster = (found_raster || data.data[i].dataId === postman.getEnvironmentVariable('dataId_raster'));\n            found_shape = (found_shape || data.data[i].dataId === postman.getEnvironmentVariable('dataId_shape'));\n            found_text = (found_text || data.data[i].dataId === postman.getEnvironmentVariable('dataId_text'));\n        }\n    }\n}\n\ntests[\"Ingested External Raster data found in list\"] = found_external;\ntests[\"Ingested GeoJSON data found in list\"] = found_geojson;\ntests[\"Ingested Raster data found in list\"] = found_raster;\ntests[\"Ingested Shape data found in list\"] = found_shape;\ntests[\"Ingested Text data found in list\"] = found_text;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "a4cfb317-ef4f-72fd-6091-db7625233f1e",
			"name": "Deleted Data - Deploy - Job Status",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": "html",
			"description": "Check that the attempted deployment of a deleted dataId failed.",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
			"preRequestScript": "",
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.status')) {\n    if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Deleted Data - Deploy - Job Status');\n            wait(1000);\n        }\n        else {\n            tests[\"Job finished in time\"] = false;\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n    else if (data.data.status === 'Error') {\n        postman.setEnvironmentVariable('retry_loop',0);\n        tests[\"Job finished in time\"] = true;\n        if (testLevels(tests, data, 'data.result.details', 'string')) {\n            tests[\"Details state dataId does not exist\"] = data.data.result.details.match(/do.*no.*exist/i);\n            tests[\"dataId included in details\"] = data.data.result.details.match(postman.getEnvironmentVariable('dataId_geojson'));\n        }\n    }\n    else {\n        tests[\"status should not be \" + data.data.status + \" (Bug #9223)\"] = false;\n        postman.setEnvironmentVariable('retry_loop',0);\n    }\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00"
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "a8c4ba92-6790-42be-4172-9e823c456909",
			"name": "Delete Deployment Group",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "",
			"descriptionFormat": "html",
			"description": "Delete the geoserver deployment group used throught this test.",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"method": "DELETE",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/deployment/group/{{deploymentGroupId}}",
			"preRequestScript": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00"
		},
		{
			"folder": "cc9daf7d-42ff-f62e-baf6-6982777d3ca2",
			"id": "a9b7e500-3c99-c2fc-0ba9-55fa8a049e08",
			"name": "Get External Raster Deployment Metadata",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Get the (External) Raster deployment metadata.",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId_external}}",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.deployment.deploymentId')) {\n    tests[\"Correct deploymentId returned\"] = data.data.deployment.deploymentId === postman.getEnvironmentVariable('deploymentId_external');\n}\nif (testLevels(tests, data, 'data.deployment.capabilitiesUrl') && postman.getEnvironmentVariable('capabilitiesUrl').match(/garbage/)) {\n    postman.setEnvironmentVariable('capabilitiesUrl', data.data.deployment.capabilitiesUrl);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId_shape}}\",\r\n  \"deploymentGroupId\": \"{{deploymentGroupId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"folder": "17e8a8db-12f5-c81b-4e5b-82b7f1420a09",
			"id": "a9dcf3be-7312-35fb-48e1-fdb79420690b",
			"name": "Get Shape dataId",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": "html",
			"description": "Check the job status of the ingest Shape job to get the dataId.  Repeat up to 10 times until the job is successful.",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/job/{{jobId_shape}}",
			"preRequestScript": "",
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.status')) {\n    if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Get Shape dataId');\n            wait(1000);\n        }\n        else {\n            tests[\"Job finished in time\"] = false;\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n    else if (data.data.status === 'Success') {\n        postman.setEnvironmentVariable('retry_loop',0);\n        tests[\"Job finished in time\"] = true;\n        if (testLevels(tests, data, 'data.result.dataId')) {\n            postman.setEnvironmentVariable(\"dataId_shape\", data.data.result.dataId);\n        }\n    }\n    else {\n        tests[\"status should not be \" + data.data.status] = false;\n        postman.setEnvironmentVariable('retry_loop',0);\n    }\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00"
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "aa468395-a868-76ff-b905-56f2a002ea99",
			"name": "Get Text Metadata Details",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Validate the details of the ingested text metadata.",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_text}}",
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\"< < < < < < < < < < < < LOW > > > > > > > > > > > \");\nconsole.log(\"  These tests represent less-important features.  \");\nconsole.log(\"More attention is given to options and edge cases.\");\nconsole.log(\"You may push if these tests fail, but be careful. \");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'data.dataId')) {\n    tests[\"Correct dataId\"] = data.data.dataId === postman.getEnvironmentVariable('dataId_text');\n}\nif (testLevels(tests, data, 'data.dataType.type')) {\n    tests[\"Type is 'text'\"] = data.data.dataType.type === 'text';\n}\nif (testLevels(tests, data, 'data.dataType.content')) {\n    tests[\"Correct Content\"] = data.data.dataType.content === postman.getEnvironmentVariable('Ingested Text');\n}\nif (testLevels(tests, data, 'data.metadata.description')) {\n    tests[\"Correct Description\"] = data.data.metadata.description === 'A file for integration tests.';\n}\nif (testLevels(tests, data, 'data.metadata.createdBy')) {\n    tests[\"Correct createdBy\"] = data.data.metadata.createdBy === postman.getEnvironmentVariable('username');\n}\nif (testLevels(tests, data, 'data.metadata.createdOn', 'string')) {\n    tests[\"Date Generated\"] = data.data.metadata.createdOn.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);\n    tests[\"Created in the last half hour\"] = (Date.now() - Date.parse(data.data.metadata.createdOn)) <= 1800000;\n}\nif (testLevels(tests, data, 'data.metadata.createdByJobId')) {\n    tests[\"Correct createdByJobId\"] = data.data.metadata.createdByJobId === postman.getEnvironmentVariable('jobId_text');\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"id": "ab37606f-d67f-526a-f5c5-d733ee179edf",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "",
					"description": "",
					"enabled": true
				}
			],
			"url": "https://pz-gateway.{{domain}}/deployment?perPage=200&sortBy=metadata.createdOn&order=desc&keyword={{deploymentId_geojson}}",
			"queryParams": [
				{
					"key": "perPage",
					"value": "200",
					"equals": true,
					"description": "",
					"enabled": true
				},
				{
					"key": "sortBy",
					"value": "metadata.createdOn",
					"equals": true,
					"description": "",
					"enabled": true
				},
				{
					"key": "order",
					"value": "desc",
					"equals": true,
					"description": "",
					"enabled": true
				},
				{
					"key": "keyword",
					"value": "{{deploymentId_geojson}}",
					"equals": true,
					"description": "",
					"enabled": true
				}
			],
			"preRequestScript": "",
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nvar found_geojson = false;\nvar found_keyword = true;\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'deploymentId', 'skip', 'data[]')) {\n            found_geojson = (found_geojson || data.data[i].deploymentId === postman.getEnvironmentVariable('deploymentId_geojson'));\n        }\n        found_keyword = found_keyword && JSON.stringify(data.data[i]).match(postman.getEnvironmentVariable('deploymentId_geojson'));\n    }\n    if (testLevels(tests, data, 'pagination.count') && testLevels(tests, data, 'pagination.perPage')) {\n        tests[\"Count is correct\"] = data.pagination.count === data.data.length || data.pagination.perPage === data.data.length;\n    }\n}\n\ntests[\"Ingested geoJSON data found in list\"] = found_geojson;\ntests[\"All results contain the keyword\"] = found_keyword;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1496326974072,
			"name": "List Deployment with Keyword (GeoJSON deploymentId)",
			"description": "List deployments (filetered with the geoJSON deploymentId as the keyword), making sure that only that geoJSON deployment is returned.",
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"folder": "cc9daf7d-42ff-f62e-baf6-6982777d3ca2",
			"id": "ab39292f-2466-1e67-4934-fcda0178e59a",
			"name": "Complex Query",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Check that the deployments created in this suite of tests are present in the result of an Elastic Search query.\nThis is a \"match_all\" query.",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/data/query",
			"preRequestScript": null,
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200 (Bug #11888)\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nvar found_external = false;\nvar found_geojson = false;\nvar found_raster = false;\nvar found_shape = false;\nvar found_text = false;\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'dataId', 'skip', 'data[]')) {\n            found_external = (found_external || data.data[i].dataId === postman.getEnvironmentVariable('dataId_external'));\n            found_geojson = (found_geojson || data.data[i].dataId === postman.getEnvironmentVariable('dataId_geojson'));\n            found_raster = (found_raster || data.data[i].dataId === postman.getEnvironmentVariable('dataId_raster'));\n            found_shape = (found_shape || data.data[i].dataId === postman.getEnvironmentVariable('dataId_shape'));\n            found_text = (found_text || data.data[i].dataId === postman.getEnvironmentVariable('dataId_text'));\n        }\n    }\n}\n\ntests[\"Ingested GeoJSON data found in list\"] = found_geojson;\ntests[\"Ingested External Raster data found in list\"] = found_external;\ntests[\"Ingested Raster data found in list\"] = found_raster;\ntests[\"Ingested Shape data found in list\"] = found_shape;\ntests[\"Ingested Text data found in list\"] = found_text;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\n    \"query\": {\n        \"match_all\": {}\n    }\n}"
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "ab674007-7511-950b-d794-d4fd4a3afb03",
			"name": "Ingest Text - No host",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Attempt a text ingest without specifying the \"host\" parameter.",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/data",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'errors', 'array')) {\n    if (testLevels(tests, data.errors[0], 'field', 'skip', 'errors[0].')) {\n        tests[\"Problem with deploymentType\"] = data.errors[0].field === 'host';\n    }\n    if (testLevels(tests, data.errors[0], 'defaultMessage', 'string', 'errors[0].')) {\n        tests[\"Cannot Be Null Message\"] = data.errors[0].defaultMessage.match(/null/i);\n    }\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"data\": {\r\n    \"dataType\": {\r\n        \"content\": \"{{Ingested Text}}\",\r\n        \"type\": \"text\"\r\n    },\r\n    \"metadata\": {\r\n        \"description\": \"A file for integration tests.\"\r\n    }\r\n  },\r\n  \"type\": \"ingest\"\r\n}"
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "ad4c398b-e5c3-6106-3792-16ef8cf1a86f",
			"name": "Ingest Text - Bad type",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Attempt a text ingest with an invalid \"type\" parameter.",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/data",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Bad Type message\"] = data.message.match(/type/i);\n    tests[\"Good options given\"] = data.message.match(/known.*\\[(.*,?)*\\]/i);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"data\": {\r\n    \"dataType\": {\r\n        \"content\": \"{{Ingested Text}}\",\r\n        \"type\": \"text\"\r\n    },\r\n    \"metadata\": {\r\n        \"description\": \"A file for integration tests.\"\r\n    }\r\n  },\r\n  \"host\": false,\r\n  \"type\": \"~ingest\"\r\n}"
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "b0ed611f-c055-c916-f590-a62d0801cea1",
			"name": "Get geoJSON Metadata Details",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Validate the details of the ingested geoJSON metadata.",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_geojson}}",
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'data.dataId')) {\n    tests[\"Correct dataId\"] = data.data.dataId === postman.getEnvironmentVariable('dataId_geojson');\n}\nif (testLevels(tests, data, 'data.dataType.type')) {\n    tests[\"Type is 'geojson'\"] = data.data.dataType.type === 'geojson';\n}\nif (testLevels(tests, data, 'data.metadata.description')) {\n    tests[\"Correct Description\"] = data.data.metadata.description === 'A file for integration tests.';\n}\nif (testLevels(tests, data, 'data.metadata.createdBy')) {\n    tests[\"Correct createdBy\"] = data.data.metadata.createdBy === postman.getEnvironmentVariable('username');\n}\nif (testLevels(tests, data, 'data.metadata.createdOn', 'string')) {\n    tests[\"Date Generated\"] = data.data.metadata.createdOn.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);\n    tests[\"Created in the last half hour\"] = (Date.now() - Date.parse(data.data.metadata.createdOn)) <= 1800000;\n}\nif (testLevels(tests, data, 'data.metadata.createdByJobId')) {\n    tests[\"Correct createdByJobId\"] = data.data.metadata.createdByJobId === postman.getEnvironmentVariable('jobId_geojson');\n}\nif (testLevels(tests, data, 'data.metadata.name')) {\n    tests[\"Correct name\"] = data.data.metadata.name === 'Test.geojson';\n}\nif (testLevels(tests, data, 'data.spatialMetadata.minX')) {\n    tests[\"Correct minX\"] = data.data.spatialMetadata.minX === 102;\n}\nif (testLevels(tests, data, 'data.spatialMetadata.maxX')) {\n    tests[\"Correct maxX\"] = data.data.spatialMetadata.maxX === 106;\n}\nif (testLevels(tests, data, 'data.spatialMetadata.minY')) {\n    tests[\"Correct minY\"] = data.data.spatialMetadata.minY === 0.5;\n}\nif (testLevels(tests, data, 'data.spatialMetadata.maxY')) {\n    tests[\"Correct maxY\"] = data.data.spatialMetadata.maxY === 4;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "b126061e-c83f-80e1-9d0f-1fafa02bebe3",
			"name": "Deleted Deployment - Verify Removed from List",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Retrun a list of deploymentIds, and verify that the one that was deleted is not present.",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/deployment?perPage=200&sortBy=createdOn&order=desc",
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nvar found_geojson = false;\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'deploymentId', 'skip', 'data[]')) {\n            found_geojson = (found_geojson || data.data[i].deploymentId === postman.getEnvironmentVariable('deploymentId_raster'));\n        }\n    }\n}\n\ntests[\"Deployed raster removed from list\"] = !found_geojson;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "b30814ba-627c-a2a2-fc7f-69e3cea7a388",
			"name": "Complex Query - Search Type (geojson)",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Check that the geoJSON deployment (and no other deploymens) created in this suite of tests are present in the result of an Elastic Search query.\nThis query is checking that \"dataResource.dataType.type\" contains \"geojson\".",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/data/query",
			"preRequestScript": null,
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200 (Bug #11888)\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nvar found_geojson = false;\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'dataId', 'skip', 'data[]')) {\n            found_geojson = (found_geojson || data.data[i].dataId === postman.getEnvironmentVariable('dataId_geojson'));\n        }\n    }\n}\n\ntests[\"Ingested GeoJSON data found in list\"] = found_geojson;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\n    \"query\": {\n        \"match\": {\n            \"dataResource.dataType.type\": \"geojson\"\n        }\n    }\n}"
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "b6cf60c7-826f-0435-f24f-027b52be8a69",
			"name": "Delete GeoJSON Data",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "",
			"descriptionFormat": "html",
			"description": "Delete the ingested geoJSON dataId used throughout this test.",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"method": "DELETE",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_geojson}}",
			"preRequestScript": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00"
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "b7ccfe3b-7ff6-332a-1712-72d2e005a3de",
			"name": "Delete Raster Deployment",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "",
			"descriptionFormat": "html",
			"description": "Delete the (Local) Raster deployment used in this suite of tests.",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"method": "DELETE",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId_raster}}",
			"preRequestScript": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00"
		},
		{
			"id": "befaada0-9ba2-caa8-81d6-5cf5367af5d5",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"url": "https://pz-gateway.{{domain}}/data",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.jobId')) {\n    postman.setEnvironmentVariable(\"jobId_external\",data.data.jobId);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1485367118642,
			"name": "Ingest External Raster",
			"description": "Ingest an external raster file into piazza.",
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\n  \"type\": \"ingest\",\n  \"host\": \"false\",\n  \"data\": {\n    \"dataType\": {\n      \"type\": \"raster\",\n      \"location\": {\n        \"type\": \"s3\",\n        \"bucketName\": \"external-public-access-test\",\n        \"fileName\": \"elevation.tif\",\n        \"domainName\": \"s3.amazonaws.com\"\n      }\n    },\n    \"metadata\": {\n      \"name\": \"My Test raster external file\",\n      \"description\": \"A file for integration tests.\",\n      \"classType\": \"unclassified\"\n    }\n  }\n}"
		},
		{
			"folder": "8c5d6086-e0a0-057e-55c8-e356ef1cae8d",
			"id": "c0c39868-8475-c607-fdb4-b6a1784d7205",
			"name": "Create Group",
			"dataMode": "params",
			"data": null,
			"rawModeData": null,
			"descriptionFormat": "html",
			"description": "Create a geoserver deployment group.",
			"headers": "Authorization: \n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/deployment/group",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.deploymentGroupId')) {\n    postman.setEnvironmentVariable(\"deploymentGroupId\",data.data.deploymentGroupId);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00"
		},
		{
			"folder": "cc9daf7d-42ff-f62e-baf6-6982777d3ca2",
			"id": "c10a59ee-d08c-48c5-b8b7-676345673a90",
			"name": "Update Shape Metadata",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Update the \"name\" field within the ingested Shape metadata.",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"method": "PUT",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_shape}}",
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'data.message', 'string')) {\n    tests[\"Updated message\"] = data.data.message.match(/update/i);\n    tests[\"Correct dataId mentioned\"] = data.data.message.match(postman.getEnvironmentVariable('dataId_shape'));\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"name\": \"foo\",\r\n  \"classType\": {\r\n    \"classification\": \"UNCLASSIFIED\"\r\n  }\r\n}"
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "c2ec915c-e6d5-759a-251b-0cfa33760729",
			"name": "Deleted Data - Verify DeploymentId Deleted",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "",
			"descriptionFormat": "html",
			"description": "After deleting the geoJSON dataId, verify that the corresponding deploymentId was deleted.",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId_geojson}}",
			"preRequestScript": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 404\"] = responseCode.code === 404;\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Not Found Message\"] = data.message.match(/[Nn]o/) && data.message.match(/[Ff]ound/);\n    tests[\"Deployment Id included in message\"] = data.message.match(postman.getEnvironmentVariable('deploymentId_geojson'));\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00"
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "c38641a0-3320-2c3e-2597-33c4c173cc3c",
			"name": "Get Shape Metadata Details",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Validate the details of the ingested shape metadata.",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_shape}}",
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'data.dataId')) {\n    tests[\"Correct dataId\"] = data.data.dataId === postman.getEnvironmentVariable('dataId_shape');\n}\nif (testLevels(tests, data, 'data.dataType.type')) {\n    tests[\"Type is 'shapefile'\"] = data.data.dataType.type === 'shapefile';\n}\nif (testLevels(tests, data, 'data.metadata.description')) {\n    tests[\"Correct Description\"] = data.data.metadata.description === 'A file for integration tests.';\n}\nif (testLevels(tests, data, 'data.metadata.createdBy')) {\n    tests[\"Correct createdBy\"] = data.data.metadata.createdBy === postman.getEnvironmentVariable('username');\n}\nif (testLevels(tests, data, 'data.metadata.createdOn', 'string')) {\n    tests[\"Date Generated\"] = data.data.metadata.createdOn.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);\n    tests[\"Created in the last half hour\"] = (Date.now() - Date.parse(data.data.metadata.createdOn)) <= 1800000;\n}\nif (testLevels(tests, data, 'data.metadata.createdByJobId')) {\n    tests[\"Correct createdByJobId\"] = data.data.metadata.createdByJobId === postman.getEnvironmentVariable('jobId_shape');\n}\nif (testLevels(tests, data, 'data.metadata.name')) {\n    tests[\"Correct name\"] = data.data.metadata.name === 'foo';\n}\nif (testLevels(tests, data, 'data.spatialMetadata.minX')) {\n    tests[\"Correct minX\"] = data.data.spatialMetadata.minX === 102;\n}\nif (testLevels(tests, data, 'data.spatialMetadata.maxX')) {\n    tests[\"Correct maxX\"] = data.data.spatialMetadata.maxX === 106;\n}\nif (testLevels(tests, data, 'data.spatialMetadata.minY')) {\n    tests[\"Correct minY\"] = data.data.spatialMetadata.minY === 0.5;\n}\nif (testLevels(tests, data, 'data.spatialMetadata.maxY')) {\n    tests[\"Correct maxY\"] = data.data.spatialMetadata.maxY === 4;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"folder": "8c5d6086-e0a0-057e-55c8-e356ef1cae8d",
			"id": "c91de108-42ae-e0d2-8e26-c22abcf43718",
			"name": "Deploy Geojson",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Deploy the previously ingested geoJSON to geoserver.",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/deployment",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.jobId')) {\n    postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId_geojson}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"folder": "cc9daf7d-42ff-f62e-baf6-6982777d3ca2",
			"id": "cd64dd9a-30ca-c8da-e1ce-4e17e99dfb43",
			"name": "Get Raster Deployment Metadata",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Get the (Local) Raster deployment metadata.",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId_raster}}",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.deployment.deploymentId')) {\n    tests[\"Correct deploymentId returned\"] = data.data.deployment.deploymentId === postman.getEnvironmentVariable('deploymentId_raster');\n}\nif (testLevels(tests, data, 'data.deployment.capabilitiesUrl') && postman.getEnvironmentVariable('capabilitiesUrl').match(/garbage/)) {\n    postman.setEnvironmentVariable('capabilitiesUrl', data.data.deployment.capabilitiesUrl);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId_shape}}\",\r\n  \"deploymentGroupId\": \"{{deploymentGroupId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"folder": "3fdd6abc-222f-5021-48a6-3222396757d4",
			"id": "d03bde33-baaf-3b10-9b43-00b53cd57af4",
			"name": "Delete Large GeoJSON Data",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "",
			"descriptionFormat": "html",
			"description": "Delete the (Large) geoJSON data used in this suite of tests.",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"method": "DELETE",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_geojson_large}}",
			"preRequestScript": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00"
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "d2e77455-ea60-90ca-a3aa-11d6adb2790a",
			"name": "Deleted Deployment - Delete Again",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "",
			"descriptionFormat": "html",
			"description": "Try to delete a deployment after it has already been deleted.",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"method": "DELETE",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId_raster}}",
			"preRequestScript": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 404\"] = responseCode.code === 404;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ee]rror/);\n}\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Not Found Message\"] = data.message.match(/[Nn]o/) && data.message.match(/[Ff]ound/);\n    tests[\"Deployment Id included in message\"] = data.message.match(postman.getEnvironmentVariable('deploymentId_raster'));\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00"
		},
		{
			"folder": "17e8a8db-12f5-c81b-4e5b-82b7f1420a09",
			"id": "d42fe417-d455-19ce-fa34-98480ad31817",
			"name": "Get Raster dataId",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": "html",
			"description": "Check the job status of the ingest local raster job to get the dataId.  Repeat up to 10 times until the job is successful.",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/job/{{jobId_raster}}",
			"preRequestScript": "",
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.status')) {\n    if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Get Raster dataId');\n            wait(1000);\n        }\n        else {\n            tests[\"Job finished in time\"] = false;\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n    else if (data.data.status === 'Success') {\n        postman.setEnvironmentVariable('retry_loop',0);\n        tests[\"Job finished in time\"] = true;\n        if (testLevels(tests, data, 'data.result.dataId')) {\n            postman.setEnvironmentVariable(\"dataId_raster\", data.data.result.dataId);\n        }\n    }\n    else {\n        tests[\"status should not be \" + data.data.status] = false;\n        postman.setEnvironmentVariable('retry_loop',0);\n    }\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00"
		},
		{
			"folder": "3fdd6abc-222f-5021-48a6-3222396757d4",
			"id": "d49e92d8-b4ef-2af1-ddc5-6cd9d264890d",
			"name": "Delete External Raster Data",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "",
			"descriptionFormat": "html",
			"description": "",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"method": "DELETE",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_external}}",
			"preRequestScript": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00"
		},
		{
			"id": "d6b91e1a-1ccd-cca5-9a02-f597b552c986",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "",
					"description": "",
					"enabled": true
				}
			],
			"url": "https://pz-gateway.{{domain}}/deployment?perPage=200&sortBy=metadata.createdOn&order=desc&keyword={{dataId_raster}}",
			"queryParams": [
				{
					"key": "perPage",
					"value": "200",
					"equals": true,
					"description": "",
					"enabled": true
				},
				{
					"key": "sortBy",
					"value": "metadata.createdOn",
					"equals": true,
					"description": "",
					"enabled": true
				},
				{
					"key": "order",
					"value": "desc",
					"equals": true,
					"description": "",
					"enabled": true
				},
				{
					"key": "keyword",
					"value": "{{dataId_raster}}",
					"equals": true,
					"description": "",
					"enabled": true
				}
			],
			"preRequestScript": "",
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nvar found_raster = false;\nvar found_keyword = true;\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'deploymentId', 'skip', 'data[]')) {\n            found_raster = (found_raster || data.data[i].deploymentId === postman.getEnvironmentVariable('deploymentId_raster'));\n        }\n        found_keyword = found_keyword && JSON.stringify(data.data[i]).match(postman.getEnvironmentVariable('dataId_raster'));\n    }\n    if (testLevels(tests, data, 'pagination.count') && testLevels(tests, data, 'pagination.perPage')) {\n        tests[\"Count is correct\"] = data.pagination.count === data.data.length || data.pagination.perPage === data.data.length;\n    }\n}\n\ntests[\"Ingested Raster data found in list\"] = found_raster;\ntests[\"All results contain the keyword\"] = found_keyword;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1496326960157,
			"name": "List Deployment with Keyword (Raster dataId)",
			"description": "Test that keyword search works for deployment lists, by searching for the dataId of the ingested Raster file.",
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "d761df0b-c6f5-71de-6762-50a8c1cfeb7c",
			"name": "Ingest Text - No dataType",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Attempt a text ingest without specifying the \"dataType\" parameter.",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/data",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'errors', 'array')) {\n    if (testLevels(tests, data.errors[0], 'field', 'skip', 'errors[0].')) {\n        tests[\"Problem with deploymentType\"] = data.errors[0].field === 'data.dataType';\n    }\n    if (testLevels(tests, data.errors[0], 'defaultMessage', 'string', 'errors[0].')) {\n        tests[\"Cannot Be Null Message\"] = data.errors[0].defaultMessage.match(/null/i);\n    }\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"data\": {\r\n    \"metadata\": {\r\n        \"description\": \"A file for integration tests.\"\r\n    }\r\n  },\r\n  \"type\": \"ingest\",\r\n  \"host\": false\r\n}"
		},
		{
			"id": "d81bae55-bb44-e960-8c5f-5ab77fdbe72d",
			"headers": "Authorization: \n",
			"headerData": [
				{
					"key": "Authorization",
					"value": "",
					"description": "",
					"enabled": true
				}
			],
			"url": "https://pz-gateway.{{domain}}/v2/key",
			"queryParams": [],
			"preRequestScript": "",
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'uuid')) {\n    postman.setEnvironmentVariable('API Key', data.uuid);\n} else {\n    postman.setNextRequest('');\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{cert1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1500918023242,
			"name": "Get Key",
			"description": "Retrieve an API key for testing.",
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"responses": [],
			"rawModeData": ""
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "db32ecc1-d12d-05cf-1550-7d51f6c7145b",
			"name": "Ingest Text - No dataType.content",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Attempt a text ingest without specifying the \"dataType.content\" parameter.",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/data",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'errors', 'array')) {\n    if (testLevels(tests, data.errors[0], 'field', 'skip', 'errors[0].')) {\n        tests[\"Problem with deploymentType\"] = data.errors[0].field === 'data.dataType.content';\n    }\n    if (testLevels(tests, data.errors[0], 'defaultMessage', 'string', 'errors[0].')) {\n        tests[\"Cannot Be Null Message\"] = data.errors[0].defaultMessage.match(/null/i);\n    }\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"data\": {\r\n    \"dataType\": {\r\n        \"type\": \"text\"\r\n    },\r\n    \"metadata\": {\r\n        \"description\": \"A file for integration tests.\"\r\n    }\r\n  },\r\n  \"type\": \"ingest\",\r\n  \"host\": false\r\n}"
		},
		{
			"id": "dbf61b56-d9c9-a9d5-5548-9ff76e5c8cba",
			"headers": "Authorization: \n",
			"headerData": [
				{
					"key": "Authorization",
					"value": "",
					"description": "",
					"enabled": true
				}
			],
			"url": "https://pz-gateway.{{domain}}/data/file",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [
				{
					"key": "data",
					"value": "{ \"type\": \"ingest\", \"host\": \"true\", \"data\" : { \"dataType\": { \"type\": \"geojson\" }, \"metadata\": { \"name\": \"Test.geojson\", \"description\": \"A file for integration tests.\", \"classType\": { \"classification\": \"unclassified\" } } } }",
					"type": "text",
					"enabled": true
				},
				{
					"key": "file",
					"value": "Test.geojson",
					"type": "file",
					"enabled": true
				}
			],
			"dataMode": "params",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.jobId')) {\n    postman.setEnvironmentVariable(\"jobId_geojson\",data.data.jobId);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1500641858915,
			"name": "Ingest GeoJSON",
			"description": "Ingest a local geoJSON file into piazza.",
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00"
		},
		{
			"id": "de7293da-5bcc-cc27-2c1b-fd9ce5fe327e",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "",
					"description": "",
					"enabled": true
				}
			],
			"url": "https://pz-gateway.{{domain}}/data?perPage=200&sortBy=metadata.createdOn&order=desc&keyword=integration",
			"queryParams": [
				{
					"key": "perPage",
					"value": "200",
					"equals": true,
					"description": "",
					"enabled": true
				},
				{
					"key": "sortBy",
					"value": "metadata.createdOn",
					"equals": true,
					"description": "",
					"enabled": true
				},
				{
					"key": "order",
					"value": "desc",
					"equals": true,
					"description": "",
					"enabled": true
				},
				{
					"key": "keyword",
					"value": "integration",
					"equals": true,
					"description": "",
					"enabled": true
				}
			],
			"preRequestScript": "",
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nvar found_geojson = false;\nvar found_raster = false;\nvar found_shape = false;\nvar found_text = false;\nvar found_keyword = true;\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'dataId', 'skip', 'data[]')) {\n            found_geojson = (found_geojson || data.data[i].dataId === postman.getEnvironmentVariable('dataId_geojson'));\n            found_raster = (found_raster || data.data[i].dataId === postman.getEnvironmentVariable('dataId_raster'));\n            found_shape = (found_shape || data.data[i].dataId === postman.getEnvironmentVariable('dataId_shape'));\n            found_text = (found_text || data.data[i].dataId === postman.getEnvironmentVariable('dataId_text'));\n        }\n        found_keyword = found_keyword && JSON.stringify(data.data[i]).match('integration');\n    }\n    if (testLevels(tests, data, 'pagination.count') && testLevels(tests, data, 'pagination.perPage')) {\n        tests[\"Count is correct\"] = data.pagination.count === data.data.length || data.pagination.perPage === data.data.length;\n    }\n}\n\ntests[\"Ingested GeoJSON data found in list\"] = found_geojson;\ntests[\"Ingested Raster data found in list\"] = found_raster;\ntests[\"Ingested Shape data found in list\"] = found_shape;\ntests[\"Ingested Text data found in list\"] = found_text;\ntests[\"All results contain 'integration'\"] = found_keyword;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1496326916467,
			"name": "List Data with Keyword",
			"description": "List ingested data (filetered with the keyword, \"integration\"), making sure that the data ingested in this suite of tests is present.",
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"folder": "8c5d6086-e0a0-057e-55c8-e356ef1cae8d",
			"id": "df42a862-32ee-8191-c99c-222d5f397810",
			"name": "Get Raster deploymentId (in Group)",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": "html",
			"description": "Check that the (Local) Raster deployment to a group was successful to get the deploymentId.  Repeat up to 10 times until the job is successful.",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
			"preRequestScript": "",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\nvar data = parseJSON(tests, responseBody);\n\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.status')) {\n    if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Get Raster deploymentId (in Group)');\n            wait(1000);\n        }\n        else {\n            tests[\"Job finished in time (Bug #11544)\"] = false;\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n    else if (data.data.status === 'Success') {\n        postman.setEnvironmentVariable('retry_loop',0);\n        tests[\"Job finished in time\"] = true;\n        if (testLevels(tests, data, 'data.result.deployment.deploymentId')) {\n            postman.setEnvironmentVariable(\"deploymentId_raster\", data.data.result.deployment.deploymentId);\n        }\n    }\n    else {\n        tests[\"status should not be \" + data.data.status] = false;\n        postman.setEnvironmentVariable('retry_loop',0);\n    }\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00"
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "df4c09ee-b9c0-51c5-3302-1c1f335cab01",
			"name": "Deploy - No type",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Attempt a deployment without specifying the \"type\" parameter.",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/deployment",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Missing Type message\"] = data.message.match(/missing.*type/i);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId_external}}\",\r\n  \"deploymentType\": \"geoserver\"\r\n}"
		},
		{
			"folder": "cc9daf7d-42ff-f62e-baf6-6982777d3ca2",
			"id": "e1dbba77-3657-4875-33cb-6368e9fd9f2b",
			"name": "Get Geojson Metadata",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Check that you can get the metadata of the ingested geoJSON.",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_geojson}}",
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'data.dataId')) {\n    tests[\"Correct dataId returned\"] = data.data.dataId === postman.getEnvironmentVariable('dataId_geojson');\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "e1f15481-e3fd-64dd-de2d-feef3ce6ffff",
			"name": "Get Raster Metadata Details",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Validate the details of the locally ingested raster metadata.",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_raster}}",
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'data.dataId')) {\n    tests[\"Correct dataId\"] = data.data.dataId === postman.getEnvironmentVariable('dataId_raster');\n}\nif (testLevels(tests, data, 'data.dataType.type')) {\n    tests[\"Type is 'geojson'\"] = data.data.dataType.type === 'raster';\n}\nif (testLevels(tests, data, 'data.metadata.description')) {\n    tests[\"Correct Description\"] = data.data.metadata.description === 'A file for integration tests.';\n}\nif (testLevels(tests, data, 'data.metadata.createdBy')) {\n    tests[\"Correct createdBy\"] = data.data.metadata.createdBy === postman.getEnvironmentVariable('username');\n}\nif (testLevels(tests, data, 'data.metadata.createdOn', 'string')) {\n    tests[\"Date Generated\"] = data.data.metadata.createdOn.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);\n    tests[\"Created in the last half hour\"] = (Date.now() - Date.parse(data.data.metadata.createdOn)) <= 1800000;\n}\nif (testLevels(tests, data, 'data.metadata.createdByJobId')) {\n    tests[\"Correct createdByJobId\"] = data.data.metadata.createdByJobId === postman.getEnvironmentVariable('jobId_raster');\n}\nif (testLevels(tests, data, 'data.metadata.name')) {\n    tests[\"Correct name\"] = data.data.metadata.name === 'terrametrics.tif';\n}\nif (testLevels(tests, data, 'data.spatialMetadata.minX')) {\n    tests[\"Correct minX\"] = data.data.spatialMetadata.minX === -48.52855770516021;\n}\nif (testLevels(tests, data, 'data.spatialMetadata.maxX')) {\n    tests[\"Correct maxX\"] = data.data.spatialMetadata.maxX === -48.34313089042421;\n}\nif (testLevels(tests, data, 'data.spatialMetadata.minY')) {\n    tests[\"Correct minY\"] = data.data.spatialMetadata.minY === -6.404746816973356;\n}\nif (testLevels(tests, data, 'data.spatialMetadata.maxY')) {\n    tests[\"Correct maxY\"] = data.data.spatialMetadata.maxY === -6.182956360425359;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"folder": "cc9daf7d-42ff-f62e-baf6-6982777d3ca2",
			"id": "e324b993-d03c-abc4-7ac6-ec0a6fc13535",
			"name": "Get Text Metadata",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Check that you can get the metadata of the ingested text.",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/data/{{dataId_text}}",
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\"< < < < < < < < < < < IMPORTANT > > > > > > > > > > >\");\nconsole.log(\"      These tests represent important features.      \");\nconsole.log(\"Use extreme caution when pushing if these tests fail.\");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'data.dataId')) {\n    tests[\"Correct dataId returned\"] = data.data.dataId === postman.getEnvironmentVariable('dataId_text');\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"folder": "8c5d6086-e0a0-057e-55c8-e356ef1cae8d",
			"id": "f0c0af14-29fb-bcf4-844c-1cea79373d93",
			"name": "Download Shape",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Get the raw Shape that was previously ingested.",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/file/{{dataId_shape}}",
			"preRequestScript": "",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"id": "f34b3995-c211-b38e-44c1-0ffadc4c0a6a",
			"headers": "Authorization: \n",
			"headerData": [
				{
					"key": "Authorization",
					"value": "",
					"description": "",
					"enabled": true
				}
			],
			"url": "https://pz-gateway.{{domain}}/data/file",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [
				{
					"key": "data",
					"value": "{ \"type\": \"ingest\", \"host\": \"true\", \"data\" : { \"dataType\": { \"type\": \"shapefile\" }, \"metadata\": { \"name\": \"TestShape.zip\", \"description\": \"A file for integration tests.\", \"classType\": { \"classification\": \"unclassified\" } } } }",
					"type": "text",
					"enabled": true
				},
				{
					"key": "file",
					"value": "TestShape.zip",
					"type": "file",
					"enabled": true
				}
			],
			"dataMode": "params",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.jobId')) {\n    postman.setEnvironmentVariable(\"jobId_shape\",data.data.jobId);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1500641906687,
			"name": "Ingest Shape",
			"description": "Ingest a local shape file into piazza.",
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00"
		},
		{
			"folder": "eab39bb3-61a3-84aa-43ab-eac21622eb16",
			"id": "f3c90946-1a2e-46e2-1485-3de249cdd466",
			"name": "Deploy - No deploymentType",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Attempt a deployment without specifying the \"deploymentType\" parameter.",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/deployment",
			"preRequestScript": null,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'errors', 'array')) {\n    if (testLevels(tests, data.errors[0], 'field', 'skip', 'errors[0].')) {\n        tests[\"Problem with deploymentType\"] = data.errors[0].field === 'deploymentType';\n    }\n    if (testLevels(tests, data.errors[0], 'defaultMessage', 'string', 'errors[0].')) {\n        tests[\"Cannot Be Null Message\"] = data.errors[0].defaultMessage.match(/null/i);\n    }\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId_external}}\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"folder": "cc9daf7d-42ff-f62e-baf6-6982777d3ca2",
			"id": "f3de1268-2db6-c48a-5926-5045ff95e973",
			"name": "Large - Download Geojson",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Get the raw, large (~5 MB) geoJSON that was previously ingested.",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/file/{{dataId_geojson_large}}",
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"folder": "8c5d6086-e0a0-057e-55c8-e356ef1cae8d",
			"id": "f535272c-e862-97eb-cb88-8d87cb12a167",
			"name": "Download Geojson",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": "html",
			"description": "Get the raw geoJSON that was previously ingested.",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"method": "GET",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/file/{{dataId_geojson}}",
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Downloaded File has correct content\"] = responseBody === postman.getEnvironmentVariable(\"Ingested Geojson\");",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		}
	]
}