{
	"id": "30ac1784-57ab-b235-ae51-e2515cf7826e",
	"name": "Workflow",
	"description": "",
	"order": [],
	"folders": [
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"description": "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n < < < < < < < < < < < < START-UP > > > > > > > > > > > > \nThese tests create required environment variables.\nAny failures here will cause other tests to fail.\nDO NOT PUSH if these tests fail.\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
			"id": "3107dc0f-c42b-f0c8-b00b-ca317cce8468",
			"lastRevision": 909983170,
			"lastUpdatedBy": "699425",
			"name": "1_Startup",
			"order": [
				"382f4799-3a18-7d68-b591-6f25694cbb5a",
				"bb76c1cf-b106-16a2-a6e0-3bad4f35604b",
				"12600a27-3e5a-7916-920e-f21b393bca3c",
				"17ce21f2-b177-9824-8c04-6b91587ca8ee",
				"3364457e-20b2-ea0c-0ea8-d581af4b5b19",
				"0418aa09-bf63-8e65-1e4b-62641162da03",
				"a8f0c07b-d52c-ea85-05ae-ff579895c7b3"
			],
			"owner": "699425"
		},
		{
			"description": "",
			"id": "ed4acd95-58bc-4ffb-410b-92dc9085cce0",
			"lastRevision": 840781111,
			"lastUpdatedBy": "699425",
			"name": "2_Critical",
			"order": [
				"677ed37a-d1c4-46ce-759f-638709b27e19",
				"a025f979-8849-7f0e-37cd-76d6b4b20df2",
				"d8c7db1e-1207-a3fb-0442-a72f319b2bea",
				"05e879b5-0b31-d398-948b-182f2102eae9",
				"be2a3390-ab90-234b-5cbb-1eada913e361",
				"af13b3e4-cb7f-4b92-4e51-022e7803db6b",
				"f8a82a95-77a7-7991-61de-f755174d4a3b",
				"7f7fd8a9-2c4e-2552-2c30-ef54d7033f4b"
			],
			"owner": "699425"
		},
		{
			"description": "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n< < < < < < < < < < < < < NORMAL > > > > > > > > > > > > >\nThese tests represent important features\nUse extreme caution when pushing if any of these tests fail\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
			"id": "0815a7ca-5a76-79ac-e882-d4d5a5d65783",
			"lastRevision": 840788592,
			"lastUpdatedBy": "699425",
			"name": "3_Important",
			"order": [
				"6c6933b5-d290-5f00-2145-7a77c6b60e23",
				"75853edd-54d6-fcb8-6de6-eb50a56a5f84",
				"72168779-f2cb-e1ea-0e5a-4af78d2933f4",
				"61fc52d5-d3e6-56c7-4d9b-37f1e8f247b0",
				"0600a010-d79f-b396-cb2f-e11e47d56ced",
				"a2212f06-9578-b286-78b5-02422e61431b",
				"5e1a0b41-45e5-41e3-ee4e-751c8d8953dc",
				"469ca7e4-dff3-ad60-ad08-bbb77ff68b08",
				"f9094871-5d2b-efd8-26a4-29cc23e5784c",
				"0670ab54-99b6-ffdc-3047-9c40af2de8ec",
				"e5515a1c-0d96-af6d-271e-d22cdf00a3b1",
				"c6ade417-2895-b8da-1f51-8511f28e5f72",
				"3d8eaa05-a549-e002-eeb2-e24369ac53b6",
				"399576c7-a9fa-032e-15df-01c862658442",
				"49e93bdc-f135-fd14-4d6b-14751fb08c68",
				"1d5a3d38-e661-7d9b-7343-cf0284552579",
				"43628373-9d0b-bf51-efe0-89d7d4a871c9",
				"a96b1301-559f-61bd-2c57-9b7e91578174",
				"ca62860f-5e9c-676f-9732-abca22652c04",
				"73861207-aa0b-f386-6061-2286bcf4cce8",
				"36fd9f47-8c7e-203a-f1f5-ca2eeface9d9",
				"ce6c6e53-5f83-611d-31c6-36523847914f",
				"9bf03c56-2a5b-976f-0b20-a548efcb3c00",
				"c8ff77d0-c1ca-5acc-dba2-acb7e662c4a7",
				"dea29b91-bb84-1ba7-4ce7-efea9fe45b93",
				"56cc8148-ca72-0550-3c7f-e02a0148464d",
				"a09540e4-d655-775e-ce0e-2ad02a32c16c",
				"8751fd74-ce6d-8cc1-127f-a52ae3dbdd9f",
				"ddf295cb-c206-80d1-dda7-d28fa88e2bc7",
				"b3bd365b-f4f3-8936-2ed1-833ba6ae5171",
				"8fc295ab-c416-da26-0ae7-00777626b6a3",
				"b99eda6e-0ba5-4b1f-9cc1-c131596854ad",
				"c5063351-e0d6-94bb-60b6-c16a8a9fc209",
				"d3b9f618-821d-ad92-d81b-adb619184f06",
				"e49ec19d-a202-6262-1c5f-6785f829092e",
				"e6883d62-8670-c9b7-312c-f230f22ff663",
				"5f5dd927-345f-7550-9277-acbbe22de4bc",
				"8bfe9aad-8553-dfb8-4a0d-fdec67099b46",
				"d898682c-950c-9471-95ed-df6fc991c022",
				"c1876e88-cbd1-32a5-a1c8-085d93b678d4"
			],
			"owner": "699425",
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"description": "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n< < < < < < < < < < < < < < LOW > > > > > > > > > > > > > >\nThese tests represent less-important features.\nMore attention is given to options and edge cases.\nYou may push if these tests fail, but be careful.\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
			"id": "b7a13432-9b2d-fe79-c6cf-02041888db50",
			"lastRevision": 840744806,
			"lastUpdatedBy": "699425",
			"name": "4_Low",
			"order": [
				"6d94d06f-8d37-de68-7586-d419908f86cd",
				"22ca3417-6865-5bb4-4647-d790aa396dfb",
				"6b4fe2ea-531f-643b-3fe7-e176c0786d98",
				"dc1b1e97-783e-bea9-e180-e3862218669e",
				"3e73dc36-6955-d9ce-7143-3b82e29e0de6",
				"1819142b-32b8-72be-34ae-7cfd228fe9f3",
				"6a535752-5478-cf69-5995-7a21ff75c962",
				"a3fc6f5d-41ec-588f-dad0-4f00979eeb85",
				"2d780775-a840-d234-791f-14417e4e01a6",
				"56a048d9-0a5f-acdd-c960-b78fe9876c76",
				"6eac2dc5-cdc5-aafa-7a6b-e7927573eb09",
				"d84231e1-9a8e-1546-d865-3978de162e92",
				"89b8a80b-ecd4-bcf4-6611-1280ef623c31",
				"202d23c1-f510-7216-dc5b-5a963e0a17f1",
				"8c2b749d-ddae-ae5b-2ff9-ee8992f1183b",
				"b75d4547-b93c-5f5a-da8b-7dda1b15b56a",
				"40a40178-8fdf-2b16-9111-267da82b33da",
				"130e1bcd-88e7-de64-29bc-d9733ebf0114",
				"cb7529e4-ff36-9bf8-b15f-34b54378dc1c",
				"1ef95476-2a21-6997-d6d7-7201de7587ac",
				"bf740ce4-9c8e-8629-478d-93a9eb7312ca",
				"dbbf49a3-bd1c-fa72-7da5-128334a396b3",
				"6c3b1ce7-5452-839c-1064-2a042a789864",
				"7b04d36f-071b-3eb1-8e4b-c30c4c29a2ce",
				"fb027c23-25f5-637f-5465-77c80dca672d",
				"fcbe0a37-8628-540e-3d0e-11cb6c358478",
				"63f8284d-9c18-eaa7-5806-ba700dbb19a7",
				"8a38d894-9de3-315e-810f-4e0a895dc809",
				"72450ce2-7ba8-b2c3-2bec-c3bb77e59c24",
				"f0372133-bd20-ded4-91e0-41473ca4e051",
				"9e2f4848-5071-3690-db28-c2afe3ea79ca",
				"89cf9440-5759-47e9-6957-3cfac30a819b",
				"2784ced1-e08a-8943-df1b-44bfa5c72ea8",
				"fa777617-04f6-bbc2-af3c-17a3b262e22b"
			],
			"owner": "699425"
		},
		{
			"description": "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n < < < < < < < < < < < < TEAR-DOWN > > > > > > > > > > > > \nThese tests destroy any items created by previous tests.\nThese tests represent important features, like DELETEs.\nDO NOT PUSH if these tests fail.\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
			"id": "0e29f236-2061-8522-5123-eab4334b560d",
			"lastRevision": 910013040,
			"lastUpdatedBy": "699425",
			"name": "5_Teardown",
			"order": [
				"01ceeb47-0c0b-fb65-2f5a-f8b21a23723b",
				"d5646eb8-19b5-9a13-8b15-23a6a8073611",
				"6db9affc-8ec4-3657-06a9-9e6ef1d3c1a7",
				"6f777a93-94e8-ff11-e93d-a885a2ab0da4",
				"7f606417-cbb5-20cf-573b-5ee32ee65e52",
				"2b19c954-d145-ead7-60e9-effb67becc69",
				"d32fb7cf-f172-6797-7e0e-a7be34e33f27",
				"42135ff7-4a54-5313-4f52-b99095d6641b",
				"6a2828ac-5a7f-b9a2-ed8e-3b58355b63f2",
				"fabe139c-0322-125f-493f-a40dd60464f2",
				"b7dea6d5-a0a1-5f5b-305c-7d1202bf4e12"
			],
			"owner": "699425"
		}
	],
	"folders_order": [
		"3107dc0f-c42b-f0c8-b00b-ca317cce8468",
		"ed4acd95-58bc-4ffb-410b-92dc9085cce0",
		"0815a7ca-5a76-79ac-e882-d4d5a5d65783",
		"b7a13432-9b2d-fe79-c6cf-02041888db50",
		"0e29f236-2061-8522-5123-eab4334b560d"
	],
	"timestamp": 0,
	"owner": "699425",
	"public": false,
	"requests": [
		{
			"folder": "0e29f236-2061-8522-5123-eab4334b560d",
			"id": "01ceeb47-0c0b-fb65-2f5a-f8b21a23723b",
			"name": "Delete Event",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "",
			"descriptionFormat": null,
			"description": "Delete the Event that was used throughout this suite of tests.",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"method": "DELETE",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/event/{{eventId}}",
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\" < < < < < < < < < < < < TEAR-DOWN > > > > > > > > > > > \");\nconsole.log(\"These tests destroy any items created by previous tests. \");\nconsole.log(\" These tests represent important features, like DELETEs. \");\nconsole.log(\"            DO NOT PUSH if these tests fail.             \");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e"
		},
		{
			"folder": "3107dc0f-c42b-f0c8-b00b-ca317cce8468",
			"id": "0418aa09-bf63-8e65-1e4b-62641162da03",
			"name": "Create Event",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": null,
			"description": "Create the Event used throughout this suite of tests.",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"method": "POST",
			"pathVariables": {},
			"url": "https://pz-gateway.{{domain}}/event",
			"preRequestScript": "",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\n\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.eventId', 'string')) {\n    tests[\"eventId GUID created\"] = data.data.eventId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n    postman.setEnvironmentVariable('eventId', data.data.eventId);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"rawModeData": "{\n    \"data\": {\n        \"dataId\": \"testId\",\n    \"dataType\": \"raster\",\n    \"epsg\": 3,\n    \"minX\": 1,\n    \"minY\": 1.0,\n    \"maxX\": 10.0,\n    \"maxY\": 10.0,\n    \"hosted\": true,\n        \"sampleNest\": {\n            \"someParam\": \"someValue\"\n        }\n    },\n  \"eventTypeId\": \"{{eventTypeId}}\"\n}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Create an Event that does NOT match the Trigger.",
			"descriptionFormat": null,
			"folder": "ed4acd95-58bc-4ffb-410b-92dc9085cce0",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "05e879b5-0b31-d398-948b-182f2102eae9",
			"method": "POST",
			"name": "Create Non-triggering Event",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\n\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nvar wait = eval(postman.getEnvironmentVariable('wait'));\n\nif (testLevels(tests, data, 'data.eventId', 'string')) {\n    tests[\"eventId GUID created\"] = data.data.eventId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n    postman.setEnvironmentVariable('eventId_notrigger', data.data.eventId);\n}\n\nwait(5000); // Give enough time for potential alert to be created.",
			"url": "https://pz-gateway.{{domain}}/event",
			"rawModeData": "{\n    \"data\": {\n        \"dataId\": \"testId\",\n    \"dataType\": \"graster\",\n    \"epsg\": 3,\n    \"minX\": 1,\n    \"minY\": 1.0,\n    \"maxX\": 10.0,\n    \"maxY\": 10.0,\n    \"hosted\": true,\n        \"sampleNest\": {\n            \"someParam\": \"someValue\"\n        }\n    },\n  \"eventTypeId\": \"{{eventTypeId}}\"\n}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": null,
			"dataMode": "params",
			"description": "List EventTypes, and verify that the one created in this test is present.",
			"descriptionFormat": null,
			"folder": "0815a7ca-5a76-79ac-e882-d4d5a5d65783",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "0600a010-d79f-b396-cb2f-e11e47d56ced",
			"method": "GET",
			"name": "Query EventType",
			"pathVariables": {},
			"preRequestScript": null,
			"rawModeData": null,
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar found = false;\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'eventTypeId', 'skip', 'data[].')) {\n            if (data.data[i].eventTypeId === postman.getEnvironmentVariable('eventTypeId')) {\n                found = true;\n            }\n        }\n    }\n    if (found) {\n        tests[\"EventType found\"] = true;\n        postman.setEnvironmentVariable('retry_loop', 0);\n    }\n    else {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Query EventType');\n            wait(1000);\n        }\n        else {\n            tests[\"EventType found\"] = true;\n            postman.setEnvironmentVariable('retry_loop', 0);\n        }\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/eventType?perPage=100&order=desc&sortBy=createdOn"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Try a \"match_all\" Elastic Search query to find triggers.",
			"descriptionFormat": "html",
			"folder": "0815a7ca-5a76-79ac-e882-d4d5a5d65783",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "0670ab54-99b6-ffdc-3047-9c40af2de8ec",
			"method": "POST",
			"name": "Trigger Complex Query",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar found = false;\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'triggerId', 'skip', 'data[].')) {\n            if (data.data[i].triggerId === postman.getEnvironmentVariable('triggerId')) {\n                found = true;\n            }\n        }\n    }\n    tests[\"Trigger found\"] = found;\n}",
			"url": "https://pz-gateway.{{domain}}/trigger/query",
			"rawModeData": "{\n    \"query\": {\n        \"match_all\": {}\n    }\n}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"collectionRequestId": "12600a27-3e5a-7916-920e-f21b393bca3c",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Create the EventType used throughout this suite of tests.",
			"descriptionFormat": null,
			"folder": "3107dc0f-c42b-f0c8-b00b-ca317cce8468",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "12600a27-3e5a-7916-920e-f21b393bca3c",
			"isFromCollection": true,
			"method": "POST",
			"name": "Create EventType",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\n\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.eventTypeId', 'string')) {\n    tests[\"eventTypeId GUID created\"] = data.data.eventTypeId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n    postman.setEnvironmentVariable('eventTypeId', data.data.eventTypeId);\n}",
			"url": "https://pz-gateway.{{domain}}/eventType",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\",\r\n    \"sampleNest\": {\r\n        \"someParam\": \"string\"\r\n    }\r\n  }\r\n}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": null,
			"dataMode": "params",
			"description": "List Events, sorting by ascending eventId.",
			"descriptionFormat": null,
			"folder": "b7a13432-9b2d-fe79-c6cf-02041888db50",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "130e1bcd-88e7-de64-29bc-d9733ebf0114",
			"method": "GET",
			"name": "Query Event - Ascending eventId",
			"pathVariables": {},
			"preRequestScript": null,
			"rawModeData": null,
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar last = '';\nvar next = '';\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'eventId', 'skip', 'data[].')) {\n            next = data.data[i].eventId;\n            if (next >= last || last === '') {\n                last = next;\n                tests[\"Results are in ascending order\"] = true;\n            }\n            else {\n                tests[\"Results are in ascending order\"] = false;\n                break;\n            }\n        }\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/event?perPage=100&order=asc&sortBy=eventId"
		},
		{
			"id": "17ce21f2-b177-9824-8c04-6b91587ca8ee",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "",
					"description": "",
					"enabled": true
				}
			],
			"url": "https://pz-gateway.{{domain}}/service",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\n\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.serviceId', 'string')) {\n    tests[\"serviceId GUID created\"] = data.data.serviceId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n    postman.setEnvironmentVariable('serviceId', data.data.serviceId);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1503406589415,
			"name": "Register Service",
			"description": "Register the pzsvc-hello service, to be used in Trigger creation.",
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"rawModeData": "{\n    \"url\": \"https://pz-gateway.{{domain}}\",\n    \"contractUrl\": \"http://helloContract\",\n    \"method\" : \"GET\",\n    \"serviceId\": \"\",\n    \"resourceMetadata\": {\n        \"classType\": \"hello\",\n        \"name\": \"pzsvc-hello service\",\n        \"description\": \"Service for Workflow Integration Testing\"\n    }\n}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check the details of the Event metadata.",
			"descriptionFormat": null,
			"folder": "b7a13432-9b2d-fe79-c6cf-02041888db50",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "1819142b-32b8-72be-34ae-7cfd228fe9f3",
			"method": "GET",
			"name": "Get Event Details",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'data.eventId')) {\n    tests[\"Correct eventId returned\"] = data.data.eventId === postman.getEnvironmentVariable('eventId');\n}\nif (testLevels(tests, data, 'data.eventTypeId')) {\n    tests[\"Correct eventTypeId returned\"] = data.data.eventTypeId === postman.getEnvironmentVariable('eventTypeId');\n}\nif (testLevels(tests, data, 'data.createdBy')) {\n    tests[\"Correct createdBy\"] = data.data.createdBy === postman.getEnvironmentVariable('username');\n}\nif (testLevels(tests, data, 'data.createdOn', 'string')) {\n    tests[\"Timestamp created\"] = data.data.createdOn.match(/\\d{4}-\\d{2}-\\d{2}/) && data.data.createdOn.match(/\\d{2}:\\d{2}:\\d{2}/);\n}\nif (testLevels(tests, data, 'data.data.sampleNest.someParam')) {\n    tests[\"Nested Structure maintained\"] = data.data.data.sampleNest.someParam === 'someValue';\n}\nif (testLevels(tests, data, 'data.data.epsg')) {\n    tests[\"Number Stored\"] = data.data.data.epsg === 3;\n}\nif (testLevels(tests, data, 'data.data.hosted')) {\n    tests[\"Boolean Stored\"] = data.data.data.hosted === true;\n}\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Correct Type\"] = data.type.match(/[Ee]vent/);\n}",
			"url": "https://pz-gateway.{{domain}}/event/{{eventId}}",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "This is in a series of requests to validate proper workflow deletion order.\nCreate a Trigger.",
			"descriptionFormat": null,
			"folder": "0815a7ca-5a76-79ac-e882-d4d5a5d65783",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "1d5a3d38-e661-7d9b-7343-cf0284552579",
			"method": "POST",
			"name": "Deletion - Create Trigger",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\n\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.triggerId', 'string')) {\n    tests[\"triggerId GUID created\"] = data.data.triggerId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n    postman.setEnvironmentVariable('triggerId_deletion', data.data.triggerId);\n}\n\nvar wait = eval(postman.getEnvironmentVariable('wait'));\nwait(5000);",
			"url": "https://pz-gateway.{{domain}}/trigger",
			"rawModeData": "{\n    \"name\": \"CI Testing Trigger\",\n    \"enabled\": true,\n    \"eventTypeId\": \"{{eventTypeId_deletion}}\",\n    \"condition\": {\n        \"query\": {\n            \"query\": {\n                \"bool\": {\n                    \"must\": [\n                        {\n                            \"match\": {\n                                \"data.dummy\": \"something\"\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    },\n    \"job\": {\n        \"jobType\": {\n            \"type\": \"execute-service\",\n            \"data\": {\n                \"serviceId\": \"{{serviceId}}\",\n                \"dataInputs\": {\n                    \"test\": {\n                        \"content\": \"{ \\\"log\\\": \\\"Received event with type $dataType\\\" }\",\n                        \"type\": \"body\",\n                        \"mimeType\": \"application/json\"\n                    }\n                },\n                \"dataOutput\": [ {\n                    \"content\": \"filler text\",\n                    \"mimeType\":\"application/json\",\n                    \"type\":\"text\"\n                } ]\n            }\n        }\n    }\n}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": null,
			"dataMode": "params",
			"description": "List Trigger, sorting by ascending enabled state.",
			"descriptionFormat": "html",
			"folder": "b7a13432-9b2d-fe79-c6cf-02041888db50",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "1ef95476-2a21-6997-d6d7-7201de7587ac",
			"method": "GET",
			"name": "Query Trigger - Ascending Enabled State",
			"pathVariables": {},
			"preRequestScript": null,
			"rawModeData": null,
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar last = '';\nvar next = '';\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'enabled', 'skip', 'data[].')) {\n            next = data.data[i].enabled;\n            if (next >= last || last === '') {\n                last = next;\n                tests[\"Results are in ascending order\"] = true;\n            }\n            else {\n                tests[\"Results are in ascending order\"] = false;\n                break;\n            }\n        }\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/trigger?perPage=100&order=asc&sortBy=enabled"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": null,
			"dataMode": "params",
			"description": "List EventTypes, sorting by ascending createdOn.",
			"descriptionFormat": null,
			"folder": "b7a13432-9b2d-fe79-c6cf-02041888db50",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "202d23c1-f510-7216-dc5b-5a963e0a17f1",
			"method": "GET",
			"name": "Query EventType - Ascending createdOn",
			"pathVariables": {},
			"preRequestScript": null,
			"rawModeData": null,
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar last = '';\nvar next = '';\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'createdOn', 'skip', 'data[].')) {\n            next = data.data[i].createdOn;\n            if (next >= last || last === '') {\n                last = next;\n                tests[\"Results are in ascending order\"] = true;\n            }\n            else {\n                tests[\"Results are in ascending order\"] = false;\n                break;\n            }\n        }\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/eventType?perPage=100&order=asc&sortBy=createdOn"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": null,
			"dataMode": "params",
			"description": "List Events, filtering by eventTypeId",
			"folder": "b7a13432-9b2d-fe79-c6cf-02041888db50",
			"headerData": [
				{
					"description": "",
					"enabled": true,
					"key": "Authorization",
					"value": ""
				}
			],
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "22ca3417-6865-5bb4-4647-d790aa396dfb",
			"method": "GET",
			"name": "Query Event - Filter by eventTypeId",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "eventTypeId",
					"value": "{{eventTypeId}}"
				}
			],
			"responses": [],
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nmatch_eventTypeId = true;\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'eventTypeId', 'skip', 'data.data[0].')) {\n            if (data.data[i].eventTypeId != postman.getEnvironmentVariable('eventTypeId')) {\n                match_eventTypeId = false;\n                console.log(data.data[i].eventId);\n            }\n        }\n    }\n}\n\ntests[\"All results should match the provided eventTypeId\"] = match_eventTypeId;",
			"time": 1497015380620,
			"url": "https://pz-gateway.{{domain}}/event?eventTypeId={{eventTypeId}}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that a trigger cannot be retrieved through the /event endpoint.",
			"descriptionFormat": "html",
			"folder": "b7a13432-9b2d-fe79-c6cf-02041888db50",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "2784ced1-e08a-8943-df1b-44bfa5c72ea8",
			"method": "GET",
			"name": "Get Trigger through /event",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": "",
			"tests": "tests[\"Status code is 404 (Bug #11058)\"] = responseCode.code === 404;\n\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Not found / exist message\"] = data.message.match(/[Nn]o.*(([Ee]xist)|([Ff]ound))/);\n}",
			"url": "https://pz-gateway.{{domain}}/event/{{triggerId}}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Delete the Trigger used throughout this collection.",
			"folder": "0e29f236-2061-8522-5123-eab4334b560d",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "2b19c954-d145-ead7-60e9-effb67becc69",
			"method": "DELETE",
			"name": "Delete Trigger",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"time": 1488913606599,
			"url": "https://pz-gateway.{{domain}}/trigger/{{triggerId}}",
			"rawModeData": ""
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Check the details of the job status of a the original Workflow-spawned job.",
			"descriptionFormat": "html",
			"folder": "b7a13432-9b2d-fe79-c6cf-02041888db50",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "2d780775-a840-d234-791f-14417e4e01a6",
			"method": "GET",
			"name": "Check Original Job Status Details",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'data.createdBy')) {\n    tests[\"Correct createdBy\"] = data.data.createdBy === postman.getEnvironmentVariable('username');\n}\nif (testLevels(tests, data, 'data.executedServiceId')) {\n    tests[\"Originating serviceId included in metadata\"] = data.data.executedServiceId === postman.getEnvironmentVariable('serviceId');\n}",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId_orig}}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"collectionRequestId": "3364457e-20b2-ea0c-0ea8-d581af4b5b19",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Create the Trigger used throughout this suite of tests.",
			"descriptionFormat": null,
			"folder": "3107dc0f-c42b-f0c8-b00b-ca317cce8468",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "3364457e-20b2-ea0c-0ea8-d581af4b5b19",
			"isFromCollection": true,
			"method": "POST",
			"name": "Create Trigger",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\n\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.triggerId', 'string')) {\n    tests[\"triggerId GUID created\"] = data.data.triggerId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n    postman.setEnvironmentVariable('triggerId', data.data.triggerId);\n}",
			"url": "https://pz-gateway.{{domain}}/trigger",
			"rawModeData": "{\n    \"name\": \"CI Testing Trigger\",\n    \"enabled\": true,\n    \"eventTypeId\": \"{{eventTypeId}}\",\n    \"condition\": {\n        \"query\": {\n            \"bool\": {\n                \"must\": [\n                    {\n                        \"match\": {\n                            \"data.dataType\": \"raster\"\n                        }\n                    }\n                ]\n            }\n        }\n    },\n    \"job\": {\n        \"jobType\": {\n            \"type\": \"execute-service\",\n            \"data\": {\n                \"serviceId\": \"{{serviceId}}\",\n                \"dataInputs\": {\n                    \"test\": {\n                        \"content\": \"{ \\\"log\\\": \\\"Received event with type $dataType\\\" }\",\n                        \"type\": \"body\",\n                        \"mimeType\": \"application/json\"\n                    }\n                },\n                \"dataOutput\": [ {\n                    \"content\": \"filler text\",\n                    \"mimeType\":\"application/json\",\n                    \"type\":\"text\"\n                } ]\n            }\n        }\n    }\n}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt to delete a Trigger that has already been deleted.",
			"descriptionFormat": null,
			"folder": "0815a7ca-5a76-79ac-e882-d4d5a5d65783",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "36fd9f47-8c7e-203a-f1f5-ca2eeface9d9",
			"method": "DELETE",
			"name": "Deletion - Delete Trigger Again",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": "",
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\n\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Not found / exist message\"] = data.message.match(/[Nn]o.*(([Ee]xist)|([Ff]ound))/);\n}",
			"url": "https://pz-gateway.{{domain}}/trigger/{{triggerId_deletion}}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Simple Health check to pz-gateway.  Postman Environemnt Variables are initialized in this step.",
			"folder": "3107dc0f-c42b-f0c8-b00b-ca317cce8468",
			"headerData": [],
			"headers": "",
			"helperAttributes": {},
			"id": "382f4799-3a18-7d68-b591-6f25694cbb5a",
			"method": "GET",
			"name": "Hello & Variable Initialization",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\"< < < < < < < < < < < < < START-UP > > > > > > > > > > > \");\nconsole.log(\"   These tests create required environment variables.    \");\nconsole.log(\"    Any failures here will cause other tests to fail.    \");\nconsole.log(\"            DO NOT PUSH if these tests fail.             \");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"queryParams": [],
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\n\n\ntests[\"Says Hello!\"] = responseBody.has('Hello');\npostman.setEnvironmentVariable('eventTypeId', '');\npostman.setEnvironmentVariable('serviceId', '');\npostman.setEnvironmentVariable('triggerId', '');\npostman.setEnvironmentVariable('eventId', '');\npostman.setEnvironmentVariable('alertId', '');\npostman.setEnvironmentVariable('jobId', '');\npostman.setEnvironmentVariable('dataId', '');\npostman.setEnvironmentVariable('retry_loop', 0);\npostman.setEnvironmentVariable('max_retries', 5);\n\npostman.setEnvironmentVariable('eventId_notrigger', '');\npostman.setEnvironmentVariable('triggerId_nested', '');\npostman.setEnvironmentVariable('eventId_nested', '');\npostman.setEnvironmentVariable('eventTypeId_deletion', '');\npostman.setEnvironmentVariable('eventId_deletion', '');\npostman.setEnvironmentVariable('triggerId_deletion', '');\npostman.setEnvironmentVariable('eventId_soft', '');\npostman.setEnvironmentVariable('jobId_soft', '');\npostman.setEnvironmentVariable('eventType Name', '');\n\npostman.setEnvironmentVariable('trigger_name', 'CI Testing Trigger');",
			"time": 1497026953381,
			"url": "https://pz-gateway.{{domain}}/"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "This is in a series of requests to validate proper workflow deletion order.\nAttempt to delete an EventType that is in use by an Event.",
			"descriptionFormat": null,
			"folder": "0815a7ca-5a76-79ac-e882-d4d5a5d65783",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "399576c7-a9fa-032e-15df-01c862658442",
			"method": "DELETE",
			"name": "Deletion - In Use by Event",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": "",
			"tests": "tests[\"Status code is 403\"] = responseCode.code === 403;\n\nvar data = JSON.parse(responseBody);\n\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"'In use' message\"] = data.message.match(/[Uu]s[ie]/);\n}",
			"url": "https://pz-gateway.{{domain}}/eventType/{{eventTypeId_deletion}}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "This is in a series of requests to validate proper workflow deletion order.\nCreate an Event.",
			"descriptionFormat": null,
			"folder": "0815a7ca-5a76-79ac-e882-d4d5a5d65783",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "3d8eaa05-a549-e002-eeb2-e24369ac53b6",
			"method": "POST",
			"name": "Deletion - Create Event",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\n\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.eventId', 'string')) {\n    tests[\"eventId GUID created\"] = data.data.eventId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n    postman.setEnvironmentVariable('eventId_deletion', data.data.eventId);\n}\n\nvar wait = eval(postman.getEnvironmentVariable('wait'));\nwait(5000);",
			"url": "https://pz-gateway.{{domain}}/event",
			"rawModeData": "{\n    \"data\": {\n        \"dummy\": \"nothing\"\n    },\n  \"eventTypeId\": \"{{eventTypeId_deletion}}\"\n}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check the details of the Trigger metadata.",
			"folder": "b7a13432-9b2d-fe79-c6cf-02041888db50",
			"headerData": [
				{
					"description": "",
					"enabled": true,
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"description": "",
					"enabled": true,
					"key": "Authorization",
					"value": ""
				}
			],
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "3e73dc36-6955-d9ce-7143-3b82e29e0de6",
			"method": "GET",
			"name": "Get Trigger Details",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": "",
			"queryParams": [],
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'data.triggerId')) {\n    tests[\"Correct triggerId returned\"] = data.data.triggerId === postman.getEnvironmentVariable('triggerId');\n}\nif (testLevels(tests, data, 'data.eventTypeId')) {\n    tests[\"Correct eventTypeId returned\"] = data.data.eventTypeId === postman.getEnvironmentVariable('eventTypeId');\n}\nif (testLevels(tests, data, 'data.createdBy')) {\n    tests[\"Correct createdBy\"] = data.data.createdBy === postman.getEnvironmentVariable('username');\n}\nif (testLevels(tests, data, 'data.enabled')) {\n    tests[\"Trigger is enabled\"] = data.data.enabled === true;\n}\nif (testLevels(tests, data, 'data.createdOn', 'string')) {\n    tests[\"Timestamp created\"] = data.data.createdOn.match(/\\d{4}-\\d{2}-\\d{2}/) && data.data.createdOn.match(/\\d{2}:\\d{2}:\\d{2}/);\n}\nif (testLevels(tests, data, 'data.condition.query.bool.must','array')) {\n    if (testLevels(tests, data.data.condition.query.bool.must[0], 'match')) {\n        tests[\"Correct query value\"] = data.data.condition.query.bool.must[0].match['data.dataType'] === 'raster';\n    }\n}\n\nif (testLevels(tests, data, 'data.job.jobType.data.serviceId')) {\n    tests[\"Correct serviceId\"] = data.data.job.jobType.data.serviceId === postman.getEnvironmentVariable('serviceId');\n}\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Correct Type\"] = data.type.match(/[Tt]rigger/);\n}",
			"time": 1497540770158,
			"url": "https://pz-gateway.{{domain}}/trigger/{{triggerId}}",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": null,
			"dataMode": "params",
			"description": "List Events, sorting by descending createdBy.",
			"descriptionFormat": null,
			"folder": "b7a13432-9b2d-fe79-c6cf-02041888db50",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "40a40178-8fdf-2b16-9111-267da82b33da",
			"method": "GET",
			"name": "Query Event - Descending createdBy",
			"pathVariables": {},
			"preRequestScript": null,
			"rawModeData": null,
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar last = '';\nvar next = '';\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'createdBy', 'skip', 'data[].')) {\n            next = data.data[i].createdBy;\n            if (next <= last || last === '') {\n                last = next;\n                tests[\"Results are in descending order\"] = true;\n            }\n            else {\n                tests[\"Results are in descending order\"] = false;\n                break;\n            }\n        }\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/event?perPage=100&order=desc&sortBy=createdBy"
		},
		{
			"id": "42135ff7-4a54-5313-4f52-b99095d6641b",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "",
					"description": "",
					"enabled": true
				}
			],
			"url": "https://pz-gateway.{{domain}}/trigger/{{triggerId_gp}}",
			"queryParams": [],
			"preRequestScript": "",
			"pathVariables": {},
			"pathVariableData": [],
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}\n\nwait(15000); // Time for items to truly be deleted.",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1503525634937,
			"name": "Geopoint - Delete Trigger",
			"description": "Delete the Trigger that was used to validate that a Trigger can match geo_point values.",
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"rawModeData": ""
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "This is in a series of requests to validate proper workflow deletion order.\nAttempt to delete an EventType that is in use by a Trigger.",
			"descriptionFormat": null,
			"folder": "0815a7ca-5a76-79ac-e882-d4d5a5d65783",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "43628373-9d0b-bf51-efe0-89d7d4a871c9",
			"method": "DELETE",
			"name": "Deletion - In Use by Trigger",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": "",
			"tests": "tests[\"Status code is 403\"] = responseCode.code === 403;\n\nvar data = JSON.parse(responseBody);\n\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"'In use' message\"] = data.message.match(/[Uu]s[ie]/);\n}",
			"url": "https://pz-gateway.{{domain}}/eventType/{{eventTypeId_deletion}}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Try a \"match_all\" Elastic Search query to find alerts.",
			"descriptionFormat": "html",
			"folder": "0815a7ca-5a76-79ac-e882-d4d5a5d65783",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "469ca7e4-dff3-ad60-ad08-bbb77ff68b08",
			"method": "POST",
			"name": "Alert Complex Query",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\n\ntests[\"Status code is 200 (Bug #11598)\"] = responseCode.code === 200;\n\nvar found = false;\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'alertId', 'skip', 'data[].')) {\n            if (data.data[i].alertId === postman.getEnvironmentVariable('alertId')) {\n                found = true;\n            }\n        }\n    }\n    tests[\"Alert found\"] = found;\n}",
			"url": "https://pz-gateway.{{domain}}/alert/query",
			"rawModeData": "{\n    \"query\": {\n        \"match_all\": {}\n    }\n}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "This is in a series of requests to validate proper workflow deletion order.\nDelete the Event.",
			"descriptionFormat": null,
			"folder": "0815a7ca-5a76-79ac-e882-d4d5a5d65783",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "49e93bdc-f135-fd14-4d6b-14751fb08c68",
			"method": "DELETE",
			"name": "Deletion - Delete Event",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"url": "https://pz-gateway.{{domain}}/event/{{eventId_deletion}}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": null,
			"dataMode": "params",
			"description": "Check that the second page of of the EventType list can be accessed.",
			"folder": "b7a13432-9b2d-fe79-c6cf-02041888db50",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "56a048d9-0a5f-acdd-c960-b78fe9876c76",
			"method": "GET",
			"name": "2nd page Query - EventType",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'pagination.count')) {\n    var numberDisplayed = Math.max(Math.min(data.pagination.count - 3, 3), 0);\n    if (testLevels(tests, data, 'data') && Array.isArray(data.data)) {\n        tests[\"Correct number should be preent on second page\"] = numberDisplayed == data.data.length;\n    }\n    tests[\"Reporting page 1\"] = data.pagination.page === 1;\n}\nif (testLevels(tests, data, 'pagination.page')) {\n    tests[\"Reporting page 1\"] = data.pagination.page === 1;\n}\nif (testLevels(tests, data, 'pagination.perPage')) {\n    tests[\"Reporting 3 per page\"] = data.pagination.perPage === 3;\n}\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Correct Type\"] = data.type.match(/[Ee]vent.*[Tt]ype/) && data.type.match(/[Ll]ist/);\n}",
			"time": 1489500797645,
			"url": "https://pz-gateway.{{domain}}/eventType?perPage=3&page=1"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt to Create a Trigger from a deleted EventType.",
			"descriptionFormat": null,
			"folder": "0815a7ca-5a76-79ac-e882-d4d5a5d65783",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "56cc8148-ca72-0550-3c7f-e02a0148464d",
			"method": "POST",
			"name": "Deletion - Create Trigger",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"eventType not found message\"] = data.message.match(/[Nn]o.*(([Ee]xist)|([Ff]ound))/); data.message.match(/[Ee]vent[Tt]ype/);\n}",
			"url": "https://pz-gateway.{{domain}}/trigger",
			"rawModeData": "{\n    \"name\": \"CI Testing Trigger\",\n    \"enabled\": true,\n    \"eventTypeId\": \"{{eventTypeId_deletion}}\",\n    \"condition\": {\n        \"query\": {\n            \"query\": {\n                \"bool\": {\n                    \"must\": [\n                        {\n                            \"match\": {\n                                \"data.dataType\": \"raster\"\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    },\n    \"job\": {\n        \"jobType\": {\n            \"type\": \"execute-service\",\n            \"data\": {\n                \"serviceId\": \"{{serviceId}}\",\n                \"dataInputs\": {\n                    \"test\": {\n                        \"content\": \"{ \\\"log\\\": \\\"Received event with type $dataType\\\" }\",\n                        \"type\": \"body\",\n                        \"mimeType\": \"application/json\"\n                    }\n                },\n                \"dataOutput\": [ {\n                    \"content\": \"filler text\",\n                    \"mimeType\":\"application/json\",\n                    \"type\":\"text\"\n                } ]\n            }\n        }\n    }\n}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": null,
			"dataMode": "params",
			"description": "List Events, and verify that the one created in this test is present.",
			"descriptionFormat": null,
			"folder": "0815a7ca-5a76-79ac-e882-d4d5a5d65783",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "5e1a0b41-45e5-41e3-ee4e-751c8d8953dc",
			"method": "GET",
			"name": "Query Event",
			"pathVariables": {},
			"preRequestScript": null,
			"rawModeData": null,
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar found = false;\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'eventId', 'skip', 'data[].')) {\n            if (data.data[i].eventId === postman.getEnvironmentVariable('eventId')) {\n                found = true;\n            }\n        }\n    }\n    if (found) {\n        tests[\"Event found\"] = true;\n        postman.setEnvironmentVariable('retry_loop', 0);\n    }\n    else {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Query Event');\n            wait(1000);\n        }\n        else {\n            tests[\"Event found\"] = true;\n            postman.setEnvironmentVariable('retry_loop', 0);\n        }\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/event?perPage=100&order=desc&sortBy=createdOn"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Part of a series of requests to verify that Workflow can disable a Trigger and that a disabled trigger will not create Alerts.\nCheck the Trigger metadata, looking for \"OFFLINE\".",
			"folder": "0815a7ca-5a76-79ac-e882-d4d5a5d65783",
			"headerData": [
				{
					"description": "",
					"enabled": true,
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"description": "",
					"enabled": true,
					"key": "Authorization",
					"value": ""
				}
			],
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "5f5dd927-345f-7550-9277-acbbe22de4bc",
			"method": "GET",
			"name": "Disable Trigger - Validate",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": "",
			"queryParams": [],
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'data.triggerId')) {\n    tests[\"Correct trigger returned\"] = data.data.triggerId === postman.getEnvironmentVariable('triggerId');\n}\nif (testLevels(tests, data, 'data.enabled')) {\n    tests[\"Trigger was disabled\"] = data.data.enabled == false;\n}",
			"time": 1502827645409,
			"url": "https://pz-gateway.{{domain}}/trigger/{{triggerId}}",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Get the metadata of the Alert.",
			"descriptionFormat": null,
			"folder": "0815a7ca-5a76-79ac-e882-d4d5a5d65783",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "61fc52d5-d3e6-56c7-4d9b-37f1e8f247b0",
			"method": "GET",
			"name": "Get Alert",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'data.alertId')) {\n    tests[\"Correct alertId returned\"] = data.data.alertId === postman.getEnvironmentVariable('alertId');\n}",
			"url": "https://pz-gateway.{{domain}}/alert/{{alertId}}",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt to create an Event without an \"eventTypeId\" parameter.",
			"descriptionFormat": null,
			"folder": "b7a13432-9b2d-fe79-c6cf-02041888db50",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "63f8284d-9c18-eaa7-5806-ba700dbb19a7",
			"method": "POST",
			"name": "Create Event - No EventTypeId",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Failed Validation message\"] = data.message.match(/[Vv]alidation/);\n}\n\nif (testLevels(tests, data, 'errors', 'array')) {\n    if (testLevels(tests, data.errors[0], 'code', 'string')) {\n        tests[\"Not Null Message\"] = data.errors[0].code.match(/[Nn]ull/);\n    }\n    if (testLevels(tests, data.errors[0], 'field')) {\n        tests[\"The problem is with 'eventTypeId'\"] = data.errors[0].field === 'eventTypeId';\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/event",
			"rawModeData": "{\n    \"data\": {  \n      \"mapping\": {\n    \"dataId\": \"testId\",\n    \"dataType\": \"raster\",\n    \"epsg\": \"3\",\n    \"minX\": \"1.0\",\n    \"minY\": \"1.0\",\n    \"maxX\": \"10.0\",\n    \"maxY\": \"10.0\",\n    \"hosted\": true\n      }\n    }\n}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "This step exists to print the \"Critical\" header.",
			"descriptionFormat": null,
			"folder": "ed4acd95-58bc-4ffb-410b-92dc9085cce0",
			"headers": "",
			"helperAttributes": {},
			"id": "677ed37a-d1c4-46ce-759f-638709b27e19",
			"method": "GET",
			"name": "Display",
			"pathVariables": {},
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\"< < < < < < < < < < < CRITICAL > > > > > > > > > >\");\nconsole.log(\"    These tests represent basic functionality.    \");\nconsole.log(\"         DO NOT PUSH if these tests fail.         \");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"rawModeData": null,
			"tests": "",
			"url": "https://pz-gateway.{{domain}}/"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Delete the Service used throughout this collection.",
			"descriptionFormat": null,
			"folder": "0e29f236-2061-8522-5123-eab4334b560d",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "6a2828ac-5a7f-b9a2-ed8e-3b58355b63f2",
			"method": "DELETE",
			"name": "Delete Service",
			"pathVariables": {},
			"preRequestScript": null,
			"rawModeData": null,
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check the details of the Alert metadata.",
			"descriptionFormat": null,
			"folder": "b7a13432-9b2d-fe79-c6cf-02041888db50",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "6a535752-5478-cf69-5995-7a21ff75c962",
			"method": "GET",
			"name": "Get Alert Details",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'data.alertId')) {\n    tests[\"Correct alertId returned\"] = data.data.alertId === postman.getEnvironmentVariable('alertId');\n}\nif (testLevels(tests, data, 'data.triggerId')) {\n    tests[\"Correct triggerId returned\"] = data.data.triggerId === postman.getEnvironmentVariable('triggerId');\n}\nif (testLevels(tests, data, 'data.eventId')) {\n    tests[\"Correct eventId returned\"] = data.data.eventId === postman.getEnvironmentVariable('eventId');\n}\nif (testLevels(tests, data, 'data.createdBy')) {\n    tests[\"Correct createdBy\"] = data.data.createdBy === postman.getEnvironmentVariable('username');\n}\nif (testLevels(tests, data, 'data.createdOn', 'string')) {\n    tests[\"Timestamp created\"] = data.data.createdOn.match(/\\d{4}-\\d{2}-\\d{2}/) && data.data.createdOn.match(/\\d{2}:\\d{2}:\\d{2}/);\n}\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Correct Type\"] = data.type.match(/[Aa]lert/);\n}",
			"url": "https://pz-gateway.{{domain}}/alert/{{alertId}}",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": null,
			"dataMode": "params",
			"description": "List Events, filtering by eventTypeId",
			"folder": "b7a13432-9b2d-fe79-c6cf-02041888db50",
			"headerData": [
				{
					"description": "",
					"enabled": true,
					"key": "Authorization",
					"value": ""
				}
			],
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "6b4fe2ea-531f-643b-3fe7-e176c0786d98",
			"method": "GET",
			"name": "Query Event - Filter by eventTypeName",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "eventTypeName",
					"value": "{{eventTypeName}}"
				}
			],
			"responses": [],
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nmatch_eventTypeName = true;\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'eventTypeId', 'skip', 'data.data[0].')) {\n            if (data.data[i].eventTypeId != postman.getEnvironmentVariable('eventTypeId')) {\n                match_eventTypeName = false;\n                console.log(data.data[i].eventId);\n            }\n        }\n    }\n}\n\ntests[\"All results should match the eventTypeId of the matched eventTypeName\"] = match_eventTypeName;",
			"time": 1497015401885,
			"url": "https://pz-gateway.{{domain}}/event?eventTypeName={{eventTypeName}}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": null,
			"dataMode": "params",
			"description": "List Alerts, sorting by descending eventId.",
			"descriptionFormat": null,
			"folder": "b7a13432-9b2d-fe79-c6cf-02041888db50",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "6c3b1ce7-5452-839c-1064-2a042a789864",
			"method": "GET",
			"name": "Query Alert - Descending eventId",
			"pathVariables": {},
			"preRequestScript": null,
			"rawModeData": null,
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar last = '';\nvar next = '';\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'eventId', 'skip', 'data[].')) {\n            next = data.data[i].eventId;\n            if (next <= last || last === '') {\n                last = next;\n                tests[\"Results are in descending order\"] = true;\n            }\n            else {\n                tests[\"Results are in descending order\"] = false;\n                break;\n            }\n        }\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/alert?perPage=100&order=desc&sortBy=eventId"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Get the metadata of the EventType.",
			"folder": "0815a7ca-5a76-79ac-e882-d4d5a5d65783",
			"headerData": [
				{
					"description": "",
					"enabled": true,
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"description": "",
					"enabled": true,
					"key": "Authorization",
					"value": ""
				}
			],
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "6c6933b5-d290-5f00-2145-7a77c6b60e23",
			"method": "GET",
			"name": "Get EventType",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\"< < < < < < < < < < < IMPORTANT > > > > > > > > > > >\");\nconsole.log(\"      These tests represent important features.      \");\nconsole.log(\"Use extreme caution when pushing if these tests fail.\");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"queryParams": [],
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'data.eventTypeId')) {\n    tests[\"Correct eventTypeId returned\"] = data.data.eventTypeId === postman.getEnvironmentVariable('eventTypeId');\n}\nif (testLevels(tests, data, 'data.name')) {\n    postman.setEnvironmentVariable('eventTypeName', data.data.name);\n}",
			"time": 1496943336748,
			"url": "https://pz-gateway.{{domain}}/eventType/{{eventTypeId}}",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": null,
			"dataMode": "params",
			"description": "List EventTypes, and verify that the one created in this test is present.",
			"folder": "b7a13432-9b2d-fe79-c6cf-02041888db50",
			"headerData": [
				{
					"description": "",
					"enabled": true,
					"key": "Authorization",
					"value": ""
				}
			],
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "6d94d06f-8d37-de68-7586-d419908f86cd",
			"method": "GET",
			"name": "Query EventType - Filter by name",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "name",
					"value": "{{eventTypeName}}"
				}
			],
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nmatch_eventTypeName = true;\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'name', 'skip', 'data.data[0].')) {\n            if (data.data[i].name != postman.getEnvironmentVariable('eventTypeName')) {\n                match_eventTypeName = false;\n                console.log(data.data[i].eventTypeId);\n            }\n        }\n    }\n}\n\ntests[\"All results should match the provided name\"] = match_eventTypeName;",
			"time": 1497015396101,
			"url": "https://pz-gateway.{{domain}}/eventType?name={{eventTypeName}}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Delete the Event that was used to validate that a Trigger can match data in a nested structure.",
			"descriptionFormat": null,
			"folder": "0e29f236-2061-8522-5123-eab4334b560d",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "6db9affc-8ec4-3657-06a9-9e6ef1d3c1a7",
			"method": "DELETE",
			"name": "Nested - Delete Event",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"url": "https://pz-gateway.{{domain}}/event/{{eventId_nested}}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": null,
			"dataMode": "params",
			"description": "Check that the second page of of the Trigger list can be accessed.",
			"folder": "b7a13432-9b2d-fe79-c6cf-02041888db50",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "6eac2dc5-cdc5-aafa-7a6b-e7927573eb09",
			"method": "GET",
			"name": "2nd page Query - Trigger",
			"pathVariables": {},
			"preRequestScript": null,
			"responses": [],
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'pagination.count')) {\n    var numberDisplayed = Math.max(Math.min(data.pagination.count - 3, 3), 0);\n    if (testLevels(tests, data, 'data') && Array.isArray(data.data)) {\n        tests[\"Correct number should be preent on second page\"] = numberDisplayed == data.data.length;\n    }\n    tests[\"Reporting page 1\"] = data.pagination.page === 1;\n}\nif (testLevels(tests, data, 'pagination.page')) {\n    tests[\"Reporting page 1\"] = data.pagination.page === 1;\n}\nif (testLevels(tests, data, 'pagination.perPage')) {\n    tests[\"Reporting 3 per page\"] = data.pagination.perPage === 3;\n}\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Correct Type\"] = data.type.match(/[Tt]rigger/) && data.type.match(/[Ll]ist/);\n}",
			"time": 1489500886650,
			"url": "https://pz-gateway.{{domain}}/trigger?page=1&perPage=3"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Delete the Event that was used to validate that Workflow cannot bypass Service Controller's softDelete function.",
			"descriptionFormat": null,
			"folder": "0e29f236-2061-8522-5123-eab4334b560d",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "6f777a93-94e8-ff11-e93d-a885a2ab0da4",
			"method": "DELETE",
			"name": "Soft - Delete Event",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"url": "https://pz-gateway.{{domain}}/event/{{eventId_soft}}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Get the metadata of the Event.",
			"descriptionFormat": null,
			"folder": "0815a7ca-5a76-79ac-e882-d4d5a5d65783",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "72168779-f2cb-e1ea-0e5a-4af78d2933f4",
			"method": "GET",
			"name": "Get Event",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'data.eventId')) {\n    tests[\"Correct eventId returned\"] = data.data.eventId === postman.getEnvironmentVariable('eventId');\n}",
			"url": "https://pz-gateway.{{domain}}/event/{{eventId}}",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt to create an Event with an extra field in the \"data\" parameter, relative to the EventType.",
			"descriptionFormat": null,
			"folder": "b7a13432-9b2d-fe79-c6cf-02041888db50",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "72450ce2-7ba8-b2c3-2bec-c3bb77e59c24",
			"method": "POST",
			"name": "Create Event - Extra Field",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"'extraParam' is not allowed'\"] = data.message.match(/[Nn]ot/) && data.message.match(/extraParam/);\n}",
			"url": "https://pz-gateway.{{domain}}/event",
			"rawModeData": "{\n    \"data\": {\n        \"dataId\": \"testId\",\n    \"dataType\": \"raster\",\n    \"epsg\": 3,\n    \"minX\": 1,\n    \"minY\": 1.0,\n    \"maxX\": 10.0,\n    \"maxY\": 10.0,\n    \"hosted\": true,\n        \"sampleNest\": {\n            \"someParam\": \"someValue\",\n            \"extraParam\": \"Should Not Be Here!\"\n        }\n    },\n  \"eventTypeId\": \"{{eventTypeId}}\"\n}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt to delete an Event that has already been deleted.",
			"descriptionFormat": null,
			"folder": "0815a7ca-5a76-79ac-e882-d4d5a5d65783",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "73861207-aa0b-f386-6061-2286bcf4cce8",
			"method": "DELETE",
			"name": "Deletion - Delete Event Again",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": "",
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\n\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Not found / exist message\"] = data.message.match(/[Nn]o.*(([Ee]xist)|([Ff]ound))/);\n}",
			"url": "https://pz-gateway.{{domain}}/event/{{eventId_deletion}}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Get the metadata of the Trigger.",
			"descriptionFormat": null,
			"folder": "0815a7ca-5a76-79ac-e882-d4d5a5d65783",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "75853edd-54d6-fcb8-6de6-eb50a56a5f84",
			"method": "GET",
			"name": "Get Trigger",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'data.triggerId')) {\n    tests[\"Correct trigger returned\"] = data.data.triggerId === postman.getEnvironmentVariable('triggerId');\n}",
			"url": "https://pz-gateway.{{domain}}/trigger/{{triggerId}}",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": null,
			"dataMode": "params",
			"description": "List Alerts, sorting by ascending alertId.",
			"descriptionFormat": "html",
			"folder": "b7a13432-9b2d-fe79-c6cf-02041888db50",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "7b04d36f-071b-3eb1-8e4b-c30c4c29a2ce",
			"method": "GET",
			"name": "Query Alert - Ascending alertId",
			"pathVariables": {},
			"preRequestScript": null,
			"rawModeData": null,
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar last = '';\nvar next = '';\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'alertId', 'skip', 'data[].')) {\n            next = data.data[i].alertId;\n            if (next >= last || last === '') {\n                last = next;\n                tests[\"Results are in ascending order\"] = true;\n            }\n            else {\n                tests[\"Results are in ascending order\"] = false;\n                break;\n            }\n        }\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/alert?perPage=100&order=asc&sortBy=alertId"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Delete the Event that was used to validate that a Trigger will not fire an Alert if that Trigger is disabled.",
			"descriptionFormat": "html",
			"folder": "0e29f236-2061-8522-5123-eab4334b560d",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "7f606417-cbb5-20cf-573b-5ee32ee65e52",
			"method": "DELETE",
			"name": "Disable Trigger - Delete Event",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"url": "https://pz-gateway.{{domain}}/event/{{eventId_disabled}}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": null,
			"dataMode": "params",
			"description": "Verify that an Alert is created from a Trigger finding a match within a the nested structure of an Event.",
			"descriptionFormat": null,
			"folder": "ed4acd95-58bc-4ffb-410b-92dc9085cce0",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "7f7fd8a9-2c4e-2552-2c30-ef54d7033f4b",
			"method": "GET",
			"name": "Nested - Find Alert",
			"pathVariables": {},
			"preRequestScript": null,
			"rawModeData": null,
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar found = false;\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'eventId', 'skip', 'data[].') && testLevels(tests, data.data[i], 'triggerId', 'skip', 'data[].')) {\n            if (data.data[i].triggerId === postman.getEnvironmentVariable('triggerId_nested') && data.data[i].eventId === postman.getEnvironmentVariable('eventId_nested')) {\n                found = true;\n            }\n        }\n    }\n    if (found) {\n        tests[\"alert found\"] = true;\n        postman.setEnvironmentVariable('retry_loop', 0);\n    }\n    else {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Nested - Find Alert');\n            wait(1000);\n        }\n        else {\n            tests[\"alert found\"] = false;\n            postman.setEnvironmentVariable('retry_loop', 0);\n        }\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/alert?perPage=1000&order=desc&sortBy=createdOn"
		},
		{
			"id": "8751fd74-ce6d-8cc1-127f-a52ae3dbdd9f",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "",
					"description": "",
					"enabled": true
				}
			],
			"url": "https://pz-gateway.{{domain}}/eventType",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\n\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.eventTypeId', 'string')) {\n    tests[\"eventTypeId GUID created\"] = data.data.eventTypeId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n    postman.setEnvironmentVariable('eventTypeId_gp', data.data.eventTypeId);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1503524239942,
			"name": "Geopoint - Create EventType",
			"description": "Create the EventType used throughout this suite of tests.",
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"responses": [],
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\",\r\n    \"sampleNest\": {\r\n        \"someParam\": \"string\"\r\n    },\r\n    \"testGP\": \"geo_point\"\r\n  }\r\n}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": null,
			"dataMode": "params",
			"description": "Check that the second page of of the Alert list can be accessed.",
			"folder": "b7a13432-9b2d-fe79-c6cf-02041888db50",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "89b8a80b-ecd4-bcf4-6611-1280ef623c31",
			"method": "GET",
			"name": "2nd page Query - Alert",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'pagination.count')) {\n    var numberDisplayed = Math.max(Math.min(data.pagination.count - 3, 3), 0);\n    if (testLevels(tests, data, 'data') && Array.isArray(data.data)) {\n        tests[\"Correct number should be preent on second page\"] = numberDisplayed == data.data.length;\n    }\n    tests[\"Reporting page 1\"] = data.pagination.page === 1;\n}\nif (testLevels(tests, data, 'pagination.page')) {\n    tests[\"Reporting page 1\"] = data.pagination.page === 1;\n}\nif (testLevels(tests, data, 'pagination.perPage')) {\n    tests[\"Reporting 3 per page\"] = data.pagination.perPage === 3;\n}\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Correct Type\"] = data.type.match(/[Aa]lert/) && data.type.match(/[Ll]ist/);\n}",
			"time": 1489500752890,
			"url": "https://pz-gateway.{{domain}}/alert?perPage=3&page=1"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt to create an EventType with a parameter with an undefined data type (\"badParam\": \"foo\").",
			"descriptionFormat": null,
			"folder": "b7a13432-9b2d-fe79-c6cf-02041888db50",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "89cf9440-5759-47e9-6957-3cfac30a819b",
			"method": "POST",
			"name": "Create EventType - Invalid Data Type",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"maxY defined in eventType message\"] = data.message.match(/[Vv]alid/) && data.message.match(/[Tt]ype/) && data.message.match('foo');\n}",
			"url": "https://pz-workflow.{{domain}}/eventType",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\",\r\n    \"sampleNest\": {\r\n        \"someParam\": \"string\"\r\n    },\r\n    \"badParam\": \"foo\"\r\n  }\r\n}  "
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt to create an Event with a missing field in the \"data\" parameter, relative to the EventType.",
			"descriptionFormat": null,
			"folder": "b7a13432-9b2d-fe79-c6cf-02041888db50",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "8a38d894-9de3-315e-810f-4e0a895dc809",
			"method": "POST",
			"name": "Create Event - Missing Field",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"maxY defined in eventType message\"] = data.message.match(/[Nn]ot/) && data.message.match(/maxY/) && data.message.match(/[Ee]vent[Tt]ype/);\n}",
			"url": "https://pz-gateway.{{domain}}/event",
			"rawModeData": "{\n    \"data\": {\n        \"dataId\": \"testId\",\n    \"dataType\": \"raster\",\n    \"epsg\": 3,\n    \"minX\": 1,\n    \"minY\": 1.0,\n    \"maxX\": 10.0,\n    \"hosted\": true,\n        \"sampleNest\": {\n            \"someParam\": \"someValue\"\n        }\n    },\n  \"eventTypeId\": \"{{eventTypeId}}\"\n}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Part of a series of requests to verify that Workflow can disable a Trigger and that a disabled trigger will not create Alerts.\nCreate an Event that would normally match the Trigger.",
			"folder": "0815a7ca-5a76-79ac-e882-d4d5a5d65783",
			"headerData": [
				{
					"description": "",
					"enabled": true,
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"description": "",
					"enabled": true,
					"key": "Authorization",
					"value": ""
				}
			],
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "8bfe9aad-8553-dfb8-4a0d-fdec67099b46",
			"method": "POST",
			"name": "Disable Trigger - Create Event",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": "",
			"queryParams": [],
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\n\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\n\nif (testLevels(tests, data, 'data.eventId', 'string')) {\n    tests[\"eventId GUID created\"] = data.data.eventId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n    postman.setEnvironmentVariable('eventId_disabled', data.data.eventId);\n}\nwait(10000);",
			"time": 1502827644918,
			"url": "https://pz-gateway.{{domain}}/event",
			"rawModeData": "{\n    \"data\": {\n        \"dataId\": \"testId\",\n    \"dataType\": \"raster\",\n    \"epsg\": 3,\n    \"minX\": 1,\n    \"minY\": 1.0,\n    \"maxX\": 10.0,\n    \"maxY\": 10.0,\n    \"hosted\": true,\n        \"sampleNest\": {\n            \"someParam\": \"someValue\"\n        }\n    },\n  \"eventTypeId\": \"{{eventTypeId}}\"\n}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": null,
			"dataMode": "params",
			"description": "List EventTypes, sorting by descending EventTypeId.",
			"descriptionFormat": null,
			"folder": "b7a13432-9b2d-fe79-c6cf-02041888db50",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "8c2b749d-ddae-ae5b-2ff9-ee8992f1183b",
			"method": "GET",
			"name": "Query EventType - Descending eventTypeId",
			"pathVariables": {},
			"preRequestScript": null,
			"rawModeData": null,
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar last = '';\nvar next = '';\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'eventTypeId', 'skip', 'data[].')) {\n            next = data.data[i].eventTypeId;\n            if (next <= last || last === '') {\n                last = next;\n                tests[\"Results are in descending order\"] = true;\n            }\n            else {\n                tests[\"Results are in descending order\"] = false;\n                break;\n            }\n        }\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/eventType?perPage=100&order=desc&sortBy=eventTypeId"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"collectionRequestId": "8fc295ab-c416-da26-0ae7-00777626b6a3",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Part of a series of requests to verify that Workflow cannot bypass the \"softDelete\" option of a registered service.\nSoftDelete the service.",
			"descriptionFormat": null,
			"folder": "0815a7ca-5a76-79ac-e882-d4d5a5d65783",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "8fc295ab-c416-da26-0ae7-00777626b6a3",
			"isFromCollection": true,
			"method": "DELETE",
			"name": "Soft - Delete Service",
			"pathVariables": {},
			"preRequestScript": null,
			"rawModeData": null,
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}?softDelete=true"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Verify that a deleted Event cannot be found.",
			"descriptionFormat": null,
			"folder": "0815a7ca-5a76-79ac-e882-d4d5a5d65783",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "9bf03c56-2a5b-976f-0b20-a548efcb3c00",
			"method": "GET",
			"name": "Deletion - Event Not Found",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\n\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Not found / exist message\"] = data.message.match(/[Nn]o.*(([Ee]xist)|([Ff]ound))/);\n}",
			"url": "https://pz-gateway.{{domain}}/event/{{eventId_deletion}}",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt to create an EventType without the \"mapping\" parameter.",
			"descriptionFormat": null,
			"folder": "b7a13432-9b2d-fe79-c6cf-02041888db50",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "9e2f4848-5071-3690-db28-c2afe3ea79ca",
			"method": "POST",
			"name": "Create EventType - Missing 'mapping'",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Failed Validation message\"] = data.message.match(/[Vv]alidation/);\n}\n\nif (testLevels(tests, data, 'errors', 'array')) {\n    if (testLevels(tests, data.errors[0], 'code', 'string')) {\n        tests[\"Not Null Message\"] = data.errors[0].code.match(/[Nn]ull/);\n    }\n    if (testLevels(tests, data.errors[0], 'field')) {\n        tests[\"The problem is with 'mapping'\"] = data.errors[0].field === 'mapping';\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/eventType",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\"\r\n}  "
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Check that the job created by Workflow (Event matching a Trigger that spawned an Alert) was successful.",
			"descriptionFormat": null,
			"folder": "ed4acd95-58bc-4ffb-410b-92dc9085cce0",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "a025f979-8849-7f0e-37cd-76d6b4b20df2",
			"method": "GET",
			"name": "Check Job Status",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": null,
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\n\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.status')) {\n    if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Check Job Status');\n            wait(1000);\n        }\n        else {\n            tests[\"Job finished in time\"] = false;\n        }\n    }\n    else if (data.data.status === 'Success') {\n        postman.setEnvironmentVariable('retry_loop',0);\n        tests[\"Job finished in time\"] = true;\n        if (testLevels(tests, data, 'data.result.dataId', 'string')) {\n            tests[\"GUID created for dataId\"] = data.data.result.dataId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n            postman.setEnvironmentVariable(\"dataId\", data.data.result.dataId);\n        }\n    }\n    else {\n        tests[\"status should not be \" + data.data.status] = false;\n        postman.setEnvironmentVariable('retry_loop',0);\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId_orig}}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt to Create an Event from a deleted EventType.",
			"descriptionFormat": null,
			"folder": "0815a7ca-5a76-79ac-e882-d4d5a5d65783",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "a09540e4-d655-775e-ce0e-2ad02a32c16c",
			"method": "POST",
			"name": "Deletion - Create Event",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"eventType not found message\"] = data.message.match(/[Nn]o.*(([Ee]xist)|([Ff]ound))/) && data.message.match(/[Ee]vent[Tt]ype/) && !data.message.match(/variable/i);\n}",
			"url": "https://pz-gateway.{{domain}}/event",
			"rawModeData": "{\n    \"data\": {  \n      \"mapping\": {\n    \"dataId\": \"testId\",\n    \"dataType\": \"raster\",\n    \"epsg\": \"3\",\n    \"minX\": \"1.0\",\n    \"minY\": \"1.0\",\n    \"maxX\": \"10.0\",\n    \"maxY\": \"10.0\",\n    \"hosted\": true\n      }\n  },\n  \"eventTypeId\": \"{{eventTypeId_deletion}}\"\n}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": null,
			"dataMode": "params",
			"description": "List Triggers, and verify that the one created in this test is present.",
			"descriptionFormat": null,
			"folder": "0815a7ca-5a76-79ac-e882-d4d5a5d65783",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "a2212f06-9578-b286-78b5-02422e61431b",
			"method": "GET",
			"name": "Query Trigger",
			"pathVariables": {},
			"preRequestScript": null,
			"rawModeData": null,
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar found = false;\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'triggerId', 'skip', 'data[].')) {\n            if (data.data[i].triggerId === postman.getEnvironmentVariable('triggerId')) {\n                found = true;\n            }\n        }\n    }\n    if (found) {\n        tests[\"Trigger found\"] = true;\n        postman.setEnvironmentVariable('retry_loop', 0);\n    }\n    else {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Query Trigger');\n            wait(1000);\n        }\n        else {\n            tests[\"Trigger found\"] = true;\n            postman.setEnvironmentVariable('retry_loop', 0);\n        }\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/trigger?"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": null,
			"dataMode": "params",
			"description": "List Alerts, using the inflate option, and verify that the inflated data is correct",
			"folder": "b7a13432-9b2d-fe79-c6cf-02041888db50",
			"headerData": [
				{
					"description": "",
					"enabled": true,
					"key": "Authorization",
					"value": ""
				}
			],
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "a3fc6f5d-41ec-588f-dad0-4f00979eeb85",
			"method": "GET",
			"name": "Inflate Alerts",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "triggerId",
					"value": "{{triggerId}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "inflate",
					"value": "true"
				}
			],
			"responses": [],
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nfound = false;\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (data.data[i].alertId === postman.getEnvironmentVariable('alertId')) {\n            found = true;\n            // Verify Trigger Inflation:\n            if (testLevels(tests, data.data[i], 'trigger.triggerId', 'skip', 'data[].')) {\n                tests[\"Correct triggerId should be found in the trigger inflation\"] = data.data[i].trigger.triggerId === postman.getEnvironmentVariable('triggerId');\n            }\n            if (testLevels(tests, data.data[i], 'trigger.eventTypeId', 'skip', 'data[].')) {\n                tests[\"Correct eventTypeId should be found in the trigger inflation\"] = data.data[i].trigger.eventTypeId === postman.getEnvironmentVariable('eventTypeId');\n            }\n            if (testLevels(tests, data.data[i], 'trigger.name', 'skip', 'data[].')) {\n                tests[\"Correct name should be found in the trigger inflation\"] = data.data[i].trigger.name === postman.getEnvironmentVariable('trigger_name');\n            }\n            if (testLevels(tests, data.data[i], 'trigger.createdBy', 'skip', 'data[].')) {\n                tests[\"Correct createdBy should be found in the trigger inflation\"] = data.data[i].trigger.createdBy === postman.getEnvironmentVariable('username');\n            }\n            \n            // Verify Event Inflation:\n            if (testLevels(tests, data.data[i], 'event.eventId', 'skip', 'data[].')) {\n                tests[\"Correct eventId should be found in the event inflation\"] = data.data[i].event.eventId === postman.getEnvironmentVariable('eventId');\n            }\n            if (testLevels(tests, data.data[i], 'event.eventTypeId', 'skip', 'data[].')) {\n                tests[\"Correct eventTypeId should be found in the event inflation\"] = data.data[i].event.eventTypeId === postman.getEnvironmentVariable('eventTypeId');\n            }\n            if (testLevels(tests, data.data[i], 'event.createdBy', 'skip', 'data[].')) {\n                tests[\"Correct createdBy should be found in the event inflation\"] = data.data[i].event.createdBy === postman.getEnvironmentVariable('username');\n            }\n        }\n    }\n}\n\ntests[\"Alert should be found\"] = found;",
			"time": 1497027631064,
			"url": "https://pz-gateway.{{domain}}/alert?triggerId={{triggerId}}&inflate=true"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": null,
			"dataMode": "params",
			"description": "Verify that an Alert was created from the Event matching the criteria of the Trigger.",
			"folder": "3107dc0f-c42b-f0c8-b00b-ca317cce8468",
			"headerData": [
				{
					"description": "",
					"enabled": true,
					"key": "Authorization",
					"value": ""
				}
			],
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "a8f0c07b-d52c-ea85-05ae-ff579895c7b3",
			"method": "GET",
			"name": "Find Alert",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "perPage",
					"value": "100"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "order",
					"value": "desc"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "sortBy",
					"value": "createdOn"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "triggerId",
					"value": "{{triggerId}}"
				}
			],
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nfound = false;\nmatch_trigger = true;\nnoTest = {}\n\nif (testLevels(noTest, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'eventId', 'skip', 'data[].') && testLevels(tests, data.data[i], 'triggerId', 'skip', 'data[].')) {\n            if (data.data[i].triggerId === postman.getEnvironmentVariable('triggerId') && data.data[i].eventId === postman.getEnvironmentVariable('eventId')) {\n                found = true;\n                if (testLevels(tests, data.data[i], 'alertId', 'skip', 'data[].')) {\n                    tests[\"alertId GUID created\"] = data.data[i].alertId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n                    postman.setEnvironmentVariable('alertId', data.data[i].alertId);\n                }\n                if (testLevels(tests, data.data[i], 'jobId', 'skip', 'data[].')) {\n                    tests[\"jobId GUID created\"] = data.data[i].jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n                    postman.setEnvironmentVariable('jobId_orig', data.data[i].jobId);\n                }\n            }\n        }\n        if (testLevels(tests, data.data[i], 'triggerId', 'skip', 'data.data[0].')) {\n            if (data.data[i].triggerId != postman.getEnvironmentVariable('triggerId')) {\n                match_trigger = false;\n                console.log(data.data[i].alertId);\n            }\n        }\n    }\n}\nif (found) {\n    tests[\"alert found\"] = true;\n    postman.setEnvironmentVariable('retry_loop', 0);\n}\nelse if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n    postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n    postman.setNextRequest('Find Alert');\n    wait(1000);\n} else {\n    tests[\"alert found\"] = false;\n    postman.setEnvironmentVariable('retry_loop', 0);\n}\n\ntests[\"All responses match the triggerId\"] = match_trigger;",
			"time": 1497014647469,
			"url": "https://pz-gateway.{{domain}}/alert?perPage=100&order=desc&sortBy=createdOn&triggerId={{triggerId}}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "This is in a series of requests to validate proper workflow deletion order.\nDelete the Trigger.",
			"descriptionFormat": null,
			"folder": "0815a7ca-5a76-79ac-e882-d4d5a5d65783",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "a96b1301-559f-61bd-2c57-9b7e91578174",
			"method": "DELETE",
			"name": "Deletion - Delete Trigger",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}\n\nvar wait = eval(postman.getEnvironmentVariable('wait'));\nwait(5000);",
			"url": "https://pz-gateway.{{domain}}/trigger/{{triggerId_deletion}}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Create a Trigger designed to match a value in a nested structure in an Event (data.sampleNest.someParam).",
			"descriptionFormat": null,
			"folder": "ed4acd95-58bc-4ffb-410b-92dc9085cce0",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "af13b3e4-cb7f-4b92-4e51-022e7803db6b",
			"method": "POST",
			"name": "Nested - Create Trigger",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\n\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.triggerId', 'string')) {\n    tests[\"triggerId GUID created\"] = data.data.triggerId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n    postman.setEnvironmentVariable('triggerId_nested', data.data.triggerId);\n}",
			"url": "https://pz-gateway.{{domain}}/trigger",
			"rawModeData": "{\n    \"name\": \"CI Testing Trigger\",\n    \"enabled\": true,\n    \"eventTypeId\": \"{{eventTypeId}}\",\n    \"condition\": {\n        \"query\": {\n            \"query\": {\n                \"bool\": {\n                    \"must\": [\n                        {\n                            \"match\": {\n                                \"data.sampleNest.someParam\": \"SillyString\"\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    },\n    \"job\": {\n        \"jobType\": {\n            \"type\": \"execute-service\",\n            \"data\": {\n                \"serviceId\": \"{{serviceId}}\",\n                \"dataInputs\": {\n                    \"test\": {\n                        \"content\": \"{ \\\"log\\\": \\\"Received event with type $dataType\\\" }\",\n                        \"type\": \"body\",\n                        \"mimeType\": \"application/json\"\n                    }\n                },\n                \"dataOutput\": [ {\n                    \"content\": \"filler text\",\n                    \"mimeType\":\"application/json\",\n                    \"type\":\"text\"\n                } ]\n            }\n        }\n    }\n}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Try to get Alert metadata from an Alert that does not exist.",
			"descriptionFormat": null,
			"folder": "0815a7ca-5a76-79ac-e882-d4d5a5d65783",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "b3bd365b-f4f3-8936-2ed1-833ba6ae5171",
			"method": "GET",
			"name": "Alert Not Found",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\n\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Not found / exist message\"] = data.message.match(/[Nn]o.*(([Ee]xist)|([Ff]ound))/);\n}",
			"url": "https://pz-gateway.{{domain}}/alert/foo",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": null,
			"dataMode": "params",
			"description": "List EventTypes, sorting by ascending name.",
			"descriptionFormat": null,
			"folder": "b7a13432-9b2d-fe79-c6cf-02041888db50",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "b75d4547-b93c-5f5a-da8b-7dda1b15b56a",
			"method": "GET",
			"name": "Query EventType - Ascending name",
			"pathVariables": {},
			"preRequestScript": null,
			"rawModeData": null,
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar last = '';\nvar next = '';\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'name', 'skip', 'data[].')) {\n            next = data.data[i].name;\n            if (next >= last || last === '') {\n                last = next;\n                tests[\"Results are in ascending order\"] = true;\n            }\n            else {\n                tests[\"Results are in ascending order\"] = false;\n                break;\n            }\n        }\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/eventType?perPage=100&order=asc&sortBy=name"
		},
		{
			"id": "b7dea6d5-a0a1-5f5b-305c-7d1202bf4e12",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "",
					"description": "",
					"enabled": true
				}
			],
			"url": "https://pz-gateway.{{domain}}/eventType/{{eventTypeId_gp}}",
			"queryParams": [],
			"preRequestScript": "",
			"pathVariables": {},
			"pathVariableData": [],
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1503525676309,
			"name": "Geopoint - Delete EventType",
			"description": "Delete the EventType used for geo-Point data type testing.",
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"rawModeData": ""
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"collectionRequestId": "b99eda6e-0ba5-4b1f-9cc1-c131596854ad",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Part of a series of requests to verify that Workflow cannot bypass the \"softDelete\" option of a registered service.\nCreate an Event that would match the Trigger.",
			"descriptionFormat": null,
			"folder": "0815a7ca-5a76-79ac-e882-d4d5a5d65783",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "b99eda6e-0ba5-4b1f-9cc1-c131596854ad",
			"isFromCollection": true,
			"method": "POST",
			"name": "Soft - Create Event",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\n\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.eventId', 'string')) {\n    tests[\"eventId GUID created\"] = data.data.eventId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n    postman.setEnvironmentVariable('eventId_soft', data.data.eventId);\n}",
			"url": "https://pz-gateway.{{domain}}/event",
			"rawModeData": "{\n    \"data\": {\n        \"dataId\": \"testId\",\n    \"dataType\": \"raster\",\n    \"epsg\": 3,\n    \"minX\": 1,\n    \"minY\": 1.0,\n    \"maxX\": 10.0,\n    \"maxY\": 10.0,\n    \"hosted\": true,\n        \"sampleNest\": {\n            \"someParam\": \"someValue\"\n        }\n    },\n  \"eventTypeId\": \"{{eventTypeId}}\"\n}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"collectionRequestId": "bb76c1cf-b106-16a2-a6e0-3bad4f35604b",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Get an API key for testing",
			"folder": "3107dc0f-c42b-f0c8-b00b-ca317cce8468",
			"headerData": [
				{
					"description": "",
					"enabled": true,
					"key": "Authorization",
					"value": ""
				}
			],
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{cert1}}"
			},
			"id": "bb76c1cf-b106-16a2-a6e0-3bad4f35604b",
			"isFromCollection": true,
			"method": "GET",
			"name": "GetKey",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": "",
			"queryParams": [],
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'uuid')) {\n    postman.setEnvironmentVariable('API Key', data.uuid);\n} else {\n    // postman.setNextRequest('');\n}",
			"time": 1496946921028,
			"url": "https://pz-gateway.{{domain}}/v2/key",
			"version": 2,
			"rawModeData": ""
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": null,
			"dataMode": "params",
			"description": "Verify that the non-matching Event does not spawn a job.",
			"descriptionFormat": null,
			"folder": "ed4acd95-58bc-4ffb-410b-92dc9085cce0",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "be2a3390-ab90-234b-5cbb-1eada913e361",
			"method": "GET",
			"name": "Verify No Alert Created",
			"pathVariables": {},
			"preRequestScript": null,
			"rawModeData": null,
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar found = false;\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'eventId', 'skip', 'data[].') && testLevels(tests, data.data[i], 'triggerId', 'skip', 'data[].')) {\n            if (data.data[i].triggerId === postman.getEnvironmentVariable('triggerId') && data.data[i].eventId === postman.getEnvironmentVariable('eventId_notrigger')) {\n                found = true;\n            }\n        }\n    }\n    tests[\"Alert should not have been created\"] = !found;\n}",
			"url": "https://pz-gateway.{{domain}}/alert?perPage=1000&order=desc&sortBy=createdOn"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": null,
			"dataMode": "params",
			"description": "List Trigger, sorting by descending percolationId.",
			"descriptionFormat": "html",
			"folder": "b7a13432-9b2d-fe79-c6cf-02041888db50",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "bf740ce4-9c8e-8629-478d-93a9eb7312ca",
			"method": "GET",
			"name": "Query Trigger - Descending percolationId",
			"pathVariables": {},
			"preRequestScript": null,
			"rawModeData": null,
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar last = '';\nvar next = '';\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'percolationId', 'skip', 'data[].')) {\n            next = data.data[i].percolationId;\n            if (next <= last || last === '') {\n                last = next;\n                tests[\"Results are in descending order\"] = true;\n            }\n            else {\n                tests[\"Results are in descending order\"] = false;\n                break;\n            }\n        }\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/trigger?perPage=100&order=desc&sortBy=percolationId"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Part of a series of requests to verify that Workflow can disable a Trigger and that a disabled trigger will not create Alerts.\nRe-enable the Trigger.",
			"folder": "0815a7ca-5a76-79ac-e882-d4d5a5d65783",
			"headerData": [
				{
					"description": "",
					"enabled": true,
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"description": "",
					"enabled": true,
					"key": "Authorization",
					"value": ""
				}
			],
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "c1876e88-cbd1-32a5-a1c8-085d93b678d4",
			"method": "PUT",
			"name": "Re-enable Trigger",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": "",
			"queryParams": [],
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'type')) {\n    tests[\"Successful Update\"] = data.type === 'success';\n}",
			"time": 1502827643753,
			"url": "https://pz-gateway.{{domain}}/trigger/{{triggerId}}",
			"rawModeData": "{\n  \"enabled\": true\n}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": null,
			"dataMode": "params",
			"description": "Part of a series of requests to verify that Workflow cannot bypass the \"softDelete\" option of a registered service.\nFind the Alert that was spawned.",
			"folder": "0815a7ca-5a76-79ac-e882-d4d5a5d65783",
			"headerData": [
				{
					"description": "",
					"enabled": true,
					"key": "Authorization",
					"value": ""
				}
			],
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "c5063351-e0d6-94bb-60b6-c16a8a9fc209",
			"method": "GET",
			"name": "Soft - Find Alert",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "perPage",
					"value": "100"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "order",
					"value": "desc"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "sortBy",
					"value": "createdOn"
				}
			],
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar found = false;\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'eventId', 'skip', 'data[].') && testLevels(tests, data.data[i], 'triggerId', 'skip', 'data[].')) {\n            if (data.data[i].triggerId === postman.getEnvironmentVariable('triggerId') && data.data[i].eventId === postman.getEnvironmentVariable('eventId_soft')) {\n                found = true;\n                if (testLevels(tests, data.data[i], 'jobId', 'skip', 'data[].')) {\n                    tests[\"jobId GUID created\"] = data.data[i].jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n                    postman.setEnvironmentVariable('jobId_soft', data.data[i].jobId);\n                }\n            }\n        }\n    }\n    if (found) {\n        tests[\"alert found\"] = true;\n        postman.setEnvironmentVariable('retry_loop', 0);\n    }\n    else {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Soft - Find Alert');\n            wait(1000);\n        }\n        else {\n            tests[\"alert found\"] = false;\n            postman.setEnvironmentVariable('retry_loop', 0);\n        }\n    }\n}",
			"time": 1502827647428,
			"url": "https://pz-gateway.{{domain}}/alert?perPage=100&order=desc&sortBy=createdOn"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "This is in a series of requests to validate proper workflow deletion order.\nCreate an Event Type.",
			"descriptionFormat": null,
			"folder": "0815a7ca-5a76-79ac-e882-d4d5a5d65783",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "c6ade417-2895-b8da-1f51-8511f28e5f72",
			"method": "POST",
			"name": "Deletion - Create EventType",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\n\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.eventTypeId', 'string')) {\n    tests[\"eventTypeId GUID created\"] = data.data.eventTypeId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n    postman.setEnvironmentVariable('eventTypeId_deletion', data.data.eventTypeId);\n}",
			"url": "https://pz-gateway.{{domain}}/eventType",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dummy\": \"string\"\r\n  }\r\n}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Verify that a deleted Trigger cannot be found.",
			"descriptionFormat": null,
			"folder": "0815a7ca-5a76-79ac-e882-d4d5a5d65783",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "c8ff77d0-c1ca-5acc-dba2-acb7e662c4a7",
			"method": "GET",
			"name": "Deletion - Trigger Not Found",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\n\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Not found / exist message\"] = data.message.match(/[Nn]o.*(([Ee]xist)|([Ff]ound))/);\n}",
			"url": "https://pz-gateway.{{domain}}/trigger/{{triggerId_deletion}}",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "This is in a series of requests to validate proper workflow deletion order.\nDelete the EventType, now that it is no longer in use.",
			"descriptionFormat": null,
			"folder": "0815a7ca-5a76-79ac-e882-d4d5a5d65783",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "ca62860f-5e9c-676f-9732-abca22652c04",
			"method": "DELETE",
			"name": "Deletion - Not in Use",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}\n\nvar wait = eval(postman.getEnvironmentVariable('wait'));\nwait(5000);",
			"url": "https://pz-gateway.{{domain}}/eventType/{{eventTypeId_deletion}}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": null,
			"dataMode": "params",
			"description": "List Events, sorting by descending eventTypeId.",
			"descriptionFormat": null,
			"folder": "b7a13432-9b2d-fe79-c6cf-02041888db50",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "cb7529e4-ff36-9bf8-b15f-34b54378dc1c",
			"method": "GET",
			"name": "Query Event - Descending eventTypeId",
			"pathVariables": {},
			"preRequestScript": null,
			"rawModeData": null,
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar last = '';\nvar next = '';\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'eventTypeId', 'skip', 'data[].')) {\n            next = data.data[i].eventTypeId;\n            if (next <= last || last === '') {\n                last = next;\n                tests[\"Results are in descending order\"] = true;\n            }\n            else {\n                tests[\"Results are in descending order\"] = false;\n                break;\n            }\n        }\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/event?perPage=100&order=desc&sortBy=eventTypeId"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt to delete an EventType that has already been deleted.",
			"descriptionFormat": null,
			"folder": "0815a7ca-5a76-79ac-e882-d4d5a5d65783",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "ce6c6e53-5f83-611d-31c6-36523847914f",
			"method": "DELETE",
			"name": "Deletion - Delete EventType Again",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": "",
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\n\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Not found / exist message\"] = data.message.match(/[Nn]o.*(([Ee]xist)|([Ff]ound))/);\n}",
			"url": "https://pz-gateway.{{domain}}/eventType/{{eventTypeId_deletion}}"
		},
		{
			"id": "d32fb7cf-f172-6797-7e0e-a7be34e33f27",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "",
					"description": "",
					"enabled": true
				}
			],
			"url": "https://pz-gateway.{{domain}}/trigger/{{triggerId_nested}}",
			"queryParams": [],
			"preRequestScript": "",
			"pathVariables": {},
			"pathVariableData": [],
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1503525640334,
			"name": "Nested - Delete Trigger",
			"description": "Delete the Trigger that was used to validate that a Trigger can match values in a nested structure.",
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"rawModeData": ""
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Part of a series of requests to verify that Workflow cannot bypass the \"softDelete\" option of a registered service.\nVerify that the job that was spawned from the Event->Trigger->Alert fails because the service was softDeleted.",
			"folder": "0815a7ca-5a76-79ac-e882-d4d5a5d65783",
			"headerData": [
				{
					"description": "",
					"enabled": true,
					"key": "Authorization",
					"value": ""
				}
			],
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "d3b9f618-821d-ad92-d81b-adb619184f06",
			"method": "GET",
			"name": "Soft - Validate Failed Job Status",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": "",
			"queryParams": [],
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\n\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'data.status')) {\n    if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Soft - Validate Failed Job Status');\n            wait(1000);\n        }\n        else {\n            tests[\"Job finished in time\"] = false;\n        }\n    }\n    else if (data.data.status === 'Failed' || data.data.status === 'Error') {\n        postman.setEnvironmentVariable('retry_loop',0);\n        if (testLevels(tests, data, 'data.result.message', 'string')) {\n            tests[\"Service offline massage\"] = data.data.result.message.match(/offline/i) && data.data.result.message.match(postman.getEnvironmentVariable('serviceId'));\n        }\n    }\n    else {\n        tests[\"status should not be \" + data.data.status] = false;\n        postman.setEnvironmentVariable('retry_loop',0);\n    }\n}",
			"time": 1502827646902,
			"url": "https://pz-gateway.{{domain}}/job/{{jobId_soft}}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Delete the Event that was used to validate that a Trigger will not fire an Alert for a non-matching event.",
			"descriptionFormat": null,
			"folder": "0e29f236-2061-8522-5123-eab4334b560d",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "d5646eb8-19b5-9a13-8b15-23a6a8073611",
			"method": "DELETE",
			"name": "Delete Non-triggering Event",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"url": "https://pz-gateway.{{domain}}/event/{{eventId_notrigger}}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": null,
			"dataMode": "params",
			"description": "Check that the second page of of the Event list can be accessed.",
			"folder": "b7a13432-9b2d-fe79-c6cf-02041888db50",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "d84231e1-9a8e-1546-d865-3978de162e92",
			"method": "GET",
			"name": "2nd page Query - Event",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'pagination.count')) {\n    var numberDisplayed = Math.max(Math.min(data.pagination.count - 3, 3), 0);\n    if (testLevels(tests, data, 'data') && Array.isArray(data.data)) {\n        tests[\"Correct number should be preent on second page\"] = numberDisplayed == data.data.length;\n    }\n    tests[\"Reporting page 1\"] = data.pagination.page === 1;\n}\nif (testLevels(tests, data, 'pagination.page')) {\n    tests[\"Reporting page 1\"] = data.pagination.page === 1;\n}\nif (testLevels(tests, data, 'pagination.perPage')) {\n    tests[\"Reporting 3 per page\"] = data.pagination.perPage === 3;\n}\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Correct Type\"] = data.type.match(/[Ee]vent/) && data.type.match(/[Ll]ist/) && !data.type.match(/[Tt]ype/);\n}",
			"time": 1489500777969,
			"url": "https://pz-gateway.{{domain}}/event?perPage=3&page=1"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": null,
			"dataMode": "params",
			"description": "Part of a series of requests to verify that Workflow can disable a Trigger and that a disabled trigger will not create Alerts.\nVerify that no Alert was created.",
			"folder": "0815a7ca-5a76-79ac-e882-d4d5a5d65783",
			"headerData": [
				{
					"description": "",
					"enabled": true,
					"key": "Authorization",
					"value": ""
				}
			],
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "d898682c-950c-9471-95ed-df6fc991c022",
			"method": "GET",
			"name": "Disable Trigger - Find Alert",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "perPage",
					"value": "100"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "order",
					"value": "desc"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "sortBy",
					"value": "createdOn"
				}
			],
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar found = false;\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'eventId', 'skip', 'data[].') && testLevels(tests, data.data[i], 'triggerId', 'skip', 'data[].')) {\n            if (data.data[i].triggerId === postman.getEnvironmentVariable('triggerId') && data.data[i].eventId === postman.getEnvironmentVariable('eventId_disabled')) {\n                found = true;\n            }\n        }\n    }\n}\n\ntests[\"Event not generated from disabled trigger\"] = !found;",
			"time": 1502827644330,
			"url": "https://pz-gateway.{{domain}}/alert?perPage=100&order=desc&sortBy=createdOn"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": null,
			"dataMode": "params",
			"description": "Verify that data was created from the job spawned by Workflow.",
			"descriptionFormat": null,
			"folder": "ed4acd95-58bc-4ffb-410b-92dc9085cce0",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "d8c7db1e-1207-a3fb-0442-a72f319b2bea",
			"method": "GET",
			"name": "Verify Data",
			"pathVariables": {},
			"preRequestScript": null,
			"rawModeData": null,
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'data.dataType.content', 'string')) {\n    tests[\"Hello service was called.\"] = data.data.dataType.content.match(/[Hh](ello|i)/);\n}",
			"url": "https://pz-gateway.{{domain}}/data/{{dataId}}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": null,
			"dataMode": "params",
			"description": "List Trigger, sorting by ascending eventTypeId.",
			"descriptionFormat": null,
			"folder": "b7a13432-9b2d-fe79-c6cf-02041888db50",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "dbbf49a3-bd1c-fa72-7da5-128334a396b3",
			"method": "GET",
			"name": "Query Trigger - Ascending eventTypeId",
			"pathVariables": {},
			"preRequestScript": null,
			"rawModeData": null,
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar last = '';\nvar next = '';\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'eventTypeId', 'skip', 'data[].')) {\n            next = data.data[i].eventTypeId;\n            if (next >= last || last === '') {\n                last = next;\n                tests[\"Results are in ascending order\"] = true;\n            }\n            else {\n                tests[\"Results are in ascending order\"] = false;\n                break;\n            }\n        }\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/trigger?perPage=100&order=asc&sortBy=eventTypeId"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check the details of the EventType metadata.",
			"folder": "b7a13432-9b2d-fe79-c6cf-02041888db50",
			"headerData": [
				{
					"description": "",
					"enabled": true,
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"description": "",
					"enabled": true,
					"key": "Authorization",
					"value": ""
				}
			],
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "dc1b1e97-783e-bea9-e180-e3862218669e",
			"method": "GET",
			"name": "Get EventType Details",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\"< < < < < < < < < < < < LOW > > > > > > > > > > > \");\nconsole.log(\"  These tests represent less-important features.  \");\nconsole.log(\"More attention is given to options and edge cases.\");\nconsole.log(\"You may push if these tests fail, but be careful. \");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"queryParams": [],
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'data.eventTypeId')) {\n    tests[\"Correct eventTypeId returned\"] = data.data.eventTypeId === postman.getEnvironmentVariable('eventTypeId');\n}\nif (testLevels(tests, data, 'data.createdBy')) {\n    tests[\"Correct createdBy\"] = data.data.createdBy === postman.getEnvironmentVariable('username');\n}\nif (testLevels(tests, data, 'data.name')) {\n    postman.setEnvironmentVariable('eventType Name', data.data.name);\n}\nif (testLevels(tests, data, 'data.createdOn', 'string')) {\n    tests[\"Timestamp created\"] = data.data.createdOn.match(/\\d{4}-\\d{2}-\\d{2}/) && data.data.createdOn.match(/\\d{2}:\\d{2}:\\d{2}/);\n}\nif (testLevels(tests, data, 'data.mapping.sampleNest.someParam')) {\n    tests[\"Nested Structure maintained\"] = data.data.mapping.sampleNest.someParam === 'string';\n}\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Correct Type\"] = data.type.match(/[Ee]vent.*[Tt]ype/);\n}",
			"time": 1502827643010,
			"url": "https://pz-gateway.{{domain}}/eventType/{{eventTypeId}}",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"id": "ddf295cb-c206-80d1-dda7-d28fa88e2bc7",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "",
					"description": "",
					"enabled": true
				}
			],
			"url": "https://pz-gateway.{{domain}}/trigger",
			"queryParams": [],
			"preRequestScript": "",
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\n\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.triggerId', 'string')) {\n    tests[\"triggerId GUID created\"] = data.data.triggerId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n    postman.setEnvironmentVariable('triggerId_gp', data.data.triggerId);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1503526251722,
			"name": "Geopoint - Create Trigger",
			"description": "Verify that the \"geo_point\" data type can be used in workflow.\nCreate the trigger based on the geo_point field.",
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"responses": [],
			"rawModeData": "{\n    \"name\": \"CI Testing Trigger\",\n    \"enabled\": true,\n    \"eventTypeId\": \"{{eventTypeId_gp}}\",\n    \"condition\": {\n        \"query\": {\n            \"bool\": {\n                \"must\": [\n                    {\n                        \"match\": {\n                            \"data.testGP\": \"foo\"\n                        }\n                    }\n                ]\n            }\n        }\n    },\n    \"job\": {\n        \"jobType\": {\n            \"type\": \"execute-service\",\n            \"data\": {\n                \"serviceId\": \"{{serviceId}}\",\n                \"dataInputs\": {\n                    \"test\": {\n                        \"content\": \"{ \\\"log\\\": \\\"Received event with type $dataType\\\" }\",\n                        \"type\": \"body\",\n                        \"mimeType\": \"application/json\"\n                    }\n                },\n                \"dataOutput\": [ {\n                    \"content\": \"filler text\",\n                    \"mimeType\":\"application/json\",\n                    \"type\":\"text\"\n                } ]\n            }\n        }\n    }\n}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Verify that a deleted EventType cannot be found.",
			"descriptionFormat": null,
			"folder": "0815a7ca-5a76-79ac-e882-d4d5a5d65783",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "dea29b91-bb84-1ba7-4ce7-efea9fe45b93",
			"method": "GET",
			"name": "Deletion - EventType Not Found",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\n\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Not found / exist message\"] = data.message.match(/[Nn]o.*(([Ee]xist)|([Ff]ound))/);\n}",
			"url": "https://pz-gateway.{{domain}}/eventType/{{eventTypeId_deletion}}",
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt to Create a Trigger with a non-existant serviceId.",
			"folder": "0815a7ca-5a76-79ac-e882-d4d5a5d65783",
			"headerData": [
				{
					"description": "",
					"enabled": true,
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"description": "",
					"enabled": true,
					"key": "Authorization",
					"value": ""
				}
			],
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "e49ec19d-a202-6262-1c5f-6785f829092e",
			"method": "POST",
			"name": "Create Trigger w/ Bad ServiceId",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": "",
			"queryParams": [],
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Not found / exist message\"] = data.message.match(/[Nn]o.*(([Ee]xist)|([Ff]ound))/);\n    tests[\"Service is the problem\"] = data.message.match(/[Ss]ervice/);\n}",
			"time": 1502827646409,
			"url": "https://pz-gateway.{{domain}}/trigger",
			"rawModeData": "{\n    \"name\": \"CI Testing Trigger\",\n    \"enabled\": true,\n    \"eventTypeId\": \"{{eventTypeId}}\",\n    \"condition\": {\n        \"query\": {\n            \"query\": {\n                \"bool\": {\n                    \"must\": [\n                        {\n                            \"match\": {\n                                \"data.dataType\": \"raster\"\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    },\n    \"job\": {\n        \"jobType\": {\n            \"type\": \"execute-service\",\n            \"data\": {\n                \"serviceId\": \"foo\",\n                \"dataInputs\": {\n                    \"test\": {\n                        \"content\": \"{ \\\"log\\\": \\\"Received event with type $dataType\\\" }\",\n                        \"type\": \"body\",\n                        \"mimeType\": \"application/json\"\n                    }\n                },\n                \"dataOutput\": [ {\n                    \"content\": \"filler text\",\n                    \"mimeType\":\"application/json\",\n                    \"type\":\"text\"\n                } ]\n            }\n        }\n    }\n}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Try a \"match_all\" Elastic Search query to find events.",
			"descriptionFormat": "html",
			"folder": "0815a7ca-5a76-79ac-e882-d4d5a5d65783",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "e5515a1c-0d96-af6d-271e-d22cdf00a3b1",
			"method": "POST",
			"name": "Event Complex Query",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar found = false;\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'eventId', 'skip', 'data[].')) {\n            if (data.data[i].eventId === postman.getEnvironmentVariable('eventId')) {\n                found = true;\n            }\n        }\n    }\n    tests[\"Event found\"] = found;\n}",
			"url": "https://pz-gateway.{{domain}}/event/query",
			"rawModeData": "{\n    \"query\": {\n        \"match_all\": {}\n    }\n}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Part of a series of requests to verify that Workflow can disable a Trigger and that a disabled trigger will not create Alerts.\nDisable the Trigger.",
			"folder": "0815a7ca-5a76-79ac-e882-d4d5a5d65783",
			"headerData": [
				{
					"description": "",
					"enabled": true,
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"description": "",
					"enabled": true,
					"key": "Authorization",
					"value": ""
				}
			],
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "e6883d62-8670-c9b7-312c-f230f22ff663",
			"method": "PUT",
			"name": "Disable Trigger",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": "",
			"queryParams": [],
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'type')) {\n    tests[\"Successful Update\"] = data.type === 'success';\n}",
			"time": 1502827645908,
			"url": "https://pz-gateway.{{domain}}/trigger/{{triggerId}}",
			"rawModeData": "{\n  \"enabled\": false\n}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt to create an EventType without the \"name\" parameter.",
			"descriptionFormat": null,
			"folder": "b7a13432-9b2d-fe79-c6cf-02041888db50",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "f0372133-bd20-ded4-91e0-41473ca4e051",
			"method": "POST",
			"name": "Create EventType - Missing 'name'",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Failed Validation message\"] = data.message.match(/[Vv]alidation/);\n}\n\nif (testLevels(tests, data, 'errors', 'array')) {\n    if (testLevels(tests, data.errors[0], 'code', 'string')) {\n        tests[\"Not Null Message\"] = data.errors[0].code.match(/[Nn]ull/);\n    }\n    if (testLevels(tests, data.errors[0], 'field')) {\n        tests[\"The problem is with 'name'\"] = data.errors[0].field === 'name';\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/eventType",
			"rawModeData": "{\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Create an Event with a nested structure (data.sampleNest.someParam) to match a just-created Trigger.",
			"descriptionFormat": null,
			"folder": "ed4acd95-58bc-4ffb-410b-92dc9085cce0",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "f8a82a95-77a7-7991-61de-f755174d4a3b",
			"method": "POST",
			"name": "Nested - Create Event",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\n\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'data.eventId', 'string')) {\n    tests[\"eventId GUID created\"] = data.data.eventId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n    postman.setEnvironmentVariable('eventId_nested', data.data.eventId);\n}",
			"url": "https://pz-gateway.{{domain}}/event",
			"rawModeData": "{\n    \"data\": {\n        \"dataId\": \"testId\",\n    \"dataType\": \"dummy\",\n    \"epsg\": 3,\n    \"minX\": 1,\n    \"minY\": 1.0,\n    \"maxX\": 10.0,\n    \"maxY\": 10.0,\n    \"hosted\": true,\n        \"sampleNest\": {\n            \"someParam\": \"SillyString\"\n        }\n    },\n  \"eventTypeId\": \"{{eventTypeId}}\"\n}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Try a \"match_all\" Elastic Search query to find eventTypes.",
			"descriptionFormat": "html",
			"folder": "0815a7ca-5a76-79ac-e882-d4d5a5d65783",
			"headers": "Authorization: \nContent-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "f9094871-5d2b-efd8-26a4-29cc23e5784c",
			"method": "POST",
			"name": "EventType Complex Query",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar found = false;\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'eventTypeId', 'skip', 'data[].')) {\n            if (data.data[i].eventTypeId === postman.getEnvironmentVariable('eventTypeId')) {\n                found = true;\n            }\n        }\n    }\n    tests[\"EventType found\"] = found;\n}",
			"url": "https://pz-gateway.{{domain}}/eventType/query",
			"rawModeData": "{\n    \"query\": {\n        \"match_all\": {}\n    }\n}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that a trigger cannot be deleted through the /event endpoint.",
			"descriptionFormat": "html",
			"folder": "b7a13432-9b2d-fe79-c6cf-02041888db50",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "fa777617-04f6-bbc2-af3c-17a3b262e22b",
			"method": "DELETE",
			"name": "Delete Trigger through /event",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": "",
			"tests": "tests[\"Status code is 404 (Bug #11058)\"] = responseCode.code === 404;\n\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Not found / exist message\"] = data.message.match(/[Nn]o.*(([Ee]xist)|([Ff]ound))/);\n}",
			"url": "https://pz-gateway.{{domain}}/event/{{triggerId}}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Delete the EventType used throughout this collection.",
			"descriptionFormat": null,
			"folder": "0e29f236-2061-8522-5123-eab4334b560d",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "fabe139c-0322-125f-493f-a40dd60464f2",
			"method": "DELETE",
			"name": "Delete EventType",
			"pathVariables": {},
			"preRequestScript": "",
			"rawModeData": "",
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif (testLevels(tests, data, 'type', 'string')) {\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}",
			"url": "https://pz-gateway.{{domain}}/eventType/{{eventTypeId}}"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": null,
			"dataMode": "params",
			"description": "List Alerts, sorting by descending jobId.",
			"descriptionFormat": null,
			"folder": "b7a13432-9b2d-fe79-c6cf-02041888db50",
			"headers": "Authorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "fb027c23-25f5-637f-5465-77c80dca672d",
			"method": "GET",
			"name": "Query Alert - Descending jobId",
			"pathVariables": {},
			"preRequestScript": null,
			"rawModeData": null,
			"tests": "var data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar last = '';\nvar next = '';\n\nif (testLevels(tests, data, 'data', 'array')) {\n    for (i = 0; i < data.data.length; i++) {\n        if (testLevels(tests, data.data[i], 'jobId', 'skip', 'data[].')) {\n            next = data.data[i].jobId;\n            if (next <= last || last === '') {\n                last = next;\n                tests[\"Results are in descending order\"] = true;\n            }\n            else {\n                tests[\"Results are in descending order\"] = false;\n                break;\n            }\n        }\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/alert?perPage=100&order=desc&sortBy=jobId"
		},
		{
			"collectionId": "30ac1784-57ab-b235-ae51-e2515cf7826e",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt to create an Event without a \"data\" parameter.",
			"descriptionFormat": null,
			"folder": "b7a13432-9b2d-fe79-c6cf-02041888db50",
			"headers": "Content-Type: application/json\nAuthorization: \n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{API Key}}"
			},
			"id": "fcbe0a37-8628-540e-3d0e-11cb6c358478",
			"method": "POST",
			"name": "Create Event - No Data",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'message', 'string')) {\n    tests[\"Failed Validation message\"] = data.message.match(/[Vv]alidation/);\n}\n\nif (testLevels(tests, data, 'errors', 'array')) {\n    if (testLevels(tests, data.errors[0], 'code', 'string')) {\n        tests[\"Not Null Message\"] = data.errors[0].code.match(/[Nn]ull/);\n    }\n    if (testLevels(tests, data.errors[0], 'field')) {\n        tests[\"The problem is with 'data'\"] = data.errors[0].field === 'data';\n    }\n}",
			"url": "https://pz-gateway.{{domain}}/event",
			"rawModeData": "{\n    \"eventTypeId\": \"{{eventTypeId}}\"\n}"
		}
	]
}