{
	"id": "64480ac4-6fe3-1699-1172-958f16b68420",
	"name": "BF_API",
	"description": "",
	"order": [
		"26fa98e1-6a19-6717-65dd-d0147198a9c7"
	],
	"folders": [
		{
			"id": "b66fc78f-5cc8-5628-74ea-eddc8f96172d",
			"name": "01_Misc",
			"description": "",
			"order": [
				"22b94ac5-0564-3de6-c2ca-e3eedcf0e755",
				"ac5ad91e-2aa7-0329-354d-9d659379c540",
				"b4bfa388-3875-0151-0cc4-e9bf4eaf2811",
				"e2685fc8-77e5-babe-ff1b-76289b7c6a1f",
				"71606d3e-2707-68fc-b845-08a18455f557",
				"ae5528f7-50a8-8867-9cae-e765d35c4dbe",
				"fcce742d-4a8b-4e45-c989-cd81204310df"
			],
			"owner": "699425",
			"collectionId": "743e1b12-9996-4907-e6c6-2bf58e33412c"
		},
		{
			"id": "286e2b3c-a2e5-2416-ee39-c19c2dacbe65",
			"name": "02_Job",
			"description": "",
			"order": [
				"e3e50bd8-eba1-4f3f-4c49-4d2fdc2f30af",
				"714dfaef-ec7b-c196-9578-9e005ce4a27a",
				"71728f0d-535f-87bb-d9bb-b549fb0f3f21",
				"1f4360e3-bea4-da3c-8133-c11503bff374",
				"73f74336-ac16-8c05-c684-9c13dfeb8187",
				"72d2d59f-6b6c-b82f-fc90-2cc256b2a3dd",
				"f376964a-0e39-2ce3-56e1-e0206c928201",
				"c6a18fb4-a801-78d0-d96e-167dab2526e2",
				"6dc15921-1892-bbfc-36f6-8718532298e8",
				"f5164622-b1f1-d9ac-5486-5f848623e77a",
				"ae050b93-1cae-7503-a19b-8b762b61f787",
				"7d6640a9-0ad4-b759-28df-93bb365d9d7d",
				"affc727f-b104-2d34-3488-5a2dd893c1e8",
				"e1ddcdf2-89f9-6443-ad36-b6779d7f7afb",
				"dee721bd-788d-248f-7ac6-abb2c662e4fb",
				"3aa682a3-50d6-e2fc-2149-6e353af1ff46",
				"ff2d0bec-b972-4888-0b81-498c8c01f286",
				"ae040b12-5103-2d42-3e43-d8bd1ad4ae28",
				"a1341f16-7c1a-9447-9faa-3631dd5e4440",
				"5ddf7b8c-f966-1fce-7efd-a04e5cc74344",
				"99a6520e-8253-73c6-a7f8-5c4e1a93815c",
				"b7b8d760-f2c3-fb6d-0266-4dcd85ded83d",
				"3bd1d009-5179-f152-046a-f422bac3a626",
				"4d65e7e3-b5a2-96e7-aaae-d08b848490bd"
			],
			"owner": "699425",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420"
		},
		{
			"id": "c965dd98-7279-556b-dd09-88f2e8a8c503",
			"name": "03_ProductLine",
			"description": "",
			"order": [
				"8ed84db9-bc48-ecc5-3d04-c63aaae676ae",
				"2655be01-50ce-4e6a-1d8f-98c53fcfa980",
				"24826489-7270-c44b-e040-7ba98333b29c",
				"7523d89d-2335-6ad0-78c2-036125c4e4a6",
				"d5e94aca-2921-3cbf-5834-756ff1d2fde9",
				"c35e15aa-940b-344d-4572-bbdd529f25e1",
				"1e55789e-b4cc-6168-11a0-12f5d93460d1",
				"edfb2ae4-abeb-abfb-cb88-f732f4742929",
				"5a54ae81-ddd3-667f-bb14-635a12063865",
				"dd5a1fa1-a6e1-c6e6-62ba-b54a39ed8c94",
				"dcc1dbd9-28f8-c477-a752-00286aa9e7ba",
				"b457c662-63d8-1b69-760d-46d257f58e8a",
				"3ba7c0ab-7d7a-aa84-ec09-ed9237b0884b",
				"97fea031-32b8-6f0e-d91f-f38f572366b4",
				"4bcc7df5-34b7-cf0e-da51-68d0b7a4c935",
				"5c6a0965-afd4-395c-d4fd-3fd3a6c954ea",
				"240da778-45bc-dbfd-9286-a3be3c936bcd",
				"e6f3a706-ef10-fead-8989-c2d131827120",
				"39b0b157-b5c6-f9d9-e4e6-7b88d4492a8d",
				"18139b2b-b828-320e-2fbe-e6223c44368a",
				"43ae3dc7-46fd-6cfd-2b61-def29583c991",
				"b9045fd2-0c16-ccdd-b8b0-932da1b7754f",
				"4a3b5a9e-0db6-44f6-d29d-4483a8ccb78b",
				"2bfad1d3-bcdd-a528-2499-37baa2e6bb89"
			],
			"owner": "699425",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420"
		},
		{
			"id": "b51fc361-2427-730a-8a95-f112f081b106",
			"name": "04_RequireHTTPS",
			"description": "",
			"order": [
				"dee46bad-1c97-5737-2622-30c10319fbeb",
				"753a697b-03b9-38fb-4f71-d7e9c85e6cd9",
				"81913220-6678-7bb3-802e-bbb0fd844166",
				"f12b0128-7958-d252-c43e-3fef49e24903",
				"668083e7-bd36-eca5-f980-36366e292e4f",
				"95b19647-35ef-e9b6-7663-3363fde45aea"
			],
			"owner": "699425"
		},
		{
			"id": "9425810f-524f-2555-1ae8-96b2a9b260be",
			"name": "05_Integrated",
			"description": "",
			"order": [
				"b2613ee7-65e6-02c7-d492-a682a488867b",
				"a15103e1-fded-ef46-7999-81835713143e"
			],
			"owner": "699425"
		}
	],
	"timestamp": 1479929428884,
	"owner": "699425",
	"public": false,
	"requests": [
		{
			"id": "18139b2b-b828-320e-2fbe-e6223c44368a",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/productline",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Must be timestamp\"] = responseBody.match(/time.?stamp/i);\ntests[\"'start_on' mentioned in message\"] = responseBody.match(/start_on/i);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481301285953,
			"name": "Create PL - \"start_on\" is null",
			"description": "Attempt to create a PL with a null \"start_on\" date.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"category\": \"test-category\",\n  \"max_cloud_cover\": 5,\n  \"min_x\": 79,\n  \"min_y\": 5,\n  \"max_x\": 82,\n  \"max_y\": 10,\n  \"name\": \"{{PL Name}}\",\n  \"spatial_filter_id\": null,\n  \"start_on\": null,\n  \"stop_on\": \"2017-01-01T00:00:00Z\"\n}"
		},
		{
			"id": "1e55789e-b4cc-6168-11a0-12f5d93460d1",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/productline",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Missing message\"] = responseBody.match(/miss/i);\ntests[\"'category' mentioned in message\"] = responseBody.match(/category/);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481293315316,
			"name": "Create PL - Missing category",
			"description": "Attempt to create a PL without specifying a category.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"max_cloud_cover\": 5,\n  \"min_x\": 79,\n  \"min_y\": 5,\n  \"max_x\": 82,\n  \"max_y\": 10,\n  \"name\": \"{{PL Name}}\",\n  \"spatial_filter_id\": null,\n  \"start_on\": \"2016-01-01T00:00:00Z\",\n  \"stop_on\": \"2017-01-01T00:00:00Z\"\n}"
		},
		{
			"id": "1f4360e3-bea4-da3c-8133-c11503bff374",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job/by_scene/{{scene_id}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar found = false;\nvar match = true;\n\nif (testLevels(tests, data, 'jobs.features', 'array')) {\n    for (i = 0; i < data.jobs.features.length; i++) {\n        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {\n            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId');\n        }\n        if (testLevels(tests, data.jobs.features[i], 'properties.scene_id', 'skip', 'jobs.features[].')) {\n            match = match && data.jobs.features[i].properties.scene_id === postman.getEnvironmentVariable('scene_id');\n        }\n    }\n    postman.setEnvironmentVariable('active jobs - scene', data.jobs.features.length);\n}\n\ntests[\"Job found in list of jobs\"] = found;\ntests[\"All jobs had specified scene_id\"] = match;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481307853871,
			"name": "List Jobs by Scene",
			"description": "List all jobs filtered by scene ID, making sure the just created job is present.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "22b94ac5-0564-3de6-c2ca-e3eedcf0e755",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nif ((postman.getEnvironmentVariable('environment') === 'prod') || (postman.getEnvironmentVariable('environment') === 'stage')) {\n    postman.setEnvironmentVariable('other_key', postman.getEnvironmentVariable('API Key'));\n} else {\n    postman.setEnvironmentVariable('other_key', postman.getEnvironmentVariable('Stage API Key'));\n}\n\npostman.setEnvironmentVariable('retry_loop', 0);\npostman.setEnvironmentVariable('max_retries', 9);\npostman.setEnvironmentVariable('scene_id', 'landsat:LC81610532016279LGN00');\npostman.setEnvironmentVariable('PL Name', 'IntegrationTest_SriLanka');\npostman.setEnvironmentVariable('bf_key', '898d8c16116749cea508073994c9a422');\n\ntests[\"globals available\"] = postman.getGlobalVariable('bf_password')",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1484770439130,
			"name": "Health Check",
			"description": "Check that the app responds at all.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "240da778-45bc-dbfd-9286-a3be3c936bcd",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/productline",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Must be number\"] = responseBody.match(/number/i);\ntests[\"'max_cloud_cover' mentioned in message\"] = responseBody.match(/max_cloud_cover/i);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481300602875,
			"name": "Create PL - CC is a string",
			"description": "Attempt to create a PL with a string CC.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"category\": \"test-category\",\n  \"max_cloud_cover\": \"foo\",\n  \"min_x\": 79,\n  \"min_y\": 5,\n  \"max_x\": 82,\n  \"max_y\": 10,\n  \"name\": \"{{PL Name}}\",\n  \"spatial_filter_id\": null,\n  \"start_on\": \"2016-01-01T00:00:00Z\",\n  \"stop_on\": \"2017-01-01T00:00:00Z\"\n}"
		},
		{
			"id": "24826489-7270-c44b-e040-7ba98333b29c",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/productline/{{productLineId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Correct Product Line deleted\"] = responseBody.match(postman.getEnvironmentVariable('productLineId'));",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1482268392288,
			"name": "Delete Product Line",
			"description": "Delete the Product Line created in this test.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "2655be01-50ce-4e6a-1d8f-98c53fcfa980",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/productline",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar found = false;\n\nif (testLevels(tests, data, 'productlines.features', 'array')) {\n    for (i = 0; i < data.productlines.features.length; i++) {\n        if (testLevels(tests, data.productlines.features[i], 'id', 'skip', 'productlines.features[].')) {\n            found = found || data.productlines.features[i].id === postman.getEnvironmentVariable('productLineId');\n        }\n    }\n    postman.setEnvironmentVariable('active PLs', data.productlines.features.length);\n}\n\ntests[\"Product Line found in list\"] = found;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481981819449,
			"name": "List Product Lines",
			"description": "List all Product Lines, and make sure that the one created in this test is present.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "26fa98e1-6a19-6717-65dd-d0147198a9c7",
			"headers": "Content-Type: application/json\nAccess-Control-Request-Headers: authorization\nAccess-Control-Request-Method: GET\n",
			"url": "https://bf-swagger.{{domain}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "OPTIONS",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nif ((postman.getEnvironmentVariable('environment') === 'prod') || (postman.getEnvironmentVariable('environment') === 'stage')) {\n    postman.setEnvironmentVariable('other_key', postman.getEnvironmentVariable('API Key'));\n} else {\n    postman.setEnvironmentVariable('other_key', postman.getEnvironmentVariable('Stage API Key'));\n}\n\npostman.setEnvironmentVariable('retry_loop', 0);\npostman.setEnvironmentVariable('max_retries', 9);\npostman.setEnvironmentVariable('scene_id', 'landsat:LC81610532016279LGN00');\npostman.setEnvironmentVariable('PL Name', 'IntegrationTest_SriLanka');\n\ntests[\"globals available\"] = postman.getGlobalVariable('bf_password')",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1484602377065,
			"name": "CORS Check - Beachfront",
			"description": "Check that the app responds at all.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "2bfad1d3-bcdd-a528-2499-37baa2e6bb89",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/productline",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"'name' mentioned in message\"] = responseBody.match(/name/i);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481982484778,
			"name": "Create PL - name too long",
			"description": "Attempt to create a PL with a \"name\" that is too long.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"category\": \"test-category\",\n  \"max_cloud_cover\": 5,\n  \"min_x\": 79,\n  \"min_y\": 5,\n  \"max_x\": 82,\n  \"max_y\": 10,\n  \"name\": \"1abcdefghijklmnopqrstuvwxyz2abcdefghijklmnopqrstuvwxyz3abcdefghijklmnopqrstuvwxyz4abcdefghijklmnopqrstuvwxyz\",\n  \"spatial_filter_id\": null,\n  \"start_on\": \"2016-01-01T00:00:00Z\",\n  \"stop_on\": \"2017-01-01T00:00:00Z\"\n}"
		},
		{
			"id": "39b0b157-b5c6-f9d9-e4e6-7b88d4492a8d",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/productline",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Must be timestamp\"] = responseBody.match(/time.?stamp/i);\ntests[\"'start_on' mentioned in message\"] = responseBody.match(/start_on/i);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481300971339,
			"name": "Create PL - Invalid \"start_on\"",
			"description": "Attempt to create a PL with an invalid \"start_on\" date.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"category\": \"test-category\",\n  \"max_cloud_cover\": 5,\n  \"min_x\": 79,\n  \"min_y\": 5,\n  \"max_x\": 82,\n  \"max_y\": 10,\n  \"name\": \"{{PL Name}}\",\n  \"spatial_filter_id\": null,\n  \"start_on\": \"garbage\",\n  \"stop_on\": \"2017-01-01T00:00:00Z\"\n}"
		},
		{
			"id": "3aa682a3-50d6-e2fc-2149-6e353af1ff46",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job/{{jobId_other}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Correct job forgotten\"] = responseBody.match(postman.getEnvironmentVariable('jobId_other'));",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481201441129,
			"name": "Forget Other User's Job",
			"description": "Remove the other user's job from the primary user's list of visible jobs.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "3ba7c0ab-7d7a-aa84-ec09-ed9237b0884b",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/productline",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Missing message\"] = responseBody.match(/miss/i);\ntests[\"'spatial_filter_id' mentioned in message\"] = responseBody.match(/spatial_filter_id/);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481298995319,
			"name": "Create PL - Missing spatial_filter_id",
			"description": "Attempt to create a PL without specifying a spatial_filter_id.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"category\": \"test-category\",\n  \"max_cloud_cover\": 5,\n  \"min_x\": 79,\n  \"min_y\": 5,\n  \"max_x\": 82,\n  \"max_y\": 10,\n  \"name\": \"{{PL Name}}\",\n  \"start_on\": \"2016-01-01T00:00:00Z\",\n  \"stop_on\": \"2017-01-01T00:00:00Z\"\n}"
		},
		{
			"id": "3bd1d009-5179-f152-046a-f422bac3a626",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400 (Bug #12095)\"] = responseCode.code === 400;\ntests[\"Not exist message.\"] = responseBody.match(/no.*exist/i);\ntests[\"'algorithm' & 'foo' mentioned in message\"] = responseBody.match(/algorithm/i) && responseBody.match(/foo/);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481299662445,
			"name": "Create Job - Invalid algorithm_id",
			"description": "Attempt a job using an invalid algorithm_id.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": "{\n  \"algorithm_id\": \"foo\",\n  \"scene_id\": \"{{scene_id}}\",\n  \"name\": \"postman job\"\n}"
		},
		{
			"id": "43ae3dc7-46fd-6cfd-2b61-def29583c991",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/productline",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'productline.id')) {\n    postman.setEnvironmentVariable('productLineId_unending', data.productline.id);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481981862399,
			"name": "Create Product Line  - Unending",
			"description": "Create a Product Line for Sri Lanka images  with < 5% cloud cover.\nVerify that a product line can be created with a null \"stop_on\"",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"category\": \"test-category\",\n  \"max_cloud_cover\": 5,\n  \"min_x\": 79,\n  \"min_y\": 5,\n  \"max_x\": 82,\n  \"max_y\": 10,\n  \"name\": \"{{PL Name}}\",\n  \"spatial_filter_id\": null,\n  \"start_on\": \"2016-01-01T00:00:00Z\",\n  \"stop_on\": null\n}"
		},
		{
			"id": "4a3b5a9e-0db6-44f6-d29d-4483a8ccb78b",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.dev.geointservices.io/v0/job/by_productline/{{productLineId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Placeholder\"] = false;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481316991110,
			"name": "List Jobs By Product Line",
			"description": "",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "4bcc7df5-34b7-cf0e-da51-68d0b7a4c935",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/productline",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Number must be in a range\"] = responseBody.match(/between/i);\ntests[\"'max_cloud_cover' mentioned in message\"] = responseBody.match(/max_cloud_cover/i);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481300614785,
			"name": "Create PL - CC too big",
			"description": "Attempt to create a PL with a CC of 1000%.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"category\": \"test-category\",\n  \"max_cloud_cover\": 1000,\n  \"min_x\": 79,\n  \"min_y\": 5,\n  \"max_x\": 82,\n  \"max_y\": 10,\n  \"name\": \"{{PL Name}}\",\n  \"spatial_filter_id\": null,\n  \"start_on\": \"2016-01-01T00:00:00Z\",\n  \"stop_on\": \"2017-01-01T00:00:00Z\"\n}"
		},
		{
			"id": "4d65e7e3-b5a2-96e7-aaae-d08b848490bd",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400 (Bug #12096)\"] = responseCode.code === 400;\ntests[\"Not exist message.\"] = responseBody.match(/no.*exist/i);\ntests[\"'scene' & 'foo' mentioned in message\"] = responseBody.match(/scene/i) && responseBody.match(/foo/);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481299672557,
			"name": "Create Job - Invalid scene_id",
			"description": "Attempt a job using an invalid scene_id.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"scene_id\": \"landsat:foo\",\n  \"name\": \"postman job\"\n}"
		},
		{
			"id": "5a54ae81-ddd3-667f-bb14-635a12063865",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/productline",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Missing message\"] = responseBody.match(/miss/i);\ntests[\"'max_x' mentioned in message\"] = responseBody.match(/max_x/);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481293888257,
			"name": "Create PL - Missing a BB Coordinate",
			"description": "Attempt to create a PL with a missing BB coordinate.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"category\": \"test-category\",\n  \"max_cloud_cover\": 5,\n  \"min_x\": 79,\n  \"min_y\": 5,\n  \"max_y\": 10,\n  \"name\": \"{{PL Name}}\",\n  \"spatial_filter_id\": null,\n  \"start_on\": \"2016-01-01T00:00:00Z\",\n  \"stop_on\": \"2017-01-01T00:00:00Z\"\n}"
		},
		{
			"id": "5c6a0965-afd4-395c-d4fd-3fd3a6c954ea",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/productline",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Number must be in a range\"] = responseBody.match(/between/i);\ntests[\"'max_cloud_cover' mentioned in message\"] = responseBody.match(/max_cloud_cover/i);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481300609132,
			"name": "Create PL - CC too small",
			"description": "Attempt to create a PL with a CC of -0.1%.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"category\": \"test-category\",\n  \"max_cloud_cover\": -0.1,\n  \"min_x\": 79,\n  \"min_y\": 5,\n  \"max_x\": 82,\n  \"max_y\": 10,\n  \"name\": \"{{PL Name}}\",\n  \"spatial_filter_id\": null,\n  \"start_on\": \"2016-01-01T00:00:00Z\",\n  \"stop_on\": \"2017-01-01T00:00:00Z\"\n}"
		},
		{
			"id": "5ddf7b8c-f966-1fce-7efd-a04e5cc74344",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Missing message\"] = responseBody.match(/miss/i);\ntests[\"'algorithm_id' mentioned in message\"] = responseBody.match(/algorithm_id/);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481202335935,
			"name": "Create Job - Missing algorithm_id",
			"description": "Attempt a job without specifying an algorithm_id.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": "{\n  \"scene_id\": \"{{scene_id}}\",\n  \"name\": \"postman job\"\n}"
		},
		{
			"id": "668083e7-bd36-eca5-f980-36366e292e4f",
			"headers": "Content-Type: application/json\n",
			"url": "http://bf-api.{{domain}}/v0/job",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"HTTPS needed\"] = responseBody.match(/https/i);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481980755987,
			"name": "HTTP Job",
			"description": "Check that HTTPS is required at the /v0/job endpoint.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"scene_id\": \"{{scene_id}}\",\n  \"name\": \"postman job\"\n}"
		},
		{
			"id": "6dc15921-1892-bbfc-36f6-8718532298e8",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job/by_scene/{{scene_id}}",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"data": [],
			"dataMode": "raw",
			"name": "Remembered Job in List",
			"description": "List all jobs filtered by scene ID, making sure the remembered rob has returned.",
			"descriptionFormat": "html",
			"time": 1481134824861,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar found = false;\nvar match = true;\n\nif (testLevels(tests, data, 'jobs.features', 'array')) {\n    for (i = 0; i < data.jobs.features.length; i++) {\n        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {\n            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId');\n        }\n        if (testLevels(tests, data.jobs.features[i], 'properties.scene_id', 'skip', 'jobs.features[].')) {\n            match = match && data.jobs.features[i].properties.scene_id === postman.getEnvironmentVariable('scene_id');\n        }\n    }\n}\n\ntests[\"Job found in list of jobs\"] = found;\ntests[\"All jobs had specified scene_id\"] = match;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"folder": "286e2b3c-a2e5-2416-ee39-c19c2dacbe65",
			"rawModeData": ""
		},
		{
			"id": "714dfaef-ec7b-c196-9578-9e005ce4a27a",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar found = false;\n\nif (testLevels(tests, data, 'jobs.features', 'array')) {\n    for (i = 0; i < data.jobs.features.length; i++) {\n        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {\n            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId');\n        }\n    }\n    postman.setEnvironmentVariable('active jobs', data.jobs.features.length);\n}\n\ntests[\"Job found in list of jobs\"] = found;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481308036224,
			"name": "List Jobs",
			"description": "List all jobs the user can see, making sure the just created job is present.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "71606d3e-2707-68fc-b845-08a18455f557",
			"headers": "",
			"url": "{{catalog_url}}",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"data": null,
			"dataMode": "params",
			"name": "Validate Catalog URL",
			"description": "Validate that the url given for the catalog service is valid",
			"descriptionFormat": "html",
			"time": 1481037011271,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"folder": "b66fc78f-5cc8-5628-74ea-eddc8f96172d"
		},
		{
			"id": "71728f0d-535f-87bb-d9bb-b549fb0f3f21",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job/{{jobId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'job.properties.status')) {\n    if (data.job.properties.status === 'Running' || data.job.properties.status === 'Submitted') {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Check Job Status');\n            wait(30000);\n        }\n        else {\n            tests[\"Job finished in time\"] = false;\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n    else if (data.job.properties.status === 'Success') {\n        postman.setEnvironmentVariable('retry_loop',0);\n        tests[\"Job finished in time\"] = true;\n    }\n    else {\n        tests[\"status should not be \" + data.job.properties.status] = false;\n        postman.setEnvironmentVariable('retry_loop',0);\n    }\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481981738884,
			"name": "Check Job Status",
			"description": "Check that the shoreline calculation job was successful.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": []
		},
		{
			"id": "72d2d59f-6b6c-b82f-fc90-2cc256b2a3dd",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar found = false;\n\nif (testLevels(tests, data, 'jobs.features', 'array')) {\n    for (i = 0; i < data.jobs.features.length; i++) {\n        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {\n            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId');\n        }\n    }\n}\nif (parseInt(postman.getEnvironmentVariable('active jobs')) == 1) {\n    // If there was only one job before it was deleted, \n    // don't fail for a test that an array is returned.\n    delete tests[\"features is array\"];\n}\n\ntests[\"Job not available in list\"] = !found;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481307803000,
			"name": "Verify Forgotten - List",
			"description": "Check that a forgotten job is not available in the job list.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "73f74336-ac16-8c05-c684-9c13dfeb8187",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job/{{jobId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Correct job forgotten\"] = responseBody.match(postman.getEnvironmentVariable('jobId'));",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1480963151665,
			"name": "Forget Job",
			"description": "Remove a job from the user's list of visible jobs,",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"folder": "286e2b3c-a2e5-2416-ee39-c19c2dacbe65",
			"rawModeData": ""
		},
		{
			"id": "7523d89d-2335-6ad0-78c2-036125c4e4a6",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/productline/{{productLineId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\ntests[\"Not found message.\"] = responseBody.match(/no.*found/i);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481981932066,
			"name": "Delete Product Line Again",
			"description": "Delete a Product Line again.  A 404 here can help confirm that it was deleted.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "753a697b-03b9-38fb-4f71-d7e9c85e6cd9",
			"headers": "Content-Type: application/json\n",
			"url": "http://bf-api.{{domain}}/login",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"HTTPS needed\"] = responseBody.match(/https/i);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_username}}",
				"password": "{{bf_password}}",
				"saveToRequest": true
			},
			"time": 1481980113397,
			"name": "HTTP Login",
			"description": "Check that HTTPS is required at the /login endpoint.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "7d6640a9-0ad4-b759-28df-93bb365d9d7d",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job/{{jobId_other}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481141476567,
			"name": "Check Other User's Job",
			"description": "Check the job status of another user's job, for the purpose of adding it to the job list.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": []
		},
		{
			"id": "81913220-6678-7bb3-802e-bbb0fd844166",
			"headers": "Content-Type: application/json\n",
			"url": "http://bf-api.{{domain}}/v0/algorithm",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"HTTPS needed\"] = responseBody.match(/https/i);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481980281314,
			"name": "HTTP Algorithm",
			"description": "Check that HTTPS is required at the /v0/algorithm endpoint.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "8ed84db9-bc48-ecc5-3d04-c63aaae676ae",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/productline",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'productline.id')) {\n    postman.setEnvironmentVariable('productLineId', data.productline.id);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481981790086,
			"name": "Create Product Line",
			"description": "Create a Product Line for Sri Lanka images acquired in 2016 with < 5% cloud cover.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"category\": \"test-category\",\n  \"max_cloud_cover\": 5,\n  \"min_x\": 79,\n  \"min_y\": 5,\n  \"max_x\": 82,\n  \"max_y\": 10,\n  \"name\": \"{{PL Name}}\",\n  \"spatial_filter_id\": null,\n  \"start_on\": \"2016-01-01T00:00:00Z\",\n  \"stop_on\": \"2017-01-01T00:00:00Z\"\n}"
		},
		{
			"id": "95b19647-35ef-e9b6-7663-3363fde45aea",
			"headers": "Content-Type: application/json\n",
			"url": "http://bf-api.{{domain}}/v0/productline",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"HTTPS needed\"] = responseBody.match(/https/i);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481982549347,
			"name": "HTTP Product Line",
			"description": "Check that HTTPS is required at the /v0/productline endpoint.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"category\": \"test-category\",\n  \"max_cloud_cover\": 5,\n  \"min_x\": 79,\n  \"min_y\": 5,\n  \"max_x\": 82,\n  \"max_y\": 10,\n  \"name\": \"{{PL Name}}\",\n  \"spatial_filter_id\": null,\n  \"start_on\": \"2016-01-01T00:00:00Z\",\n  \"stop_on\": \"2017-01-01T00:00:00Z\"\n}"
		},
		{
			"id": "97fea031-32b8-6f0e-d91f-f38f572366b4",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/productline",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400 (Bug #12095)\"] = responseCode.code === 400;\ntests[\"Not exist message.\"] = responseBody.match(/no.*exist/i);\ntests[\"'algorithm' & 'foo' mentioned in message\"] = responseBody.match(/algorithm/i) && responseBody.match(/foo/);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481299650139,
			"name": "Create PL - Invalid algorithm_id",
			"description": "Attempt to create a PL with an invalid algorithm_id.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": "{\n  \"algorithm_id\": \"foo\",\n  \"category\": \"test-category\",\n  \"max_cloud_cover\": 5,\n  \"min_x\": 79,\n  \"min_y\": 5,\n  \"max_x\": 82,\n  \"max_y\": 10,\n  \"name\": \"{{PL Name}}\",\n  \"spatial_filter_id\": null,\n  \"start_on\": \"2016-01-01T00:00:00Z\",\n  \"stop_on\": \"2017-01-01T00:00:00Z\"\n}"
		},
		{
			"id": "99a6520e-8253-73c6-a7f8-5c4e1a93815c",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Missing message\"] = responseBody.match(/miss/i);\ntests[\"'scene_id' mentioned in message\"] = responseBody.match(/scene_id/);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481202419449,
			"name": "Create Job - Missing scene_id",
			"description": "Attempt a job without specifying a scene_id.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"name\": \"postman job\"\n}"
		},
		{
			"id": "a1341f16-7c1a-9447-9faa-3631dd5e4440",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job/foo",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\ntests[\"Not found message.\"] = responseBody.match(/no.*found/i);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481202050389,
			"name": "Forget Fake Job",
			"description": "Check for a 404 response when trying to forget a job that does not exist.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": []
		},
		{
			"id": "a15103e1-fded-ef46-7999-81835713143e",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"data": [],
			"dataMode": "raw",
			"name": "Re-Log - List Jobs",
			"description": "List all jobs the user can see, making sure the just created job is still present after generating a new API Key.",
			"descriptionFormat": "html",
			"time": 1481203783583,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar found = false;\n\nif (testLevels(tests, data, 'jobs.features', 'array')) {\n    for (i = 0; i < data.jobs.features.length; i++) {\n        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {\n            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId');\n        }\n    }\n}\n\ntests[\"Job found in list of jobs\"] = found;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"folder": "9425810f-524f-2555-1ae8-96b2a9b260be",
			"rawModeData": ""
		},
		{
			"id": "ac5ad91e-2aa7-0329-354d-9d659379c540",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/algorithm",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'algorithms', 'array')) {\n    for (i = 0; i < data.algorithms.length; i++) {\n        testLevels(tests, data.algorithms[i], 'bands', 'array');\n        testLevels(tests, data.algorithms[i], 'description');\n        testLevels(tests, data.algorithms[i], 'interface');\n        testLevels(tests, data.algorithms[i], 'max_cloud_cover');\n        testLevels(tests, data.algorithms[i], 'name');\n        if (testLevels(tests, data.algorithms[i], 'service_id')) {\n            postman.setEnvironmentVariable('algServiceId', data.algorithms[i].service_id);\n        }\n        testLevels(tests, data.algorithms[i], 'version');\n    }\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481115176895,
			"name": "List Algorithms",
			"description": "List the algoithms in use by BF.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": "",
			"folder": "b66fc78f-5cc8-5628-74ea-eddc8f96172d"
		},
		{
			"id": "ae040b12-5103-2d42-3e43-d8bd1ad4ae28",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job/foo",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\ntests[\"Not found message.\"] = responseBody.match(/no.*found/i);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481201989914,
			"name": "Check Fake Job Status",
			"description": "Check for a 404 response when trying to get the status of a job that does not exist.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": []
		},
		{
			"id": "ae050b93-1cae-7503-a19b-8b762b61f787",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"data": [],
			"dataMode": "raw",
			"name": "Verify - Other Job not in  List",
			"description": "Check that another user's job was not in the job list.",
			"descriptionFormat": "html",
			"time": 1481141538581,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar found = false;\n\nif (testLevels(tests, data, 'jobs.features', 'array')) {\n    for (i = 0; i < data.jobs.features.length; i++) {\n        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {\n            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId_other');\n        }\n    }\n}\n\ntests[\"Job not available in list\"] = !found;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"folder": "286e2b3c-a2e5-2416-ee39-c19c2dacbe65",
			"rawModeData": ""
		},
		{
			"id": "ae5528f7-50a8-8867-9cae-e765d35c4dbe",
			"headers": "",
			"url": "{{wms_server_url}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1481037077697,
			"name": "Validate WMS URL",
			"description": "Validate that the url given for the WMS service is valid.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"folder": "b66fc78f-5cc8-5628-74ea-eddc8f96172d"
		},
		{
			"id": "affc727f-b104-2d34-3488-5a2dd893c1e8",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar found = false;\n\nif (testLevels(tests, data, 'jobs.features', 'array')) {\n    for (i = 0; i < data.jobs.features.length; i++) {\n        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {\n            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId_other');\n        }\n    }\n}\n\ntests[\"Job available in list\"] = found;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481141556348,
			"name": "Verify - Other Job added to List",
			"description": "Check that another user's job was added to the job list.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "b2613ee7-65e6-02c7-d492-a682a488867b",
			"headers": "",
			"url": "https://bf-api.{{domain}}/login",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'api_key')) {\n    tests[\"New key generated\"] = postman.getEnvironmentVariable('bf_key') != data.api_key;\n    postman.setEnvironmentVariable('bf_key', data.api_key);\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_username}}",
				"password": "{{bf_password}}",
				"saveToRequest": true
			},
			"time": 1481306010572,
			"name": "Re-Log In",
			"description": "Generate a new key, verifying that nothing changes about what the user can access.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "b457c662-63d8-1b69-760d-46d257f58e8a",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/productline",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Missing message\"] = responseBody.match(/miss/i);\ntests[\"'stop_on' mentioned in message\"] = responseBody.match(/stop_on/);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481298693883,
			"name": "Create PL - Missing stop_on",
			"description": "Attempt to create a PL without specifying a stop_on date.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"category\": \"test-category\",\n  \"max_cloud_cover\": 5,\n  \"min_x\": 79,\n  \"min_y\": 5,\n  \"max_x\": 82,\n  \"max_y\": 10,\n  \"name\": \"{{PL Name}}\",\n  \"spatial_filter_id\": null,\n  \"start_on\": \"2017-01-01T00:00:00Z\"\n}"
		},
		{
			"id": "b4bfa388-3875-0151-0cc4-e9bf4eaf2811",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/algorithm/{{algServiceId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntestLevels(tests, data, 'algorithm.bands', 'array');\ntestLevels(tests, data, 'algorithm.description');\ntestLevels(tests, data, 'algorithm.interface');\ntestLevels(tests, data, 'algorithm.max_cloud_cover');\ntestLevels(tests, data, 'algorithm.name');\nif (testLevels(tests, data.algorithm, 'service_id')) {\n    tests[\"Correct service_id returned\"] = postman.getEnvironmentVariable('algServiceId') === data.algorithm.service_id;\n}\ntestLevels(tests, data, 'algorithm.version');",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481115183935,
			"name": "Get Algorithm",
			"description": "Get the metadata of a specific algorithm.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": "",
			"folder": "b66fc78f-5cc8-5628-74ea-eddc8f96172d"
		},
		{
			"id": "b7b8d760-f2c3-fb6d-0266-4dcd85ded83d",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Missing message\"] = responseBody.match(/miss/i);\ntests[\"'name' mentioned in message\"] = responseBody.match(/name/);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481202596775,
			"name": "Create Job - Missing name",
			"description": "Attempt a job without specifying a name.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"scene_id\": \"{{scene_id}}\"\n}"
		},
		{
			"id": "b9045fd2-0c16-ccdd-b8b0-932da1b7754f",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/productline/{{productLineId_unending}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Correct Product Line deleted\"] = responseBody.match(postman.getEnvironmentVariable('productLineId_unending'));",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1482269687353,
			"name": "Delete Unending Product Line",
			"description": "Delete the Product Line (with null \"stop_on\") created in this test.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "c35e15aa-940b-344d-4572-bbdd529f25e1",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/productline",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Missing message\"] = responseBody.match(/miss/i);\ntests[\"'algorithm_id' mentioned in message\"] = responseBody.match(/algorithm_id/);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481293223233,
			"name": "Create PL - Missing algorithm_id",
			"description": "Attempt to create a PL without specifying an algorithm_id.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": "{\n  \"category\": \"test-category\",\n  \"max_cloud_cover\": 5,\n  \"min_x\": 79,\n  \"min_y\": 5,\n  \"max_x\": 82,\n  \"max_y\": 10,\n  \"name\": \"{{PL Name}}\",\n  \"spatial_filter_id\": null,\n  \"start_on\": \"2016-01-01T00:00:00Z\",\n  \"stop_on\": \"2017-01-01T00:00:00Z\"\n}"
		},
		{
			"id": "c6a18fb4-a801-78d0-d96e-167dab2526e2",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job/{{jobId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\n",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481134038110,
			"name": "Remember Job",
			"description": "Check the job status of a forgotten job, for the purpose of returning it to the job list.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"folder": "286e2b3c-a2e5-2416-ee39-c19c2dacbe65"
		},
		{
			"id": "d5e94aca-2921-3cbf-5834-756ff1d2fde9",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/productline",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar found = false;\n\nif (testLevels(tests, data, 'productlines.features', 'array')) {\n    for (i = 0; i < data.productlines.features.length; i++) {\n        if (testLevels(tests, data.productlines.features[i], 'id', 'skip', 'product_lines.features[].')) {\n            found = found || data.productlines.features[i].id === postman.getEnvironmentVariable('productLineId');\n        }\n    }\n}\nif (parseInt(postman.getEnvironmentVariable('active PLs')) == 1) {\n    // If there was only one job before it was deleted, \n    // don't fail for a test that an array is returned.\n    delete tests[\"features is array\"];\n}\n\ntests[\"Product Line no longer in list\"] = !found;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481982222125,
			"name": "Verify - PL Not in List",
			"description": "List all Product Lines, and make sure that the one deleted in this test is no longer present.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "dcc1dbd9-28f8-c477-a752-00286aa9e7ba",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/productline",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Missing message\"] = responseBody.match(/miss/i);\ntests[\"'start_on' mentioned in message\"] = responseBody.match(/start_on/);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481294653469,
			"name": "Create PL - Missing start_on",
			"description": "Attempt to create a PL without specifying a start_on date.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"category\": \"test-category\",\n  \"max_cloud_cover\": 5,\n  \"min_x\": 79,\n  \"min_y\": 5,\n  \"max_x\": 82,\n  \"max_y\": 10,\n  \"name\": \"{{PL Name}}\",\n  \"spatial_filter_id\": null,\n  \"stop_on\": \"2017-01-01T00:00:00Z\"\n}"
		},
		{
			"id": "dd5a1fa1-a6e1-c6e6-62ba-b54a39ed8c94",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/productline",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Missing message\"] = responseBody.match(/miss/i);\ntests[\"'name' mentioned in message\"] = responseBody.match(/name/);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481294242390,
			"name": "Create PL - Missing name",
			"description": "Attempt to create a PL without specifying a name.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"category\": \"test-category\",\n  \"max_cloud_cover\": 5,\n  \"min_x\": 79,\n  \"min_y\": 5,\n  \"max_x\": 82,\n  \"max_y\": 10,\n  \"spatial_filter_id\": null,\n  \"start_on\": \"2016-01-01T00:00:00Z\",\n  \"stop_on\": \"2017-01-01T00:00:00Z\"\n}"
		},
		{
			"id": "dee46bad-1c97-5737-2622-30c10319fbeb",
			"headers": "Content-Type: application/json\n",
			"url": "http://bf-api.{{domain}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"HTTPS needed\"] = responseBody.match(/https/i);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1481980014219,
			"name": "HTTP Base",
			"description": "Check that HTTPS is required at the base endpoint.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "dee721bd-788d-248f-7ac6-abb2c662e4fb",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"data": [],
			"dataMode": "raw",
			"name": "Verify - Other Job Still in List",
			"description": "Check that another user's job remained in the job list even after that other user forgot that job.",
			"descriptionFormat": "html",
			"time": 1481142910918,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar found = false;\n\nif (testLevels(tests, data, 'jobs.features', 'array')) {\n    for (i = 0; i < data.jobs.features.length; i++) {\n        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {\n            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId_other');\n        }\n    }\n}\n\ntests[\"Job available in list\"] = found;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"folder": "286e2b3c-a2e5-2416-ee39-c19c2dacbe65",
			"rawModeData": ""
		},
		{
			"id": "e1ddcdf2-89f9-6443-ad36-b6779d7f7afb",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job/{{jobId_other}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Correct job forgotten\"] = responseBody.match(postman.getEnvironmentVariable('jobId_other'));",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{other_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481201431729,
			"name": "Have Other User Forget Job",
			"description": "Remove a job from the other user's list of visible jobs.\nThis should not remove the job from the primary user's list.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "e2685fc8-77e5-babe-ff1b-76289b7c6a1f",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/user",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'services.catalog')) {\n    postman.setEnvironmentVariable('catalog_url', data.services.catalog);\n}\nif (testLevels(tests, data, 'services.wms_server')) {\n    postman.setEnvironmentVariable('wms_server_url', data.services.wms_server);\n}\nif (testLevels(tests, data, 'profile.username')) {\n    tests[\"Correct username retruned\"] = data.profile.username == postman.getGlobalVariable('bf_username');\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1482268672786,
			"name": "Get Services",
			"description": "Get a list of services in use by BF.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "e3e50bd8-eba1-4f3f-4c49-4d2fdc2f30af",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'job.id')) {\n    postman.setEnvironmentVariable('jobId', data.job.id);\n}\ntestLevels(tests, data, 'job.geometry');\nif (testLevels(tests, data, 'job.properties.created_by')) {\n    tests[\"Correct User\"] = postman.getGlobalVariable('bf_username') === data.job.properties.created_by;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1482268268180,
			"name": "Create Job",
			"description": "Start a shoreline calculation job.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"scene_id\": \"{{scene_id}}\",\n  \"name\": \"postman job\"\n}"
		},
		{
			"id": "e6f3a706-ef10-fead-8989-c2d131827120",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/productline",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Must be number\"] = responseBody.match(/number/i);\ntests[\"'max_cloud_cover' mentioned in message\"] = responseBody.match(/max_cloud_cover/i);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481300794397,
			"name": "Create PL - CC is null",
			"description": "Attempt to create a PL with a null CC.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"category\": \"test-category\",\n  \"max_cloud_cover\": null,\n  \"min_x\": 79,\n  \"min_y\": 5,\n  \"max_x\": 82,\n  \"max_y\": 10,\n  \"name\": \"{{PL Name}}\",\n  \"spatial_filter_id\": null,\n  \"start_on\": \"2016-01-01T00:00:00Z\",\n  \"stop_on\": \"2017-01-01T00:00:00Z\"\n}"
		},
		{
			"id": "edfb2ae4-abeb-abfb-cb88-f732f4742929",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/productline",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Missing message\"] = responseBody.match(/miss/i);\ntests[\"'max_cloud_cover' mentioned in message\"] = responseBody.match(/max_cloud_cover/);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481293507401,
			"name": "Create PL - Missing max_cloud_cover",
			"description": "Attempt to create a PL without specifying max_cloud_cover.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"folder": "c965dd98-7279-556b-dd09-88f2e8a8c503",
			"folderId": null,
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"category\": \"test-category\",\n  \"min_x\": 79,\n  \"min_y\": 5,\n  \"max_x\": 82,\n  \"max_y\": 10,\n  \"name\": \"{{PL Name}}\",\n  \"spatial_filter_id\": null,\n  \"start_on\": \"2016-01-01T00:00:00Z\",\n  \"stop_on\": \"2017-01-01T00:00:00Z\"\n}"
		},
		{
			"id": "f12b0128-7958-d252-c43e-3fef49e24903",
			"headers": "Content-Type: application/json\n",
			"url": "http://bf-api.{{domain}}/v0/user",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"HTTPS needed\"] = responseBody.match(/https/i);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481981304272,
			"name": "HTTP User",
			"description": "Check that HTTPS is required at the /v0/user endpoint.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "f376964a-0e39-2ce3-56e1-e0206c928201",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job/by_scene/{{scene_id}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar found = false;\nvar match = true;\n\nif (testLevels(tests, data, 'jobs.features', 'array')) {\n    for (i = 0; i < data.jobs.features.length; i++) {\n        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {\n            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId');\n        }\n        if (testLevels(tests, data.jobs.features[i], 'properties.scene_id', 'skip', 'jobs.features[].')) {\n            match = match && data.jobs.features[i].properties.scene_id === postman.getEnvironmentVariable('scene_id');\n        }\n    }\n}\nif (parseInt(postman.getEnvironmentVariable('active jobs - scene')) == 1) {\n    // If there was only one job before it was deleted, \n    // don't fail for a test that an array is returned.\n    delete tests[\"features is array\"];\n}\n\ntests[\"Forgotten Job removed from list of jobs (Bug #11294)\"] = !found;\ntests[\"All jobs had specified scene_id\"] = match;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481316848389,
			"name": "Verify Forgotten - List Jobs by Scene",
			"description": "Check that a forgotten job is not available in the jobs listed by scene.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "f5164622-b1f1-d9ac-5486-5f848623e77a",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'job.id')) {\n    postman.setEnvironmentVariable('jobId_other', data.job.id);\n}\ntestLevels(tests, data, 'job.geometry');\nif (testLevels(tests, data, 'job.properties.created_by')) {\n    tests[\"Created by not the main user\"] = postman.getEnvironmentVariable('bf_username') != data.job.properties.created_by;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{other_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481559143434,
			"name": "Create Job from Another User",
			"description": "Start a shoreline calculation job, under a different user.\nCreating this job serves the purpose of making it visible to the primary user in this test.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"scene_id\": \"{{scene_id}}\",\n  \"name\": \"postman job\"\n}"
		},
		{
			"id": "fcce742d-4a8b-4e45-c989-cd81204310df",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/algorithm/foo",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\n\n\ntests[\"Not found message.\"] = responseBody.match(/no.*found/i);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481115322030,
			"name": "Get Fake Algorithm",
			"description": "Attempt to get the metadata of an algorithm that does not exist.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": "",
			"folder": "b66fc78f-5cc8-5628-74ea-eddc8f96172d"
		},
		{
			"id": "ff2d0bec-b972-4888-0b81-498c8c01f286",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar found = false;\n\nif (testLevels(tests, data, 'jobs.features', 'array')) {\n    for (i = 0; i < data.jobs.features.length; i++) {\n        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {\n            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId_other');\n        }\n    }\n}\n\ntests[\"Job not available in list\"] = !found;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1481143131517,
			"name": "Verify - Other Job no longer in List",
			"description": "Check that another user's job was removed from the job list after the primary user forgot it.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"rawModeData": ""
		}
	]
}